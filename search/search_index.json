{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Bem-vind@ ao Meu Reposit\u00f3rio de Estudos Este projeto \u00e9 o meu centro de conhecimento pessoal, um espa\u00e7o dedicado a registrar e aprofundar meus estudos em diversas tecnologias essenciais para o desenvolvimento de software moderno. O objetivo \u00e9 criar uma base de consulta r\u00e1pida, com exemplos pr\u00e1ticos e anota\u00e7\u00f5es detalhadas sobre os desafios e solu\u00e7\u00f5es encontrados no dia a dia. Tecnologias em Foco Atualmente, o reposit\u00f3rio est\u00e1 organizado nas seguintes se\u00e7\u00f5es: TypeScript Nesta se\u00e7\u00e3o, voc\u00ea encontrar\u00e1 um plano de estudos detalhado de 30 dias, focado em levar o conhecimento do n\u00edvel b\u00e1sico ao intermedi\u00e1rio. Os t\u00f3picos incluem: Fundamentos S\u00f3lidos : Classes, o contexto do this , e a elimina\u00e7\u00e3o progressiva do any . Conceitos Avan\u00e7ados : Generics, decorators, conditional types e utility types. Padr\u00f5es de Arquitetura : Implementa\u00e7\u00e3o de services, error handling type-safe e integra\u00e7\u00e3o com bibliotecas como React Hook Form. O objetivo \u00e9 construir a capacidade de arquitetar aplica\u00e7\u00f5es robustas, seguras e escal\u00e1veis. Python (em breve) Esta se\u00e7\u00e3o ser\u00e1 dedicada aos meus estudos em Python, cobrindo desde a sintaxe fundamental at\u00e9 t\u00f3picos avan\u00e7ados como desenvolvimento web com Django/Flask, an\u00e1lise de dados com Pandas e automa\u00e7\u00e3o de tarefas. Shell Script (em breve) Aqui, vou documentar minhas explora\u00e7\u00f5es em Shell Script, com foco em automa\u00e7\u00e3o de tarefas, manipula\u00e7\u00e3o de arquivos e otimiza\u00e7\u00e3o de workflows no ambiente de linha de comando. Sinta-se \u00e0 vontade para navegar pelo conte\u00fado. A estrutura foi pensada para ser intuitiva e facilitar a consulta dos t\u00f3picos de interesse.","title":"In\u00edcio"},{"location":"#bem-vind-ao-meu-repositorio-de-estudos","text":"Este projeto \u00e9 o meu centro de conhecimento pessoal, um espa\u00e7o dedicado a registrar e aprofundar meus estudos em diversas tecnologias essenciais para o desenvolvimento de software moderno. O objetivo \u00e9 criar uma base de consulta r\u00e1pida, com exemplos pr\u00e1ticos e anota\u00e7\u00f5es detalhadas sobre os desafios e solu\u00e7\u00f5es encontrados no dia a dia.","title":"Bem-vind@ ao Meu Reposit\u00f3rio de Estudos"},{"location":"#tecnologias-em-foco","text":"Atualmente, o reposit\u00f3rio est\u00e1 organizado nas seguintes se\u00e7\u00f5es:","title":"Tecnologias em Foco"},{"location":"#typescript","text":"Nesta se\u00e7\u00e3o, voc\u00ea encontrar\u00e1 um plano de estudos detalhado de 30 dias, focado em levar o conhecimento do n\u00edvel b\u00e1sico ao intermedi\u00e1rio. Os t\u00f3picos incluem: Fundamentos S\u00f3lidos : Classes, o contexto do this , e a elimina\u00e7\u00e3o progressiva do any . Conceitos Avan\u00e7ados : Generics, decorators, conditional types e utility types. Padr\u00f5es de Arquitetura : Implementa\u00e7\u00e3o de services, error handling type-safe e integra\u00e7\u00e3o com bibliotecas como React Hook Form. O objetivo \u00e9 construir a capacidade de arquitetar aplica\u00e7\u00f5es robustas, seguras e escal\u00e1veis.","title":"TypeScript"},{"location":"#python-em-breve","text":"Esta se\u00e7\u00e3o ser\u00e1 dedicada aos meus estudos em Python, cobrindo desde a sintaxe fundamental at\u00e9 t\u00f3picos avan\u00e7ados como desenvolvimento web com Django/Flask, an\u00e1lise de dados com Pandas e automa\u00e7\u00e3o de tarefas.","title":"Python (em breve)"},{"location":"#shell-script-em-breve","text":"Aqui, vou documentar minhas explora\u00e7\u00f5es em Shell Script, com foco em automa\u00e7\u00e3o de tarefas, manipula\u00e7\u00e3o de arquivos e otimiza\u00e7\u00e3o de workflows no ambiente de linha de comando. Sinta-se \u00e0 vontade para navegar pelo conte\u00fado. A estrutura foi pensada para ser intuitiva e facilitar a consulta dos t\u00f3picos de interesse.","title":"Shell Script (em breve)"},{"location":"Logica/apostila/","text":"Lista de Atividades Campo de ab\u00f3boras Hagrid est\u00e1 tendo um dia cheio com Bicu\u00e7o e pediu ajuda a Harry e Ron. Eles precisam ajud\u00e1-lo a coletar ab\u00f3boras. A planta\u00e7\u00e3o \u00e9 grande e para acelerar o trabalho, Hagrid pede que Harry fique respons\u00e1vel pela colheita em uma determinada linha, come\u00e7ando na esquerda e indo at\u00e9 o fim dela na direita. Da mesma forma, Hagrid pede que Ron colha as ab\u00f3boras em outra linha, por\u00e9m agora, Ron come\u00e7a em cima e vai at\u00e9 o fim dela na parte de baixo da planta\u00e7\u00e3o . Hagrid quer saber ao fim da tarefa qual dos dois coletou mais ab\u00f3boras, levando-se em considera\u00e7\u00e3o seu peso. S\u00f3 tome cuidado com o ponto de intersec\u00e7\u00e3o entre as duas linhas que Harry e Ron ir\u00e3o coletar as ab\u00f3boras. Somente um deles fica com a ab\u00f3bora que est\u00e1 l\u00e1, ela \u00e9 do primeiro que l\u00e1 chegar, ou seja, ela pertence \u00e0quele que estiver mais pr\u00f3ximo dela a partir do ponto de in\u00edcio de sua colheita, e se der empate na dist\u00e2ncia, a ab\u00f3bora fica com Ron . Entrada Seu programa receber\u00e1 primeiramente um inteiro \u2018N\u2019 (1 \u2264 \u2018N\u2019 \u2264 100) , representando o tamanho da planta\u00e7\u00e3o de ab\u00f3boras, que \u00e9 um campo de propor\u00e7\u00e3o NxN (N linhas horizontais por N linhas verticais). A seguir ser\u00e3o dadas \u2018N\u2019 linhas, onde em cada uma ser\u00e3o dados \u2018N\u2019 inteiros \u2018P\u2019 (1 <= P <= 100) , que representam o peso de cada ab\u00f3bora no campo. H\u00e1 uma ab\u00f3bora em cada posi\u00e7\u00e3o do campo NxN. Por fim, a \u00faltima linha da entrada cont\u00eam as linhas \u2018X\u2019 e \u2018Y\u2019 (0 <= X,Y < N) que Harry e Ron ir\u00e3o coletar, respectivamente. Cuidado que a linha de Ron na verdade se trata de uma coluna na matriz da planta\u00e7\u00e3o . Sa\u00edda Imprima o peso total da colheita de Harry e a seguir, na linha de baixo, imprima o peso total da colheita de Ron, como nos exemplos abaixo. Entrada Sa\u00edda 4 Harry 19 1 2 3 4 5 6 7 8 1 3 5 7 2 4 6 8 1 2 Ron 21 4 Harry 16 1 2 3 4 5 6 7 8 1 3 5 7 Ron 12 2 4 6 8 2 1 3 Harry 10 1 2 3 4 5 6 7 8 9 1 1 Ron 15 Faxina Autor: Gabriel Dahia Voc\u00ea decidiu se livrar dos livros em sua casa. Seu crit\u00e9rio para decidir se um livro vai ser doado ou n\u00e3o \u00e9 a quantidade de consoantes em seu t\u00edtulo. Caso o t\u00edtulo possua mais do que T consoantes, ele ser\u00e1 doado; caso contr\u00e1rio, ele ficar\u00e1 em sua estante. Sua tarefa \u00e9 determinar, dados os t\u00edtulos dos livros, quais ser\u00e3o doados. Entrada A primeira linha da entrada cont\u00e9m dois inteiros N e T, respectivamente o n\u00famero de livros na estante e o n\u00famero m\u00e1ximo de consoantes permitidas no t\u00edtulo de cada livro. As pr\u00f3ximas N linhas cont\u00eam os t\u00edtulos dos livros, que tem no m\u00e1ximo 20 s\u00edmbolos. Estes s\u00e3o apenas letras min\u00fasculas e espa\u00e7os. Sa\u00edda Para cada livro, seu programa deve imprimir 0 caso o livro deva ser doado e 1 caso ele fique na estante, seguidos de um fim de linha. Limites 1 N 105; 1 T 20. Exemplos Entrada Sa\u00edda 3 4 0 0 harry potter senhor dos aneis aleph 1 Torre Xadrez Xadrez \u00e9 sem d\u00favida um dos jogos mais famosos e que exige grande capacidade intelectual e estrat\u00e9gica. S\u00e3o v\u00e1rias pe\u00e7as que possuem diferentes tipos de movimentos no tabuleiro. A torre, por exemplo, move-se em uma linha ou em uma coluna, como pode ser observado na figura acima, onde as posi\u00e7\u00f5es marcadas com um X destacam aquelas onde a torre pode ir. Havendo uma pe\u00e7a inimiga a sua frente, esta pe\u00e7a pode ser derrotada pela torre, \u00e9 o caso do pe\u00e3o na figura acima. Por\u00e9m, se houver uma pela aliada a frente, a torre poder\u00e1 se mover at\u00e9 a posi\u00e7\u00e3o imediatamente anterior a pe\u00e7a aliada, \u00e9 o caso do cavalo na figura acima. Sendo assim, voc\u00ea foi escolhido para desenvolver um programa que diz quantas pe\u00e7as inimigas a torre poder\u00e1 possivelmente derrotar, a partir de uma posi\u00e7\u00e3o X, Y no tabuleiro que indica onde a torre est\u00e1. Entrada A entrada ser\u00e1 primeiramente uma grade de tamanho \u20188 x 8\u2019 , representando o tabuleiro de xadrez. Cada uma das \u20188\u2019 linhas do tabuleiro possuir\u00e1 \u20188\u2019 inteiros \u2018Q\u2019 (0 <= Q <= 2) , separados por espa\u00e7o. Portanto, cada posi\u00e7\u00e3o do tabuleiro possuir\u00e1 3 valores poss\u00edveis: 0 \u2013 para indicar que naquela posi\u00e7\u00e3o n\u00e3o tem pe\u00e7a; 1 \u2013 para indicar uma pe\u00e7a aliada; 2 \u2013 para indicar que naquela posi\u00e7\u00e3o h\u00e1 uma pe\u00e7a inimiga. Por fim, ser\u00e3o dados dois inteiros \u2018X\u2019 e \u2018Y\u2019 (0 <= X, Y <= 7) , representando a coordenada inicial da torre, sendo que \u2018X\u2019 representa uma linha e \u2018Y\u2019 representa uma coluna. Al\u00e9m disso, na posi\u00e7\u00e3o X \u2013 Y ter\u00e1 o valor 1 , pois representa a pr\u00f3pria torre. Sa\u00edda Voc\u00ea dever\u00e1 imprimir a quantidade de pe\u00e7as inimigas no caminho da torre. Entrada Sa\u00edda 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 1 1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 2 0 0 0 0 0 0 0 2 0 0 0 0 0 2 2 Pal\u00edndromos Autor: Ubiratan Neto Luiz e seus colegas est\u00e3o participando de uma s\u00e9rie de jogos na aula de portugu\u00eas em sua escola. Em um dos jogos, \u00e9 dado uma palavra para cada um deles, e eles precisam dizer se ela \u00e9 um pal\u00edndromo ou n\u00e3o. Uma palavra \u00e9 um pal\u00edndromo se ela \u00e9 a mesma palavra lida de tr\u00e1s pra frente. Por exemplo \u201carara\u201d, \u201cosso\u201d, \u201cralar\u201d, etc. Luiz deseja vencer o jogo mesmo que seja trapaceando, e pediu a voc\u00ea que fizesse um programa que respondesse se uma palavra era um pal\u00edndromo ou n\u00e3o. Entrada A primeira linha da entrada possui uma palavra S, contendo apenas letras min\u00fasculas, a palavra dada por Luiz. Sa\u00edda A sa\u00edda deve conter numa \u00fanica linha a palavra \u201cSim\u201d, caso S seja um pal\u00edndromo, e \u201cN\u00e3o\u201d caso \u201cS\u201d n\u00e3o seja um pal\u00edndromo. Limites 1 S 100 Exemplos Entrada Sa\u00edda arara Sim reviver Sim rezar N\u00e3o Xeroque Rolmes Autora: Laila Mota Xeroque Rolmes \u00e9 um primo distante de um detetive renomado e agora quer seguir os passos do seu primo. Em seu primeiro caso, uma testemunha lhe disse que na casa do suspeito existe um cofre com uma pasta com v\u00e1rias provas de seus v\u00e1rios crimes. Ao investigar o lugar, Xeroque Rolmes percebe que do lado do cofre existem 6 peda\u00e7os de papel colados na parede com palavras escritas e, mais que isso, ele descobriu que a quantidade de letras de cada palavra corresponde a um d\u00edgito da senha do cofre. Entrada A entrada \u00e9 composta por 6 linhas, cada linha cont\u00e9m uma palavra encontrada. Sa\u00edda A sa\u00edda \u00e9 composta por uma linha com a senha do cofre. Limites 1\u2264 N \u226410 Exemplos Entrada Sa\u00edda sh embhtots m qgexyzbcu wwhzzw rdfxs 281965 a 113631 a yni xbzaxh lyg q Ca\u00e7ando Pok\u00e9mons Ash e seus amigos est\u00e3o em uma aventura em busca de novos pok\u00e9mons. Al\u00e9m disso, decidiram ver ao final da busca quem conseguiu mais pok\u00e9mons de um certo tipo. Sua tarefa \u00e9 criar um programa que diga quantos pok\u00e9mons de um certo tipo Ash pegou . Para isso ser\u00e1 dada uma matriz representado a \u00e1rea onde ele est\u00e1. Para cada posi\u00e7\u00e3o (x ; y) da matriz, se o valor for 0 (zero), significa que n\u00e3o tem nenhum pok\u00e9mon naquela posi\u00e7\u00e3o e se o valor for um n\u00famero \u2018T\u2019, diferente de zero, significa que tem um pok\u00e9mon do tipo \u2018T\u2019 naquela posi\u00e7\u00e3o que pode ser pego por Ash. Entrada Na primeira linha ser\u00e3o dados dois inteiros \u2018N\u2019 e \u2018M\u2019 (1 <= N, M <= 100) que diz a quantidade de linhas e colunas da matriz, respectivamente. As pr\u00f3ximas \u2018N\u2019 linhas ter\u00e3o \u2018M\u2019 inteiros \u2018T\u2019 (0 <= T <= 100) em cada, representando o tipo do pok\u00e9mon ou se n\u00e3o h\u00e1 pok\u00e9mon. Por fim, na \u00faltima linha, ser\u00e1 dado um inteiro \u2018P\u2019 (1 <= P <= 100) , representando o tipo do pok\u00e9mon a ser pego por Ash. Sa\u00edda A sa\u00edda consiste em 1 linha contendo a frase \u201c Ash pegou \u2018Q\u2019 pokemon \u201d onde \u2018Q\u2019 deve ser a quantidade de pok\u00e9mons do tipo \u2018P\u2019 pegos por Ash, podendo ser inclusive 0 (zero). Entrada Sa\u00edda 4 4 Ash pegou 3 pokemon 0 1 0 0 2 0 2 0 0 1 0 0 0 0 0 2 2 5 10 Ash pegou 4 pokemon 0 1 0 0 0 3 0 0 0 0 0 2 0 0 0 1 0 0 0 2 0 3 0 0 0 0 2 0 0 0 8 0 1 0 0 3 0 8 0 0 0 0 0 0 0 0 0 0 1 0 1 Invent\u00e1rio ca\u00f3tico Autor: Gustavo Amaral J\u00f4natas da Silva ap\u00f3s v\u00e1rias horas jogando Dark Souls III percebeu que seu invent\u00e1rio est\u00e1 ca\u00f3tico e n\u00e3o consegue encontrar seus itens. Seu objetivo \u00e9 identificar se um item est\u00e1 no invent\u00e1rio . Entrada A entrada consistir\u00e1 de v\u00e1rias linhas, onde em cada uma teremos uma string representando o nome de determinado item . A entrada com o nome dos itens termina quando for digitado a palavra \u201cfim\u201d . Por fim, ser\u00e1 dado o nome do item que J\u00f4natas quer saber se est\u00e1 no invent\u00e1rio dele. Sa\u00edda Dever\u00e1 ser impresso \u201c item encontrado \u201d caso o item esteja no invent\u00e1rio ou \u201c voce ainda nao descobriu este item \u201d, caso contr\u00e1rio. Entrada Sa\u00edda Storm Ruler voce ainda nao descobriu este item Scholar's Candlestick Broadsword Anri's Straight Sword Sunlight Straight Sword Gael's Greatsword Ringed Knight Paired Greatswords fim Carthus Shotel Frayed Blade Follower Sabre Sellsword Twinblades Harald Curved Greatsword Thrall Axe Butcher Knife fim Sellsword Twinblades item encontrado Vamos jogar um jogo Autor: Danilo de A. Peleteiro E agora?!?! Voc\u00ea foi capturado por Jigsaw em mais um de seus planos contra aqueles que ele julga n\u00e3o valorizar a pr\u00f3pria vida! Para provar que Jigsaw est\u00e1 enganado, voc\u00ea dever\u00e1 resolver um de seus peculiares enigmas e assim garantir a sua liberdade (talvez). Voc\u00ea encontrou uma grava\u00e7\u00e3o que explica passo a passo o que dever\u00e1 ser feito. Em sua sala, haver\u00e1 um papel com uma frase acompanhada de um n\u00famero e uma palavra. O que Jigsaw deseja \u00e9 muito simples: que voc\u00ea diga se a quantidade de ocorr\u00eancias daquela palavra na frase \u00e9 a mesma da escrita no papel . Caso seja, voc\u00ea dever\u00e1 dizer \u201cSIM!\u201d , do contr\u00e1rio, dever\u00e1 falar \u201cN\u00c3O!\u201d . Um detalhe essencial \u00e9 que todas as letras s\u00e3o min\u00fasculas e Jigsaw ignora espa\u00e7os em branco na frase no momento de contar as ocorr\u00eancias da palavra . Tarefa Para sua sorte, voc\u00ea encontrou um computador velho na sala onde est\u00e1, e como \u00e9 conhecido por ser viciado em programar, decidiu desenvolver um programa que o auxiliasse (e, quem sabe, outros futuros prisioneiros) nesse enigma. Portanto, voc\u00ea dever\u00e1 computar a frase solicitada por Jigsaw e posteriormente avaliar se existe a quantidade \u2018Q\u2019 de ocorr\u00eancias de uma dada palavra P. Entrada A primeira linha da entrada consiste de uma string S , que indica a frase a ser avaliada. A segunda linha cont\u00e9m um inteiro \u2018Q\u2019 (1 <= Q <= 30) , informando a quantidade de ocorr\u00eancias, seguido de uma palavra P , que indica o que deve ser detectado na frase S . Sa\u00edda Seu programa dever\u00e1 imprimir a quantidade de ocorr\u00eancias de P em uma linha. Na outra, dever\u00e1 imprimir \u201cSIM!\u201d caso essa quantidade seja igual \u00e0 \u2018Q\u2019 e , caso contr\u00e1rio, dever\u00e1 imprimir \u201cN\u00c3O!\u201d.** Entrada Sa\u00edda eu quero jogar um jogo jogando limpo 3 jog 3 SIM! xhuisyd xnzyxe nxnzzz zx x ify zzuzzzz z zjx 4 zz 6 NAO! eu adoro sao joao e eu amo suas comidas 3 ua 3 SIM! Oxi v\u00e9i, cad\u00ea a praia? Autor: H\u00e9rus Concei\u00e7\u00e3o Voc\u00ea est\u00e1 desenvolvendo um programa de navega\u00e7\u00e3o mar\u00edtima e explora\u00e7\u00e3o de ilhas. Voc\u00ea percebeu que o Dev respons\u00e1vel pelo mapa se esqueceu de um detalhe: as praias. Voc\u00ea precisa resolver esse problema criando um programa que transforma em praia aquilo que deveria ser praia. Entrada A entrada ser\u00e1 dada por um mapa de dimens\u00f5es 10x10 . Cada uma das 10 linhas de entrada possuir\u00e1 10 caracteres separados por espa\u00e7os , sendo cada caractere ou \u2018*\u2019 para representar a \u00e1gua ou \u2018t\u2019 para representar a terra . Sa\u00edda O programa deve imprimir o mapa corrigido, transformando em praia \u2018p\u2019 , todo peda\u00e7o de terra \u2018t\u2019 que estiver em contato direto com a \u00e1gua \u2018*\u2019 , verticalmente ou horizontalmente . O que estiver fora do mapa n\u00e3o deve ser considerado como \u00e1gua. Entrada Sa\u00edda * * * * * * * * * * * * * * * * * * * * * * t t t t * * * * * * p p p p * * * * * t t t t t t * * * * p p p t t p * * * * * * * t t t t t * * * * * p t t p p * * * * * * t t t t * * * * * * p t t p * * * * * * t t t * * * * * * * p t p * * * * * * t t t t * * t t t t t t t t t * t t t t t t t t * * t t t t t * * * * * * * * * p t t p * * p p p p t t t t p * t t t t t p p p * * t t t t p * * * * * t * * * * * * * * t p * * * * * * * * p * t t t t t t t t * * p p p p p p p p * * t t t t t t t t * * p t t t t t t p * * t t t t t t t t * * p t t t t t t p * * t t t t t t t t * * p t t t t t t p * * t t t t t t t t * * p t t t t t t p * * t t t t t t t t * * p t t t t t t p * * t t t t t t t t * * p t t t t t t p * * t t t t t t t t * * p p p p p p p p * t * * * * * * * * t p * * * * * * * * p Batalha de Yavin A Batalha de Yavin, a maior batalha da Guerra Civil Gal\u00e1ctica, resultou na destrui\u00e7\u00e3o da primeira Estrela da Morte. Os dois lados do confronto foram o Imp\u00e9rio Gal\u00e1ctico e a Alian\u00e7a Rebelde. A Estrela da Morte chegou no sistema escoltada por uma frota constitu\u00edda por diversas naves, dentre elas, as velozes Tie Fighters. O Comando Rebelde estava desacreditado. Com quase todos os pilotos destru\u00eddos, o destino da batalha estava nas m\u00e3os de um jovem piloto, mas este trazia consigo uma nova esperan\u00e7a, afinal, esse jovem era Luke Skywalker. Ele sabia que poderia usar a dobra espacial e o poder da for\u00e7a para se teletransportar com sua nave muito mais r\u00e1pido de um lugar para outro no espa\u00e7o e, assim, conseguir destruir o m\u00e1ximo poss\u00edvel de naves inimigas. Dadas as coordenadas de cada nave inimiga e de cada teleporte de Luke, diga quantas naves ele consegue destruir. Para cada coordenada onde Luke teleporta, ele d\u00e1 apenas um tiro de Pr\u00f3tons que \u00e9 capaz de destruir a primeira nave que esteja em sua frente. No exemplo ao lado, ao teleportar para a posi\u00e7\u00e3o marcada como (2), ele atira e destr\u00f3i somente a nave que est\u00e1 em sua frente. J\u00e1 ao teleportar para a posi\u00e7\u00e3o (3), ele atira mas n\u00e3o acerta nenhuma nave. Entrada A primeira linha da entrada possui um inteiro \u2018N\u2019 (3 \u2264 N \u2264 100) , indicando que a matriz que representa o espa\u00e7o possui dimens\u00f5es NxN , e um inteiro \u2018M\u2019 (1 \u2264 M \u2264 1000) , indicando o n\u00famero de teleportes realizados por Luke. As pr\u00f3ximas \u2018N\u2019 linhas possuem \u2018N\u2019 inteiros em cada uma, cujos valores podem ser 0 (se n\u00e3o existe nave naquele quadrante) ou 1 (se existe uma nave naquele quadrante). Nas pr\u00f3ximas \u2018M\u2019 linhas ser\u00e3o dadas as coordenadas inteiras (L \u2013 linha C - coluna) de cada teleporte de Luke, um por linha. \u00c9 garantido que Luke n\u00e3o aparecer\u00e1 numa coordenada que possui uma nave, j\u00e1 que dois corpos n\u00e3o podem ocupar o mesmo lugar no espa\u00e7o ao mesmo tempo. Os teleportes ocorrer\u00e3o somente dentro do espa\u00e7o dado. Sa\u00edda A sa\u00edda consiste de apenas um inteiro que \u00e9 o n\u00famero de naves destru\u00eddas por Luke. Entrada Sa\u00edda 8 3 2 0 0 0 0 0 0 0 1 1 0 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 7 2 3 5 3 1 4 2 2 0 1 0 1 0 1 1 0 1 0 0 0 0 0 0 1 3 2 3 1","title":"L\u00f3gica de Programa\u00e7\u00e3o"},{"location":"Logica/apostila/#lista-de-atividades","text":"","title":"Lista de Atividades"},{"location":"Logica/apostila/#campo-de-aboboras","text":"Hagrid est\u00e1 tendo um dia cheio com Bicu\u00e7o e pediu ajuda a Harry e Ron. Eles precisam ajud\u00e1-lo a coletar ab\u00f3boras. A planta\u00e7\u00e3o \u00e9 grande e para acelerar o trabalho, Hagrid pede que Harry fique respons\u00e1vel pela colheita em uma determinada linha, come\u00e7ando na esquerda e indo at\u00e9 o fim dela na direita. Da mesma forma, Hagrid pede que Ron colha as ab\u00f3boras em outra linha, por\u00e9m agora, Ron come\u00e7a em cima e vai at\u00e9 o fim dela na parte de baixo da planta\u00e7\u00e3o . Hagrid quer saber ao fim da tarefa qual dos dois coletou mais ab\u00f3boras, levando-se em considera\u00e7\u00e3o seu peso. S\u00f3 tome cuidado com o ponto de intersec\u00e7\u00e3o entre as duas linhas que Harry e Ron ir\u00e3o coletar as ab\u00f3boras. Somente um deles fica com a ab\u00f3bora que est\u00e1 l\u00e1, ela \u00e9 do primeiro que l\u00e1 chegar, ou seja, ela pertence \u00e0quele que estiver mais pr\u00f3ximo dela a partir do ponto de in\u00edcio de sua colheita, e se der empate na dist\u00e2ncia, a ab\u00f3bora fica com Ron . Entrada Seu programa receber\u00e1 primeiramente um inteiro \u2018N\u2019 (1 \u2264 \u2018N\u2019 \u2264 100) , representando o tamanho da planta\u00e7\u00e3o de ab\u00f3boras, que \u00e9 um campo de propor\u00e7\u00e3o NxN (N linhas horizontais por N linhas verticais). A seguir ser\u00e3o dadas \u2018N\u2019 linhas, onde em cada uma ser\u00e3o dados \u2018N\u2019 inteiros \u2018P\u2019 (1 <= P <= 100) , que representam o peso de cada ab\u00f3bora no campo. H\u00e1 uma ab\u00f3bora em cada posi\u00e7\u00e3o do campo NxN. Por fim, a \u00faltima linha da entrada cont\u00eam as linhas \u2018X\u2019 e \u2018Y\u2019 (0 <= X,Y < N) que Harry e Ron ir\u00e3o coletar, respectivamente. Cuidado que a linha de Ron na verdade se trata de uma coluna na matriz da planta\u00e7\u00e3o . Sa\u00edda Imprima o peso total da colheita de Harry e a seguir, na linha de baixo, imprima o peso total da colheita de Ron, como nos exemplos abaixo. Entrada Sa\u00edda 4 Harry 19 1 2 3 4 5 6 7 8 1 3 5 7 2 4 6 8 1 2 Ron 21 4 Harry 16 1 2 3 4 5 6 7 8 1 3 5 7 Ron 12 2 4 6 8 2 1 3 Harry 10 1 2 3 4 5 6 7 8 9 1 1 Ron 15","title":"Campo de ab\u00f3boras"},{"location":"Logica/apostila/#faxina","text":"Autor: Gabriel Dahia Voc\u00ea decidiu se livrar dos livros em sua casa. Seu crit\u00e9rio para decidir se um livro vai ser doado ou n\u00e3o \u00e9 a quantidade de consoantes em seu t\u00edtulo. Caso o t\u00edtulo possua mais do que T consoantes, ele ser\u00e1 doado; caso contr\u00e1rio, ele ficar\u00e1 em sua estante. Sua tarefa \u00e9 determinar, dados os t\u00edtulos dos livros, quais ser\u00e3o doados. Entrada A primeira linha da entrada cont\u00e9m dois inteiros N e T, respectivamente o n\u00famero de livros na estante e o n\u00famero m\u00e1ximo de consoantes permitidas no t\u00edtulo de cada livro. As pr\u00f3ximas N linhas cont\u00eam os t\u00edtulos dos livros, que tem no m\u00e1ximo 20 s\u00edmbolos. Estes s\u00e3o apenas letras min\u00fasculas e espa\u00e7os. Sa\u00edda Para cada livro, seu programa deve imprimir 0 caso o livro deva ser doado e 1 caso ele fique na estante, seguidos de um fim de linha. Limites 1 N 105; 1 T 20. Exemplos Entrada Sa\u00edda 3 4 0 0 harry potter senhor dos aneis aleph 1","title":"Faxina"},{"location":"Logica/apostila/#torre-xadrez","text":"Xadrez \u00e9 sem d\u00favida um dos jogos mais famosos e que exige grande capacidade intelectual e estrat\u00e9gica. S\u00e3o v\u00e1rias pe\u00e7as que possuem diferentes tipos de movimentos no tabuleiro. A torre, por exemplo, move-se em uma linha ou em uma coluna, como pode ser observado na figura acima, onde as posi\u00e7\u00f5es marcadas com um X destacam aquelas onde a torre pode ir. Havendo uma pe\u00e7a inimiga a sua frente, esta pe\u00e7a pode ser derrotada pela torre, \u00e9 o caso do pe\u00e3o na figura acima. Por\u00e9m, se houver uma pela aliada a frente, a torre poder\u00e1 se mover at\u00e9 a posi\u00e7\u00e3o imediatamente anterior a pe\u00e7a aliada, \u00e9 o caso do cavalo na figura acima. Sendo assim, voc\u00ea foi escolhido para desenvolver um programa que diz quantas pe\u00e7as inimigas a torre poder\u00e1 possivelmente derrotar, a partir de uma posi\u00e7\u00e3o X, Y no tabuleiro que indica onde a torre est\u00e1. Entrada A entrada ser\u00e1 primeiramente uma grade de tamanho \u20188 x 8\u2019 , representando o tabuleiro de xadrez. Cada uma das \u20188\u2019 linhas do tabuleiro possuir\u00e1 \u20188\u2019 inteiros \u2018Q\u2019 (0 <= Q <= 2) , separados por espa\u00e7o. Portanto, cada posi\u00e7\u00e3o do tabuleiro possuir\u00e1 3 valores poss\u00edveis: 0 \u2013 para indicar que naquela posi\u00e7\u00e3o n\u00e3o tem pe\u00e7a; 1 \u2013 para indicar uma pe\u00e7a aliada; 2 \u2013 para indicar que naquela posi\u00e7\u00e3o h\u00e1 uma pe\u00e7a inimiga. Por fim, ser\u00e3o dados dois inteiros \u2018X\u2019 e \u2018Y\u2019 (0 <= X, Y <= 7) , representando a coordenada inicial da torre, sendo que \u2018X\u2019 representa uma linha e \u2018Y\u2019 representa uma coluna. Al\u00e9m disso, na posi\u00e7\u00e3o X \u2013 Y ter\u00e1 o valor 1 , pois representa a pr\u00f3pria torre. Sa\u00edda Voc\u00ea dever\u00e1 imprimir a quantidade de pe\u00e7as inimigas no caminho da torre. Entrada Sa\u00edda 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 1 1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 2 0 0 0 0 0 0 0 2 0 0 0 0 0 2 2","title":"Torre Xadrez"},{"location":"Logica/apostila/#palindromos","text":"Autor: Ubiratan Neto Luiz e seus colegas est\u00e3o participando de uma s\u00e9rie de jogos na aula de portugu\u00eas em sua escola. Em um dos jogos, \u00e9 dado uma palavra para cada um deles, e eles precisam dizer se ela \u00e9 um pal\u00edndromo ou n\u00e3o. Uma palavra \u00e9 um pal\u00edndromo se ela \u00e9 a mesma palavra lida de tr\u00e1s pra frente. Por exemplo \u201carara\u201d, \u201cosso\u201d, \u201cralar\u201d, etc. Luiz deseja vencer o jogo mesmo que seja trapaceando, e pediu a voc\u00ea que fizesse um programa que respondesse se uma palavra era um pal\u00edndromo ou n\u00e3o. Entrada A primeira linha da entrada possui uma palavra S, contendo apenas letras min\u00fasculas, a palavra dada por Luiz. Sa\u00edda A sa\u00edda deve conter numa \u00fanica linha a palavra \u201cSim\u201d, caso S seja um pal\u00edndromo, e \u201cN\u00e3o\u201d caso \u201cS\u201d n\u00e3o seja um pal\u00edndromo. Limites 1 S 100 Exemplos Entrada Sa\u00edda arara Sim reviver Sim rezar N\u00e3o","title":"Pal\u00edndromos"},{"location":"Logica/apostila/#xeroque-rolmes","text":"Autora: Laila Mota Xeroque Rolmes \u00e9 um primo distante de um detetive renomado e agora quer seguir os passos do seu primo. Em seu primeiro caso, uma testemunha lhe disse que na casa do suspeito existe um cofre com uma pasta com v\u00e1rias provas de seus v\u00e1rios crimes. Ao investigar o lugar, Xeroque Rolmes percebe que do lado do cofre existem 6 peda\u00e7os de papel colados na parede com palavras escritas e, mais que isso, ele descobriu que a quantidade de letras de cada palavra corresponde a um d\u00edgito da senha do cofre. Entrada A entrada \u00e9 composta por 6 linhas, cada linha cont\u00e9m uma palavra encontrada. Sa\u00edda A sa\u00edda \u00e9 composta por uma linha com a senha do cofre. Limites 1\u2264 N \u226410 Exemplos Entrada Sa\u00edda sh embhtots m qgexyzbcu wwhzzw rdfxs 281965 a 113631 a yni xbzaxh lyg q","title":"Xeroque Rolmes"},{"location":"Logica/apostila/#cacando-pokemons","text":"Ash e seus amigos est\u00e3o em uma aventura em busca de novos pok\u00e9mons. Al\u00e9m disso, decidiram ver ao final da busca quem conseguiu mais pok\u00e9mons de um certo tipo. Sua tarefa \u00e9 criar um programa que diga quantos pok\u00e9mons de um certo tipo Ash pegou . Para isso ser\u00e1 dada uma matriz representado a \u00e1rea onde ele est\u00e1. Para cada posi\u00e7\u00e3o (x ; y) da matriz, se o valor for 0 (zero), significa que n\u00e3o tem nenhum pok\u00e9mon naquela posi\u00e7\u00e3o e se o valor for um n\u00famero \u2018T\u2019, diferente de zero, significa que tem um pok\u00e9mon do tipo \u2018T\u2019 naquela posi\u00e7\u00e3o que pode ser pego por Ash. Entrada Na primeira linha ser\u00e3o dados dois inteiros \u2018N\u2019 e \u2018M\u2019 (1 <= N, M <= 100) que diz a quantidade de linhas e colunas da matriz, respectivamente. As pr\u00f3ximas \u2018N\u2019 linhas ter\u00e3o \u2018M\u2019 inteiros \u2018T\u2019 (0 <= T <= 100) em cada, representando o tipo do pok\u00e9mon ou se n\u00e3o h\u00e1 pok\u00e9mon. Por fim, na \u00faltima linha, ser\u00e1 dado um inteiro \u2018P\u2019 (1 <= P <= 100) , representando o tipo do pok\u00e9mon a ser pego por Ash. Sa\u00edda A sa\u00edda consiste em 1 linha contendo a frase \u201c Ash pegou \u2018Q\u2019 pokemon \u201d onde \u2018Q\u2019 deve ser a quantidade de pok\u00e9mons do tipo \u2018P\u2019 pegos por Ash, podendo ser inclusive 0 (zero). Entrada Sa\u00edda 4 4 Ash pegou 3 pokemon 0 1 0 0 2 0 2 0 0 1 0 0 0 0 0 2 2 5 10 Ash pegou 4 pokemon 0 1 0 0 0 3 0 0 0 0 0 2 0 0 0 1 0 0 0 2 0 3 0 0 0 0 2 0 0 0 8 0 1 0 0 3 0 8 0 0 0 0 0 0 0 0 0 0 1 0 1","title":"Ca\u00e7ando Pok\u00e9mons"},{"location":"Logica/apostila/#inventario-caotico","text":"Autor: Gustavo Amaral J\u00f4natas da Silva ap\u00f3s v\u00e1rias horas jogando Dark Souls III percebeu que seu invent\u00e1rio est\u00e1 ca\u00f3tico e n\u00e3o consegue encontrar seus itens. Seu objetivo \u00e9 identificar se um item est\u00e1 no invent\u00e1rio . Entrada A entrada consistir\u00e1 de v\u00e1rias linhas, onde em cada uma teremos uma string representando o nome de determinado item . A entrada com o nome dos itens termina quando for digitado a palavra \u201cfim\u201d . Por fim, ser\u00e1 dado o nome do item que J\u00f4natas quer saber se est\u00e1 no invent\u00e1rio dele. Sa\u00edda Dever\u00e1 ser impresso \u201c item encontrado \u201d caso o item esteja no invent\u00e1rio ou \u201c voce ainda nao descobriu este item \u201d, caso contr\u00e1rio. Entrada Sa\u00edda Storm Ruler voce ainda nao descobriu este item Scholar's Candlestick Broadsword Anri's Straight Sword Sunlight Straight Sword Gael's Greatsword Ringed Knight Paired Greatswords fim Carthus Shotel Frayed Blade Follower Sabre Sellsword Twinblades Harald Curved Greatsword Thrall Axe Butcher Knife fim Sellsword Twinblades item encontrado","title":"Invent\u00e1rio ca\u00f3tico"},{"location":"Logica/apostila/#vamos-jogar-um-jogo","text":"Autor: Danilo de A. Peleteiro E agora?!?! Voc\u00ea foi capturado por Jigsaw em mais um de seus planos contra aqueles que ele julga n\u00e3o valorizar a pr\u00f3pria vida! Para provar que Jigsaw est\u00e1 enganado, voc\u00ea dever\u00e1 resolver um de seus peculiares enigmas e assim garantir a sua liberdade (talvez). Voc\u00ea encontrou uma grava\u00e7\u00e3o que explica passo a passo o que dever\u00e1 ser feito. Em sua sala, haver\u00e1 um papel com uma frase acompanhada de um n\u00famero e uma palavra. O que Jigsaw deseja \u00e9 muito simples: que voc\u00ea diga se a quantidade de ocorr\u00eancias daquela palavra na frase \u00e9 a mesma da escrita no papel . Caso seja, voc\u00ea dever\u00e1 dizer \u201cSIM!\u201d , do contr\u00e1rio, dever\u00e1 falar \u201cN\u00c3O!\u201d . Um detalhe essencial \u00e9 que todas as letras s\u00e3o min\u00fasculas e Jigsaw ignora espa\u00e7os em branco na frase no momento de contar as ocorr\u00eancias da palavra . Tarefa Para sua sorte, voc\u00ea encontrou um computador velho na sala onde est\u00e1, e como \u00e9 conhecido por ser viciado em programar, decidiu desenvolver um programa que o auxiliasse (e, quem sabe, outros futuros prisioneiros) nesse enigma. Portanto, voc\u00ea dever\u00e1 computar a frase solicitada por Jigsaw e posteriormente avaliar se existe a quantidade \u2018Q\u2019 de ocorr\u00eancias de uma dada palavra P. Entrada A primeira linha da entrada consiste de uma string S , que indica a frase a ser avaliada. A segunda linha cont\u00e9m um inteiro \u2018Q\u2019 (1 <= Q <= 30) , informando a quantidade de ocorr\u00eancias, seguido de uma palavra P , que indica o que deve ser detectado na frase S . Sa\u00edda Seu programa dever\u00e1 imprimir a quantidade de ocorr\u00eancias de P em uma linha. Na outra, dever\u00e1 imprimir \u201cSIM!\u201d caso essa quantidade seja igual \u00e0 \u2018Q\u2019 e , caso contr\u00e1rio, dever\u00e1 imprimir \u201cN\u00c3O!\u201d.** Entrada Sa\u00edda eu quero jogar um jogo jogando limpo 3 jog 3 SIM! xhuisyd xnzyxe nxnzzz zx x ify zzuzzzz z zjx 4 zz 6 NAO! eu adoro sao joao e eu amo suas comidas 3 ua 3 SIM!","title":"Vamos jogar um jogo"},{"location":"Logica/apostila/#oxi-vei-cade-a-praia","text":"Autor: H\u00e9rus Concei\u00e7\u00e3o Voc\u00ea est\u00e1 desenvolvendo um programa de navega\u00e7\u00e3o mar\u00edtima e explora\u00e7\u00e3o de ilhas. Voc\u00ea percebeu que o Dev respons\u00e1vel pelo mapa se esqueceu de um detalhe: as praias. Voc\u00ea precisa resolver esse problema criando um programa que transforma em praia aquilo que deveria ser praia. Entrada A entrada ser\u00e1 dada por um mapa de dimens\u00f5es 10x10 . Cada uma das 10 linhas de entrada possuir\u00e1 10 caracteres separados por espa\u00e7os , sendo cada caractere ou \u2018*\u2019 para representar a \u00e1gua ou \u2018t\u2019 para representar a terra . Sa\u00edda O programa deve imprimir o mapa corrigido, transformando em praia \u2018p\u2019 , todo peda\u00e7o de terra \u2018t\u2019 que estiver em contato direto com a \u00e1gua \u2018*\u2019 , verticalmente ou horizontalmente . O que estiver fora do mapa n\u00e3o deve ser considerado como \u00e1gua. Entrada Sa\u00edda * * * * * * * * * * * * * * * * * * * * * * t t t t * * * * * * p p p p * * * * * t t t t t t * * * * p p p t t p * * * * * * * t t t t t * * * * * p t t p p * * * * * * t t t t * * * * * * p t t p * * * * * * t t t * * * * * * * p t p * * * * * * t t t t * * t t t t t t t t t * t t t t t t t t * * t t t t t * * * * * * * * * p t t p * * p p p p t t t t p * t t t t t p p p * * t t t t p * * * * * t * * * * * * * * t p * * * * * * * * p * t t t t t t t t * * p p p p p p p p * * t t t t t t t t * * p t t t t t t p * * t t t t t t t t * * p t t t t t t p * * t t t t t t t t * * p t t t t t t p * * t t t t t t t t * * p t t t t t t p * * t t t t t t t t * * p t t t t t t p * * t t t t t t t t * * p t t t t t t p * * t t t t t t t t * * p p p p p p p p * t * * * * * * * * t p * * * * * * * * p","title":"Oxi v\u00e9i, cad\u00ea a praia?"},{"location":"Logica/apostila/#batalha-de-yavin","text":"A Batalha de Yavin, a maior batalha da Guerra Civil Gal\u00e1ctica, resultou na destrui\u00e7\u00e3o da primeira Estrela da Morte. Os dois lados do confronto foram o Imp\u00e9rio Gal\u00e1ctico e a Alian\u00e7a Rebelde. A Estrela da Morte chegou no sistema escoltada por uma frota constitu\u00edda por diversas naves, dentre elas, as velozes Tie Fighters. O Comando Rebelde estava desacreditado. Com quase todos os pilotos destru\u00eddos, o destino da batalha estava nas m\u00e3os de um jovem piloto, mas este trazia consigo uma nova esperan\u00e7a, afinal, esse jovem era Luke Skywalker. Ele sabia que poderia usar a dobra espacial e o poder da for\u00e7a para se teletransportar com sua nave muito mais r\u00e1pido de um lugar para outro no espa\u00e7o e, assim, conseguir destruir o m\u00e1ximo poss\u00edvel de naves inimigas. Dadas as coordenadas de cada nave inimiga e de cada teleporte de Luke, diga quantas naves ele consegue destruir. Para cada coordenada onde Luke teleporta, ele d\u00e1 apenas um tiro de Pr\u00f3tons que \u00e9 capaz de destruir a primeira nave que esteja em sua frente. No exemplo ao lado, ao teleportar para a posi\u00e7\u00e3o marcada como (2), ele atira e destr\u00f3i somente a nave que est\u00e1 em sua frente. J\u00e1 ao teleportar para a posi\u00e7\u00e3o (3), ele atira mas n\u00e3o acerta nenhuma nave. Entrada A primeira linha da entrada possui um inteiro \u2018N\u2019 (3 \u2264 N \u2264 100) , indicando que a matriz que representa o espa\u00e7o possui dimens\u00f5es NxN , e um inteiro \u2018M\u2019 (1 \u2264 M \u2264 1000) , indicando o n\u00famero de teleportes realizados por Luke. As pr\u00f3ximas \u2018N\u2019 linhas possuem \u2018N\u2019 inteiros em cada uma, cujos valores podem ser 0 (se n\u00e3o existe nave naquele quadrante) ou 1 (se existe uma nave naquele quadrante). Nas pr\u00f3ximas \u2018M\u2019 linhas ser\u00e3o dadas as coordenadas inteiras (L \u2013 linha C - coluna) de cada teleporte de Luke, um por linha. \u00c9 garantido que Luke n\u00e3o aparecer\u00e1 numa coordenada que possui uma nave, j\u00e1 que dois corpos n\u00e3o podem ocupar o mesmo lugar no espa\u00e7o ao mesmo tempo. Os teleportes ocorrer\u00e3o somente dentro do espa\u00e7o dado. Sa\u00edda A sa\u00edda consiste de apenas um inteiro que \u00e9 o n\u00famero de naves destru\u00eddas por Luke. Entrada Sa\u00edda 8 3 2 0 0 0 0 0 0 0 1 1 0 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 7 2 3 5 3 1 4 2 2 0 1 0 1 0 1 1 0 1 0 0 0 0 0 0 1 3 2 3 1","title":"Batalha de Yavin"},{"location":"MongoDB/apostila/","text":"Workshop MongoDB: Do B\u00e1sico ao Avan\u00e7ado Plano de Aula Curva de Aprendizado Fundamentos de NoSQL - Entendendo bancos n\u00e3o relacionais Instala\u00e7\u00e3o e Configura\u00e7\u00e3o - Ambiente de desenvolvimento CRUD B\u00e1sico - Opera\u00e7\u00f5es fundamentais Consultas Avan\u00e7adas - Busca e filtragem de dados \u00cdndices e Performance - Otimiza\u00e7\u00e3o de consultas Modelagem de Dados - Estruturas e relacionamentos Agrega\u00e7\u00f5es - Processamento de dados complexos Opera\u00e7\u00f5es Avan\u00e7adas - Backup, exporta\u00e7\u00e3o e migra\u00e7\u00e3o MongoDB em Ambientes Reais - Docker e cen\u00e1rios de produ\u00e7\u00e3o Dataset para o Workshop Vamos trabalhar com um dataset de uma loja online que inclui: Produtos Clientes Pedidos Avalia\u00e7\u00f5es M\u00f3dulo 1: Fundamentos de Bancos de Dados NoSQL O que s\u00e3o Bancos de Dados NoSQL? NoSQL (Not Only SQL) refere-se a bancos de dados n\u00e3o relacionais projetados para armazenar, distribuir e acessar dados usando modelos diferentes do tradicional modelo relacional. Tipos de Bancos NoSQL Documentos (MongoDB, CouchDB) Chave-valor (Redis, DynamoDB) Colunar (Cassandra, HBase) Grafos (Neo4j, JanusGraph) Compara\u00e7\u00e3o: Relacional vs NoSQL Caracter\u00edstica Relacional (SQL) NoSQL (MongoDB) Estrutura Tabelas, linhas e colunas Cole\u00e7\u00f5es e documentos Schema R\u00edgido Flex\u00edvel/Din\u00e2mico Relacionamentos Joins Documentos aninhados/Refer\u00eancias Escalabilidade Vertical Horizontal Consist\u00eancia ACID Eventual (BASE) Casos de uso Dados estruturados, transa\u00e7\u00f5es Grandes volumes, dados vari\u00e1veis Casos de Uso Reais para MongoDB Aplica\u00e7\u00f5es de Conte\u00fado : CMS, blogs, redes sociais E-commerce : Cat\u00e1logos de produtos, perfis de usu\u00e1rios IoT : Armazenamento de dados de sensores Aplica\u00e7\u00f5es Mobile : Backend para apps Analytics em Tempo Real : Pain\u00e9is, m\u00e9tricas Gerenciamento de Cat\u00e1logos : Produtos com atributos vari\u00e1veis M\u00f3dulo 2: Instala\u00e7\u00e3o e Configura\u00e7\u00e3o do MongoDB Instala\u00e7\u00e3o Convencional Para Ubuntu/Debian sudo apt-get update sudo apt-get install -y mongodb-org Para MacOS (com Homebrew) brew tap mongodb/brew brew install mongodb-community Para Windows Baixe o instalador em mongodb.com/try/download/community Instala\u00e7\u00e3o via Docker Puxar a imagem oficial do MongoDB docker pull mongo Executar o container MongoDB docker run --name mongodb -p 27017:27017 -d mongo Executar com persist\u00eancia de dados docker run --name mongodb -p 27017:27017 -v /caminho/local:/data/db -d mongo Compara\u00e7\u00e3o entre instala\u00e7\u00f5es Aspecto Instala\u00e7\u00e3o Convencional Docker Facilidade M\u00e9dia Alta Configura\u00e7\u00e3o Manual Simplificada Isolamento N\u00e3o Sim Escalabilidade Manual Facilitada Portabilidade Baixa Alta Recursos Usa recursos do host diretamente Containerizado Conex\u00e3o ao MongoDB Conex\u00e3o local mongo ou mongosh Conex\u00e3o com autentica\u00e7\u00e3o mongo -u usuario -p senha --authenticationDatabase admin Conex\u00e3o via string de conex\u00e3o mongo \"mongodb://usuario:senha@localhost:27017/database\" Verifica\u00e7\u00e3o da instala\u00e7\u00e3o // Mostra os bancos existentes show dbs // Usa (ou cria) um banco espec\u00edfico use ecommerce // Mostra cole\u00e7\u00f5es no banco atual show collections M\u00f3dulo 3: CRUD B\u00e1sico Cria\u00e7\u00e3o (Create) // Inserir um \u00fanico documento db.produtos.insertOne({ nome: \"Tablet Pro X\", preco: 799.99, estoque: 25, categoria: \"Eletr\u00f4nicos\" }) // Inserir m\u00faltiplos documentos db.produtos.insertMany([ { nome: \"Mouse sem fio\", preco: 49.99, estoque: 100, categoria: \"Acess\u00f3rios\" }, { nome: \"Teclado mec\u00e2nico\", preco: 129.99, estoque: 50, categoria: \"Acess\u00f3rios\" } ]) Leitura (Read) // Buscar todos os documentos db.produtos.find() // Buscar com formata\u00e7\u00e3o melhorada db.produtos.find().pretty() // Buscar com crit\u00e9rios db.produtos.find({ categoria: \"Eletr\u00f4nicos\" }) // Buscar um documento espec\u00edfico db.produtos.findOne({ nome: \"Tablet Pro X\" }) // Buscar por ID db.produtos.findOne({ _id: ObjectId(\"5f8d0d55b54764429c1e1111\") }) // Limitar resultados db.produtos.find().limit(3) // Pular resultados (pagina\u00e7\u00e3o) db.produtos.find().skip(10).limit(10) Atualiza\u00e7\u00e3o (Update) // Atualizar um documento db.produtos.updateOne( { nome: \"Tablet Pro X\" }, { $set: { preco: 849.99, desconto: true } } ) // Atualizar m\u00faltiplos documentos db.produtos.updateMany( { categoria: \"Acess\u00f3rios\" }, { $inc: { estoque: -5 } } ) // Substituir completamente um documento db.produtos.replaceOne( { nome: \"Mouse sem fio\" }, { nome: \"Mouse Bluetooth Premium\", preco: 79.99, estoque: 30, categoria: \"Acess\u00f3rios\" } ) Remo\u00e7\u00e3o (Delete) // Remover um documento db.produtos.deleteOne({ nome: \"Tablet Pro X\" }) // Remover m\u00faltiplos documentos db.produtos.deleteMany({ estoque: { $lt: 10 } }) // Remover todos os documentos db.produtos.deleteMany({}) // Remover uma cole\u00e7\u00e3o inteira db.produtos.drop() M\u00f3dulo 4: Consultas Avan\u00e7adas Operadores de Consulta Operador Explica\u00e7\u00e3o Exemplo $eq Corresponde a valores iguais ao especificado db.produtos.find({ preco: { $eq: 299.99 } }) $ne Corresponde a valores diferentes do especificado db.produtos.find({ categoria: { $ne: \"Eletr\u00f4nicos\" } }) $gt Maior que o valor especificado db.produtos.find({ preco: { $gt: 1000 } }) $gte Maior ou igual ao valor especificado db.produtos.find({ estoque: { $gte: 20 } }) $lt Menor que o valor especificado db.produtos.find({ preco: { $lt: 500 } }) $lte Menor ou igual ao valor especificado db.produtos.find({ estoque: { $lte: 15 } }) $in Corresponde a qualquer valor do array especificado db.produtos.find({ categoria: { $in: [\"Eletr\u00f4nicos\", \"Acess\u00f3rios\"] } }) $nin N\u00e3o corresponde a nenhum valor do array especificado db.produtos.find({ categoria: { $nin: [\"Vestu\u00e1rio\", \"Alimentos\"] } }) $exists Corresponde a documentos que possuem o campo especificado db.produtos.find({ desconto: { $exists: true } }) $type Corresponde a documentos com o tipo BSON especificado db.produtos.find({ preco: { $type: \"double\" } }) $regex Permite usar express\u00f5es regulares para buscar db.produtos.find({ nome: { $regex: /^Smart/i } }) $text Realiza busca de texto em campos indexados para texto db.produtos.find({ $text: { $search: \"smartphone android\" } }) $all Corresponde a arrays que cont\u00eam todos os elementos especificados db.produtos.find({ tags: { $all: [\"bluetooth\", \"audio\"] } }) $elemMatch Corresponde a documentos que cont\u00eam um array com pelo menos um elemento que satisfaz todos os crit\u00e9rios db.pedidos.find({ itens: { $elemMatch: { quantidade: { $gt: 1 } } } }) $size Corresponde a arrays com o tamanho especificado db.produtos.find({ tags: { $size: 4 } }) Exemplos de Buscas Avan\u00e7adas Busca exata por valor // Busca produtos com pre\u00e7o exatamente 299.99 db.produtos.find({ preco: 299.99 }) Busca por intervalo de valores // Produtos com pre\u00e7o entre 500 e 3000 db.produtos.find({ preco: { $gte: 500, $lte: 3000 } }) Busca com m\u00faltiplos crit\u00e9rios (AND impl\u00edcito) // Produtos da categoria Eletr\u00f4nicos com estoque > 15 db.produtos.find({ categoria: \"Eletr\u00f4nicos\", estoque: { $gt: 15 } }) Operador OR // Produtos que s\u00e3o Eletr\u00f4nicos OU custam menos de 500 db.produtos.find({ $or: [ { categoria: \"Eletr\u00f4nicos\" }, { preco: { $lt: 500 } } ] }) Busca por texto (com e sem acentua\u00e7\u00e3o) // Primeiro, criar um \u00edndice de texto db.produtos.createIndex({ nome: \"text\", descricao: \"text\" }) // Busca por texto ignorando acentua\u00e7\u00e3o db.produtos.find({ $text: { $search: \"camera\", $caseSensitive: false, $diacriticSensitive: false } }) Busca em campos aninhados // Busca produtos com mem\u00f3ria de 16GB db.produtos.find({ \"especificacoes.memoria\": \"16GB\" }) Busca em arrays // Produtos com tag \"bluetooth\" db.produtos.find({ tags: \"bluetooth\" }) // Produtos com TODAS as tags listadas db.produtos.find({ tags: { $all: [\"bluetooth\", \"audio\"] } }) Busca por express\u00e3o regular // Produtos que come\u00e7am com \"Smart\" db.produtos.find({ nome: { $regex: /^Smart/i } }) // Produtos com nome contendo \"Pro\" em qualquer posi\u00e7\u00e3o db.produtos.find({ nome: { $regex: /Pro/i } }) Proje\u00e7\u00e3o de campos // Retornar apenas nome e pre\u00e7o db.produtos.find( { categoria: \"Eletr\u00f4nicos\" }, { nome: 1, preco: 1 } ) // Excluir campos espec\u00edficos db.produtos.find( { categoria: \"Eletr\u00f4nicos\" }, { especificacoes: 0, tags: 0 } ) M\u00f3dulo 5: \u00cdndices e Performance Cria\u00e7\u00e3o de \u00cdndices // \u00cdndice simples db.produtos.createIndex({ nome: 1 }) // 1 ascendente, -1 descendente // \u00cdndice composto db.produtos.createIndex({ categoria: 1, preco: -1 }) // \u00cdndice \u00fanico db.clientes.createIndex({ email: 1 }, { unique: true }) // \u00cdndice de texto db.produtos.createIndex({ nome: \"text\", descricao: \"text\" }) // \u00cdndice esparso (s\u00f3 para documentos que t\u00eam o campo) db.produtos.createIndex( { promocao: 1 }, { sparse: true } ) // \u00cdndice TTL (expira\u00e7\u00e3o ap\u00f3s per\u00edodo) db.sessoes.createIndex( { ultimoAcesso: 1 }, { expireAfterSeconds: 3600 } ) // \u00cdndice geoespacial db.lojas.createIndex({ localizacao: \"2dsphere\" }) Gerenciamento de \u00cdndices // Listar \u00edndices db.produtos.getIndexes() // Remover um \u00edndice db.produtos.dropIndex(\"nome_1\") // Remover todos os \u00edndices (exceto _id) db.produtos.dropIndexes() An\u00e1lise de Consultas // Explica\u00e7\u00e3o da consulta db.produtos.find({ categoria: \"Eletr\u00f4nicos\" }).explain() // Explica\u00e7\u00e3o detalhada db.produtos.find({ categoria: \"Eletr\u00f4nicos\" }).explain(\"executionStats\") // Verificar uso de \u00edndices db.produtos.find({ categoria: \"Eletr\u00f4nicos\", preco: { $gt: 1000 } }).hint({ categoria: 1, preco: -1 }).explain() M\u00f3dulo 6: Modelagem de Dados em MongoDB Abordagens de Modelagem Documentos Aninhados (Embedding) Melhor para rela\u00e7\u00f5es 1:1 e 1:poucos Acesso em uma \u00fanica opera\u00e7\u00e3o Limitado pelo tamanho m\u00e1ximo do documento (16MB) Refer\u00eancias (Linking) Melhor para rela\u00e7\u00f5es 1:muitos e muitos:muitos Evita duplica\u00e7\u00e3o de dados Requer m\u00faltiplas opera\u00e7\u00f5es para acessar dados relacionados Exemplos de Modelagem Modelo com documentos aninhados (Embedding) // Cliente com endere\u00e7os aninhados db.clientes.insertOne({ nome: \"Carlos Mendes\", email: \"carlos@email.com\", telefone: \"(47) 98765-4321\", enderecos: [ { tipo: \"residencial\", rua: \"Rua das Palmeiras\", numero: \"123\", cidade: \"Florian\u00f3polis\", estado: \"SC\" }, { tipo: \"trabalho\", rua: \"Av. Beira Mar\", numero: \"1500\", cidade: \"Florian\u00f3polis\", estado: \"SC\" } ] }) Modelo com refer\u00eancias (Linking) // Cliente referenciando pedidos db.clientes.insertOne({ nome: \"Carlos Mendes\", email: \"carlos@email.com\", pedidos: [ ObjectId(\"7a8b9c0d1e2f3g4h5i6j1112\"), ObjectId(\"7a8b9c0d1e2f3g4h5i6j1113\") ] }) // Pedidos com refer\u00eancia ao cliente db.pedidos.insertOne({ _id: ObjectId(\"7a8b9c0d1e2f3g4h5i6j1112\"), clienteId: ObjectId(\"6a1b2c3d4e5f6a7b8c9d4444\"), data: ISODate(\"2023-11-15T10:30:00Z\"), total: 599.98, produtos: [ { id: ObjectId(\"5f8d0d55b54764429c1e3333\"), qtd: 2 } ] }) Consultas em Dados Relacionados // Consulta em dados aninhados db.clientes.find({ \"enderecos.cidade\": \"Florian\u00f3polis\" }) // Consulta juntando cliente e pedido (manual) const cliente = db.clientes.findOne({ email: \"carlos@email.com\" }) const pedidosCliente = db.pedidos.find({ clienteId: cliente._id }).toArray() // Agrega\u00e7\u00e3o para juntar dados db.pedidos.aggregate([ { $match: { clienteId: ObjectId(\"6a1b2c3d4e5f6a7b8c9d4444\") } }, { $lookup: { from: \"clientes\", localField: \"clienteId\", foreignField: \"_id\", as: \"cliente\" } } ]) M\u00f3dulo 7: Agrega\u00e7\u00f5es Est\u00e1gios de Agrega\u00e7\u00e3o Comuns // $match - Filtra documentos db.produtos.aggregate([ { $match: { preco: { $gt: 1000 } } } ]) // $group - Agrupa documentos db.produtos.aggregate([ { $group: { _id: \"$categoria\", count: { $sum: 1 }, mediaPreco: { $avg: \"$preco\" }, minPreco: { $min: \"$preco\" }, maxPreco: { $max: \"$preco\" } }} ]) // $project - Seleciona campos espec\u00edficos db.produtos.aggregate([ { $match: { categoria: \"Eletr\u00f4nicos\" } }, { $project: { nome: 1, preco: 1, valorComImposto: { $multiply: [\"$preco\", 1.15] } }} ]) // $sort - Ordena documentos db.produtos.aggregate([ { $sort: { preco: -1 } } // ordem descendente ]) // $limit - Limita n\u00famero de resultados db.produtos.aggregate([ { $sort: { preco: -1 } }, { $limit: 5 } ]) // $unwind - \"Explode\" um array em m\u00faltiplos documentos db.produtos.aggregate([ { $unwind: \"$tags\" }, { $group: { _id: \"$tags\", count: { $sum: 1 } }} ]) // $lookup - Join entre cole\u00e7\u00f5es db.pedidos.aggregate([ { $match: { status: \"Entregue\" } }, { $lookup: { from: \"clientes\", localField: \"clienteId\", foreignField: \"_id\", as: \"cliente\" }}, { $unwind: \"$cliente\" } ]) Exemplo de Relat\u00f3rio Completo // Relat\u00f3rio de vendas por categoria db.pedidos.aggregate([ // Apenas pedidos conclu\u00eddos { $match: { status: { $in: [\"Entregue\", \"Em Transporte\"] } } }, // Desdobrar itens de cada pedido { $unwind: \"$itens\" }, // Juntar com produtos para obter categoria { $lookup: { from: \"produtos\", localField: \"itens.produtoId\", foreignField: \"_id\", as: \"produto\" }}, { $unwind: \"$produto\" }, // Calcular valor total por item { $project: { categoria: \"$produto.categoria\", valorItem: { $multiply: [\"$itens.quantidade\", \"$itens.precoUnitario\"] }, data: \"$dataPedido\" }}, // Agrupar por categoria { $group: { _id: \"$categoria\", totalVendas: { $sum: \"$valorItem\" }, quantidadePedidos: { $sum: 1 } }}, // Ordenar do maior para o menor valor { $sort: { totalVendas: -1 } } ]) M\u00f3dulo 8: Opera\u00e7\u00f5es Avan\u00e7adas Exporta\u00e7\u00e3o para CSV # No terminal (n\u00e3o no shell MongoDB)! mongoexport --db=ecommerce --collection=produtos --type=csv --fields=nome,categoria,preco,estoque --out=produtos.csv # Com autentica\u00e7\u00e3o mongoexport --db=ecommerce --collection=produtos --type=csv --fields=nome,categoria,preco,estoque --out=produtos.csv --username usuario --password senha --authenticationDatabase admin Gera\u00e7\u00e3o de PDF com MongoDB e Node.js // Usando Node.js com MongoDB e PDFKit const { MongoClient } = require('mongodb'); const PDFDocument = require('pdfkit'); const fs = require('fs'); async function gerarRelatorioPDF() { const client = await MongoClient.connect('mongodb://localhost:27017'); const db = client.db('ecommerce'); // Obter dados para o relat\u00f3rio const produtos = await db.collection('produtos') .find({ categoria: \"Eletr\u00f4nicos\" }) .sort({ preco: -1 }) .toArray(); // Criar PDF const doc = new PDFDocument(); doc.pipe(fs.createWriteStream('relatorio_produtos.pdf')); // Adicionar t\u00edtulo doc.fontSize(20).text('Relat\u00f3rio de Produtos Eletr\u00f4nicos', { align: 'center' }); // Adicionar dados ao PDF doc.moveDown(); produtos.forEach(produto => { doc.fontSize(14).text(produto.nome); doc.fontSize(12).text(`Pre\u00e7o: R$ ${produto.preco.toFixed(2)}`); doc.fontSize(12).text(`Estoque: ${produto.estoque} unidades`); doc.moveDown(); }); doc.end(); client.close(); } gerarRelatorioPDF(); Backup e Restaura\u00e7\u00e3o # Backup de um banco de dados mongodump --db=ecommerce --out=/caminho/backup/ # Backup de uma cole\u00e7\u00e3o espec\u00edfica mongodump --db=ecommerce --collection=produtos --out=/caminho/backup/ # Backup com compress\u00e3o mongodump --db=ecommerce --out=/caminho/backup/ --gzip # Restaura\u00e7\u00e3o de um banco de dados mongorestore --db=ecommerce /caminho/backup/ecommerce/ # Restaura\u00e7\u00e3o de uma cole\u00e7\u00e3o espec\u00edfica mongorestore --db=ecommerce --collection=produtos /caminho/backup/ecommerce/produtos.bson Movendo Dados Entre Bancos // Via MongoDB Shell // Copiar dados de uma cole\u00e7\u00e3o para outra db.produtos.find().forEach(function(doc) { db.getSiblingDB('ecommerce_backup').produtos.insert(doc); }); // Via mongoexport/mongoimport // No terminal mongoexport --db=ecommerce --collection=produtos --out=produtos.json mongoimport --db=ecommerce_novo --collection=produtos --file=produtos.json Gerenciamento de Erros Comuns Conex\u00e3o Recusada MongoConnectionError: connect ECONNREFUSED 127.0.0.1:27017 ```bash Solu\u00e7\u00e3o - verificar se o servi\u00e7o MongoDB est\u00e1 rodando sudo systemctl status mongod ou no Docker docker ps | grep mongo ``` Viola\u00e7\u00e3o de \u00cdndice \u00danico // Erro ao inserir documento com valor duplicado em campo com \u00edndice \u00fanico javascript // Solu\u00e7\u00e3o - usar upsert db.clientes.updateOne( { email: \"maria.silva@email.com\" }, { $set: { nome: \"Maria Silva\", telefone: \"11987654321\" } }, { upsert: true } ) Consulta com ID Inv\u00e1lido // Erro // Uncaught exception: Error: invalid object id: length javascript // Solu\u00e7\u00e3o - verificar o formato do ObjectId if (ObjectId.isValid(idString)) { db.produtos.findOne({ _id: ObjectId(idString) }); } else { // lidar com ID inv\u00e1lido } M\u00f3dulo 9: MongoDB em Ambientes Reais MongoDB com Docker Compose docker-compose.yml version: '3' services: mongodb: image: mongo:latest container_name: mongodb ports: - \"27017:27017\" environment: MONGO_INITDB_ROOT_USERNAME: admin MONGO_INITDB_ROOT_PASSWORD: senha123 volumes: - mongo_data:/data/db networks: - mongo_network mongo-express: image: mongo-express:latest container_name: mongo-express depends_on: - mongodb ports: - \"8081:8081\" environment: ME_CONFIG_MONGODB_ADMINUSERNAME: admin ME_CONFIG_MONGODB_ADMINPASSWORD: senha123 ME_CONFIG_MONGODB_SERVER: mongodb ME_CONFIG_BASICAUTH_USERNAME: admin ME_CONFIG_BASICAUTH_PASSWORD: senha123 networks: - mongo_network volumes: mongo_data: networks: mongo_network: driver: bridge MongoDB com Replica\u00e7\u00e3o Iniciar um conjunto de r\u00e9plicas com Docker docker run -d --name mongo1 -p 27017:27017 mongo --replSet rs0 docker run -d --name mongo2 -p 27018:27017 mongo --replSet rs0 docker run -d --name mongo3 -p 27019:27017 mongo --replSet rs0 Configurar o conjunto de r\u00e9plicas docker exec -it mongo1 mongosh --eval \"rs.initiate({ _id: 'rs0', members: [ { _id: 0, host: 'localhost:27017' }, { _id: 1, host: 'localhost:27018' }, { _id: 2, host: 'localhost:27019' } ] })\" MongoDB Atlas (Servi\u00e7o na Nuvem) // Conex\u00e3o com MongoDB Atlas const { MongoClient } = require('mongodb'); const uri = \"mongodb+srv://usuario:senha@cluster0.mongodb.net/ecommerce?retryWrites=true&w=majority\"; const client = new MongoClient(uri); async function conectar() { try { await client.connect(); console.log(\"Conectado ao MongoDB Atlas!\"); const db = client.db('ecommerce'); const produtos = await db.collection('produtos').find().limit(5).toArray(); console.log(produtos); } finally { await client.close(); } } conectar().catch(console.error); Seguran\u00e7a e Autentica\u00e7\u00e3o // Criar usu\u00e1rio com permiss\u00f5es espec\u00edficas db.createUser({ user: \"app_user\", pwd: \"senha_segura\", roles: [ { role: \"readWrite\", db: \"ecommerce\" }, { role: \"read\", db: \"analytics\" } ] }) // Iniciar MongoDB com autentica\u00e7\u00e3o // mongod --auth // Conectar com autentica\u00e7\u00e3o mongo -u app_user -p senha_segura --authenticationDatabase admin","title":"Apostila"},{"location":"MongoDB/apostila/#workshop-mongodb-do-basico-ao-avancado","text":"","title":"Workshop MongoDB: Do B\u00e1sico ao Avan\u00e7ado"},{"location":"MongoDB/apostila/#plano-de-aula","text":"","title":"Plano de Aula"},{"location":"MongoDB/apostila/#curva-de-aprendizado","text":"Fundamentos de NoSQL - Entendendo bancos n\u00e3o relacionais Instala\u00e7\u00e3o e Configura\u00e7\u00e3o - Ambiente de desenvolvimento CRUD B\u00e1sico - Opera\u00e7\u00f5es fundamentais Consultas Avan\u00e7adas - Busca e filtragem de dados \u00cdndices e Performance - Otimiza\u00e7\u00e3o de consultas Modelagem de Dados - Estruturas e relacionamentos Agrega\u00e7\u00f5es - Processamento de dados complexos Opera\u00e7\u00f5es Avan\u00e7adas - Backup, exporta\u00e7\u00e3o e migra\u00e7\u00e3o MongoDB em Ambientes Reais - Docker e cen\u00e1rios de produ\u00e7\u00e3o","title":"Curva de Aprendizado"},{"location":"MongoDB/apostila/#dataset-para-o-workshop","text":"Vamos trabalhar com um dataset de uma loja online que inclui: Produtos Clientes Pedidos Avalia\u00e7\u00f5es","title":"Dataset para o Workshop"},{"location":"MongoDB/apostila/#modulo-1-fundamentos-de-bancos-de-dados-nosql","text":"","title":"M\u00f3dulo 1: Fundamentos de Bancos de Dados NoSQL"},{"location":"MongoDB/apostila/#o-que-sao-bancos-de-dados-nosql","text":"NoSQL (Not Only SQL) refere-se a bancos de dados n\u00e3o relacionais projetados para armazenar, distribuir e acessar dados usando modelos diferentes do tradicional modelo relacional.","title":"O que s\u00e3o Bancos de Dados NoSQL?"},{"location":"MongoDB/apostila/#tipos-de-bancos-nosql","text":"Documentos (MongoDB, CouchDB) Chave-valor (Redis, DynamoDB) Colunar (Cassandra, HBase) Grafos (Neo4j, JanusGraph)","title":"Tipos de Bancos NoSQL"},{"location":"MongoDB/apostila/#comparacao-relacional-vs-nosql","text":"Caracter\u00edstica Relacional (SQL) NoSQL (MongoDB) Estrutura Tabelas, linhas e colunas Cole\u00e7\u00f5es e documentos Schema R\u00edgido Flex\u00edvel/Din\u00e2mico Relacionamentos Joins Documentos aninhados/Refer\u00eancias Escalabilidade Vertical Horizontal Consist\u00eancia ACID Eventual (BASE) Casos de uso Dados estruturados, transa\u00e7\u00f5es Grandes volumes, dados vari\u00e1veis","title":"Compara\u00e7\u00e3o: Relacional vs NoSQL"},{"location":"MongoDB/apostila/#casos-de-uso-reais-para-mongodb","text":"Aplica\u00e7\u00f5es de Conte\u00fado : CMS, blogs, redes sociais E-commerce : Cat\u00e1logos de produtos, perfis de usu\u00e1rios IoT : Armazenamento de dados de sensores Aplica\u00e7\u00f5es Mobile : Backend para apps Analytics em Tempo Real : Pain\u00e9is, m\u00e9tricas Gerenciamento de Cat\u00e1logos : Produtos com atributos vari\u00e1veis","title":"Casos de Uso Reais para MongoDB"},{"location":"MongoDB/apostila/#modulo-2-instalacao-e-configuracao-do-mongodb","text":"","title":"M\u00f3dulo 2: Instala\u00e7\u00e3o e Configura\u00e7\u00e3o do MongoDB"},{"location":"MongoDB/apostila/#instalacao-convencional","text":"Para Ubuntu/Debian sudo apt-get update sudo apt-get install -y mongodb-org Para MacOS (com Homebrew) brew tap mongodb/brew brew install mongodb-community Para Windows Baixe o instalador em mongodb.com/try/download/community","title":"Instala\u00e7\u00e3o Convencional"},{"location":"MongoDB/apostila/#instalacao-via-docker","text":"Puxar a imagem oficial do MongoDB docker pull mongo Executar o container MongoDB docker run --name mongodb -p 27017:27017 -d mongo Executar com persist\u00eancia de dados docker run --name mongodb -p 27017:27017 -v /caminho/local:/data/db -d mongo","title":"Instala\u00e7\u00e3o via Docker"},{"location":"MongoDB/apostila/#comparacao-entre-instalacoes","text":"Aspecto Instala\u00e7\u00e3o Convencional Docker Facilidade M\u00e9dia Alta Configura\u00e7\u00e3o Manual Simplificada Isolamento N\u00e3o Sim Escalabilidade Manual Facilitada Portabilidade Baixa Alta Recursos Usa recursos do host diretamente Containerizado","title":"Compara\u00e7\u00e3o entre instala\u00e7\u00f5es"},{"location":"MongoDB/apostila/#conexao-ao-mongodb","text":"Conex\u00e3o local mongo ou mongosh Conex\u00e3o com autentica\u00e7\u00e3o mongo -u usuario -p senha --authenticationDatabase admin Conex\u00e3o via string de conex\u00e3o mongo \"mongodb://usuario:senha@localhost:27017/database\"","title":"Conex\u00e3o ao MongoDB"},{"location":"MongoDB/apostila/#verificacao-da-instalacao","text":"// Mostra os bancos existentes show dbs // Usa (ou cria) um banco espec\u00edfico use ecommerce // Mostra cole\u00e7\u00f5es no banco atual show collections","title":"Verifica\u00e7\u00e3o da instala\u00e7\u00e3o"},{"location":"MongoDB/apostila/#modulo-3-crud-basico","text":"","title":"M\u00f3dulo 3: CRUD B\u00e1sico"},{"location":"MongoDB/apostila/#criacao-create","text":"// Inserir um \u00fanico documento db.produtos.insertOne({ nome: \"Tablet Pro X\", preco: 799.99, estoque: 25, categoria: \"Eletr\u00f4nicos\" }) // Inserir m\u00faltiplos documentos db.produtos.insertMany([ { nome: \"Mouse sem fio\", preco: 49.99, estoque: 100, categoria: \"Acess\u00f3rios\" }, { nome: \"Teclado mec\u00e2nico\", preco: 129.99, estoque: 50, categoria: \"Acess\u00f3rios\" } ])","title":"Cria\u00e7\u00e3o (Create)"},{"location":"MongoDB/apostila/#leitura-read","text":"// Buscar todos os documentos db.produtos.find() // Buscar com formata\u00e7\u00e3o melhorada db.produtos.find().pretty() // Buscar com crit\u00e9rios db.produtos.find({ categoria: \"Eletr\u00f4nicos\" }) // Buscar um documento espec\u00edfico db.produtos.findOne({ nome: \"Tablet Pro X\" }) // Buscar por ID db.produtos.findOne({ _id: ObjectId(\"5f8d0d55b54764429c1e1111\") }) // Limitar resultados db.produtos.find().limit(3) // Pular resultados (pagina\u00e7\u00e3o) db.produtos.find().skip(10).limit(10)","title":"Leitura (Read)"},{"location":"MongoDB/apostila/#atualizacao-update","text":"// Atualizar um documento db.produtos.updateOne( { nome: \"Tablet Pro X\" }, { $set: { preco: 849.99, desconto: true } } ) // Atualizar m\u00faltiplos documentos db.produtos.updateMany( { categoria: \"Acess\u00f3rios\" }, { $inc: { estoque: -5 } } ) // Substituir completamente um documento db.produtos.replaceOne( { nome: \"Mouse sem fio\" }, { nome: \"Mouse Bluetooth Premium\", preco: 79.99, estoque: 30, categoria: \"Acess\u00f3rios\" } )","title":"Atualiza\u00e7\u00e3o (Update)"},{"location":"MongoDB/apostila/#remocao-delete","text":"// Remover um documento db.produtos.deleteOne({ nome: \"Tablet Pro X\" }) // Remover m\u00faltiplos documentos db.produtos.deleteMany({ estoque: { $lt: 10 } }) // Remover todos os documentos db.produtos.deleteMany({}) // Remover uma cole\u00e7\u00e3o inteira db.produtos.drop()","title":"Remo\u00e7\u00e3o (Delete)"},{"location":"MongoDB/apostila/#modulo-4-consultas-avancadas","text":"","title":"M\u00f3dulo 4: Consultas Avan\u00e7adas"},{"location":"MongoDB/apostila/#operadores-de-consulta","text":"Operador Explica\u00e7\u00e3o Exemplo $eq Corresponde a valores iguais ao especificado db.produtos.find({ preco: { $eq: 299.99 } }) $ne Corresponde a valores diferentes do especificado db.produtos.find({ categoria: { $ne: \"Eletr\u00f4nicos\" } }) $gt Maior que o valor especificado db.produtos.find({ preco: { $gt: 1000 } }) $gte Maior ou igual ao valor especificado db.produtos.find({ estoque: { $gte: 20 } }) $lt Menor que o valor especificado db.produtos.find({ preco: { $lt: 500 } }) $lte Menor ou igual ao valor especificado db.produtos.find({ estoque: { $lte: 15 } }) $in Corresponde a qualquer valor do array especificado db.produtos.find({ categoria: { $in: [\"Eletr\u00f4nicos\", \"Acess\u00f3rios\"] } }) $nin N\u00e3o corresponde a nenhum valor do array especificado db.produtos.find({ categoria: { $nin: [\"Vestu\u00e1rio\", \"Alimentos\"] } }) $exists Corresponde a documentos que possuem o campo especificado db.produtos.find({ desconto: { $exists: true } }) $type Corresponde a documentos com o tipo BSON especificado db.produtos.find({ preco: { $type: \"double\" } }) $regex Permite usar express\u00f5es regulares para buscar db.produtos.find({ nome: { $regex: /^Smart/i } }) $text Realiza busca de texto em campos indexados para texto db.produtos.find({ $text: { $search: \"smartphone android\" } }) $all Corresponde a arrays que cont\u00eam todos os elementos especificados db.produtos.find({ tags: { $all: [\"bluetooth\", \"audio\"] } }) $elemMatch Corresponde a documentos que cont\u00eam um array com pelo menos um elemento que satisfaz todos os crit\u00e9rios db.pedidos.find({ itens: { $elemMatch: { quantidade: { $gt: 1 } } } }) $size Corresponde a arrays com o tamanho especificado db.produtos.find({ tags: { $size: 4 } })","title":"Operadores de Consulta"},{"location":"MongoDB/apostila/#exemplos-de-buscas-avancadas","text":"Busca exata por valor // Busca produtos com pre\u00e7o exatamente 299.99 db.produtos.find({ preco: 299.99 }) Busca por intervalo de valores // Produtos com pre\u00e7o entre 500 e 3000 db.produtos.find({ preco: { $gte: 500, $lte: 3000 } }) Busca com m\u00faltiplos crit\u00e9rios (AND impl\u00edcito) // Produtos da categoria Eletr\u00f4nicos com estoque > 15 db.produtos.find({ categoria: \"Eletr\u00f4nicos\", estoque: { $gt: 15 } }) Operador OR // Produtos que s\u00e3o Eletr\u00f4nicos OU custam menos de 500 db.produtos.find({ $or: [ { categoria: \"Eletr\u00f4nicos\" }, { preco: { $lt: 500 } } ] }) Busca por texto (com e sem acentua\u00e7\u00e3o) // Primeiro, criar um \u00edndice de texto db.produtos.createIndex({ nome: \"text\", descricao: \"text\" }) // Busca por texto ignorando acentua\u00e7\u00e3o db.produtos.find({ $text: { $search: \"camera\", $caseSensitive: false, $diacriticSensitive: false } }) Busca em campos aninhados // Busca produtos com mem\u00f3ria de 16GB db.produtos.find({ \"especificacoes.memoria\": \"16GB\" }) Busca em arrays // Produtos com tag \"bluetooth\" db.produtos.find({ tags: \"bluetooth\" }) // Produtos com TODAS as tags listadas db.produtos.find({ tags: { $all: [\"bluetooth\", \"audio\"] } }) Busca por express\u00e3o regular // Produtos que come\u00e7am com \"Smart\" db.produtos.find({ nome: { $regex: /^Smart/i } }) // Produtos com nome contendo \"Pro\" em qualquer posi\u00e7\u00e3o db.produtos.find({ nome: { $regex: /Pro/i } }) Proje\u00e7\u00e3o de campos // Retornar apenas nome e pre\u00e7o db.produtos.find( { categoria: \"Eletr\u00f4nicos\" }, { nome: 1, preco: 1 } ) // Excluir campos espec\u00edficos db.produtos.find( { categoria: \"Eletr\u00f4nicos\" }, { especificacoes: 0, tags: 0 } )","title":"Exemplos de Buscas Avan\u00e7adas"},{"location":"MongoDB/apostila/#modulo-5-indices-e-performance","text":"","title":"M\u00f3dulo 5: \u00cdndices e Performance"},{"location":"MongoDB/apostila/#criacao-de-indices","text":"// \u00cdndice simples db.produtos.createIndex({ nome: 1 }) // 1 ascendente, -1 descendente // \u00cdndice composto db.produtos.createIndex({ categoria: 1, preco: -1 }) // \u00cdndice \u00fanico db.clientes.createIndex({ email: 1 }, { unique: true }) // \u00cdndice de texto db.produtos.createIndex({ nome: \"text\", descricao: \"text\" }) // \u00cdndice esparso (s\u00f3 para documentos que t\u00eam o campo) db.produtos.createIndex( { promocao: 1 }, { sparse: true } ) // \u00cdndice TTL (expira\u00e7\u00e3o ap\u00f3s per\u00edodo) db.sessoes.createIndex( { ultimoAcesso: 1 }, { expireAfterSeconds: 3600 } ) // \u00cdndice geoespacial db.lojas.createIndex({ localizacao: \"2dsphere\" })","title":"Cria\u00e7\u00e3o de \u00cdndices"},{"location":"MongoDB/apostila/#gerenciamento-de-indices","text":"// Listar \u00edndices db.produtos.getIndexes() // Remover um \u00edndice db.produtos.dropIndex(\"nome_1\") // Remover todos os \u00edndices (exceto _id) db.produtos.dropIndexes()","title":"Gerenciamento de \u00cdndices"},{"location":"MongoDB/apostila/#analise-de-consultas","text":"// Explica\u00e7\u00e3o da consulta db.produtos.find({ categoria: \"Eletr\u00f4nicos\" }).explain() // Explica\u00e7\u00e3o detalhada db.produtos.find({ categoria: \"Eletr\u00f4nicos\" }).explain(\"executionStats\") // Verificar uso de \u00edndices db.produtos.find({ categoria: \"Eletr\u00f4nicos\", preco: { $gt: 1000 } }).hint({ categoria: 1, preco: -1 }).explain()","title":"An\u00e1lise de Consultas"},{"location":"MongoDB/apostila/#modulo-6-modelagem-de-dados-em-mongodb","text":"","title":"M\u00f3dulo 6: Modelagem de Dados em MongoDB"},{"location":"MongoDB/apostila/#abordagens-de-modelagem","text":"Documentos Aninhados (Embedding) Melhor para rela\u00e7\u00f5es 1:1 e 1:poucos Acesso em uma \u00fanica opera\u00e7\u00e3o Limitado pelo tamanho m\u00e1ximo do documento (16MB) Refer\u00eancias (Linking) Melhor para rela\u00e7\u00f5es 1:muitos e muitos:muitos Evita duplica\u00e7\u00e3o de dados Requer m\u00faltiplas opera\u00e7\u00f5es para acessar dados relacionados","title":"Abordagens de Modelagem"},{"location":"MongoDB/apostila/#exemplos-de-modelagem","text":"Modelo com documentos aninhados (Embedding) // Cliente com endere\u00e7os aninhados db.clientes.insertOne({ nome: \"Carlos Mendes\", email: \"carlos@email.com\", telefone: \"(47) 98765-4321\", enderecos: [ { tipo: \"residencial\", rua: \"Rua das Palmeiras\", numero: \"123\", cidade: \"Florian\u00f3polis\", estado: \"SC\" }, { tipo: \"trabalho\", rua: \"Av. Beira Mar\", numero: \"1500\", cidade: \"Florian\u00f3polis\", estado: \"SC\" } ] }) Modelo com refer\u00eancias (Linking) // Cliente referenciando pedidos db.clientes.insertOne({ nome: \"Carlos Mendes\", email: \"carlos@email.com\", pedidos: [ ObjectId(\"7a8b9c0d1e2f3g4h5i6j1112\"), ObjectId(\"7a8b9c0d1e2f3g4h5i6j1113\") ] }) // Pedidos com refer\u00eancia ao cliente db.pedidos.insertOne({ _id: ObjectId(\"7a8b9c0d1e2f3g4h5i6j1112\"), clienteId: ObjectId(\"6a1b2c3d4e5f6a7b8c9d4444\"), data: ISODate(\"2023-11-15T10:30:00Z\"), total: 599.98, produtos: [ { id: ObjectId(\"5f8d0d55b54764429c1e3333\"), qtd: 2 } ] })","title":"Exemplos de Modelagem"},{"location":"MongoDB/apostila/#consultas-em-dados-relacionados","text":"// Consulta em dados aninhados db.clientes.find({ \"enderecos.cidade\": \"Florian\u00f3polis\" }) // Consulta juntando cliente e pedido (manual) const cliente = db.clientes.findOne({ email: \"carlos@email.com\" }) const pedidosCliente = db.pedidos.find({ clienteId: cliente._id }).toArray() // Agrega\u00e7\u00e3o para juntar dados db.pedidos.aggregate([ { $match: { clienteId: ObjectId(\"6a1b2c3d4e5f6a7b8c9d4444\") } }, { $lookup: { from: \"clientes\", localField: \"clienteId\", foreignField: \"_id\", as: \"cliente\" } } ])","title":"Consultas em Dados Relacionados"},{"location":"MongoDB/apostila/#modulo-7-agregacoes","text":"","title":"M\u00f3dulo 7: Agrega\u00e7\u00f5es"},{"location":"MongoDB/apostila/#estagios-de-agregacao-comuns","text":"// $match - Filtra documentos db.produtos.aggregate([ { $match: { preco: { $gt: 1000 } } } ]) // $group - Agrupa documentos db.produtos.aggregate([ { $group: { _id: \"$categoria\", count: { $sum: 1 }, mediaPreco: { $avg: \"$preco\" }, minPreco: { $min: \"$preco\" }, maxPreco: { $max: \"$preco\" } }} ]) // $project - Seleciona campos espec\u00edficos db.produtos.aggregate([ { $match: { categoria: \"Eletr\u00f4nicos\" } }, { $project: { nome: 1, preco: 1, valorComImposto: { $multiply: [\"$preco\", 1.15] } }} ]) // $sort - Ordena documentos db.produtos.aggregate([ { $sort: { preco: -1 } } // ordem descendente ]) // $limit - Limita n\u00famero de resultados db.produtos.aggregate([ { $sort: { preco: -1 } }, { $limit: 5 } ]) // $unwind - \"Explode\" um array em m\u00faltiplos documentos db.produtos.aggregate([ { $unwind: \"$tags\" }, { $group: { _id: \"$tags\", count: { $sum: 1 } }} ]) // $lookup - Join entre cole\u00e7\u00f5es db.pedidos.aggregate([ { $match: { status: \"Entregue\" } }, { $lookup: { from: \"clientes\", localField: \"clienteId\", foreignField: \"_id\", as: \"cliente\" }}, { $unwind: \"$cliente\" } ])","title":"Est\u00e1gios de Agrega\u00e7\u00e3o Comuns"},{"location":"MongoDB/apostila/#exemplo-de-relatorio-completo","text":"// Relat\u00f3rio de vendas por categoria db.pedidos.aggregate([ // Apenas pedidos conclu\u00eddos { $match: { status: { $in: [\"Entregue\", \"Em Transporte\"] } } }, // Desdobrar itens de cada pedido { $unwind: \"$itens\" }, // Juntar com produtos para obter categoria { $lookup: { from: \"produtos\", localField: \"itens.produtoId\", foreignField: \"_id\", as: \"produto\" }}, { $unwind: \"$produto\" }, // Calcular valor total por item { $project: { categoria: \"$produto.categoria\", valorItem: { $multiply: [\"$itens.quantidade\", \"$itens.precoUnitario\"] }, data: \"$dataPedido\" }}, // Agrupar por categoria { $group: { _id: \"$categoria\", totalVendas: { $sum: \"$valorItem\" }, quantidadePedidos: { $sum: 1 } }}, // Ordenar do maior para o menor valor { $sort: { totalVendas: -1 } } ])","title":"Exemplo de Relat\u00f3rio Completo"},{"location":"MongoDB/apostila/#modulo-8-operacoes-avancadas","text":"","title":"M\u00f3dulo 8: Opera\u00e7\u00f5es Avan\u00e7adas"},{"location":"MongoDB/apostila/#exportacao-para-csv","text":"# No terminal (n\u00e3o no shell MongoDB)! mongoexport --db=ecommerce --collection=produtos --type=csv --fields=nome,categoria,preco,estoque --out=produtos.csv # Com autentica\u00e7\u00e3o mongoexport --db=ecommerce --collection=produtos --type=csv --fields=nome,categoria,preco,estoque --out=produtos.csv --username usuario --password senha --authenticationDatabase admin","title":"Exporta\u00e7\u00e3o para CSV"},{"location":"MongoDB/apostila/#geracao-de-pdf-com-mongodb-e-nodejs","text":"// Usando Node.js com MongoDB e PDFKit const { MongoClient } = require('mongodb'); const PDFDocument = require('pdfkit'); const fs = require('fs'); async function gerarRelatorioPDF() { const client = await MongoClient.connect('mongodb://localhost:27017'); const db = client.db('ecommerce'); // Obter dados para o relat\u00f3rio const produtos = await db.collection('produtos') .find({ categoria: \"Eletr\u00f4nicos\" }) .sort({ preco: -1 }) .toArray(); // Criar PDF const doc = new PDFDocument(); doc.pipe(fs.createWriteStream('relatorio_produtos.pdf')); // Adicionar t\u00edtulo doc.fontSize(20).text('Relat\u00f3rio de Produtos Eletr\u00f4nicos', { align: 'center' }); // Adicionar dados ao PDF doc.moveDown(); produtos.forEach(produto => { doc.fontSize(14).text(produto.nome); doc.fontSize(12).text(`Pre\u00e7o: R$ ${produto.preco.toFixed(2)}`); doc.fontSize(12).text(`Estoque: ${produto.estoque} unidades`); doc.moveDown(); }); doc.end(); client.close(); } gerarRelatorioPDF();","title":"Gera\u00e7\u00e3o de PDF com MongoDB e Node.js"},{"location":"MongoDB/apostila/#backup-e-restauracao","text":"# Backup de um banco de dados mongodump --db=ecommerce --out=/caminho/backup/ # Backup de uma cole\u00e7\u00e3o espec\u00edfica mongodump --db=ecommerce --collection=produtos --out=/caminho/backup/ # Backup com compress\u00e3o mongodump --db=ecommerce --out=/caminho/backup/ --gzip # Restaura\u00e7\u00e3o de um banco de dados mongorestore --db=ecommerce /caminho/backup/ecommerce/ # Restaura\u00e7\u00e3o de uma cole\u00e7\u00e3o espec\u00edfica mongorestore --db=ecommerce --collection=produtos /caminho/backup/ecommerce/produtos.bson","title":"Backup e Restaura\u00e7\u00e3o"},{"location":"MongoDB/apostila/#movendo-dados-entre-bancos","text":"// Via MongoDB Shell // Copiar dados de uma cole\u00e7\u00e3o para outra db.produtos.find().forEach(function(doc) { db.getSiblingDB('ecommerce_backup').produtos.insert(doc); }); // Via mongoexport/mongoimport // No terminal mongoexport --db=ecommerce --collection=produtos --out=produtos.json mongoimport --db=ecommerce_novo --collection=produtos --file=produtos.json","title":"Movendo Dados Entre Bancos"},{"location":"MongoDB/apostila/#gerenciamento-de-erros-comuns","text":"Conex\u00e3o Recusada MongoConnectionError: connect ECONNREFUSED 127.0.0.1:27017 ```bash","title":"Gerenciamento de Erros Comuns"},{"location":"MongoDB/apostila/#solucao-verificar-se-o-servico-mongodb-esta-rodando","text":"sudo systemctl status mongod","title":"Solu\u00e7\u00e3o - verificar se o servi\u00e7o MongoDB est\u00e1 rodando"},{"location":"MongoDB/apostila/#ou-no-docker","text":"docker ps | grep mongo ``` Viola\u00e7\u00e3o de \u00cdndice \u00danico // Erro ao inserir documento com valor duplicado em campo com \u00edndice \u00fanico javascript // Solu\u00e7\u00e3o - usar upsert db.clientes.updateOne( { email: \"maria.silva@email.com\" }, { $set: { nome: \"Maria Silva\", telefone: \"11987654321\" } }, { upsert: true } ) Consulta com ID Inv\u00e1lido // Erro // Uncaught exception: Error: invalid object id: length javascript // Solu\u00e7\u00e3o - verificar o formato do ObjectId if (ObjectId.isValid(idString)) { db.produtos.findOne({ _id: ObjectId(idString) }); } else { // lidar com ID inv\u00e1lido }","title":"ou no Docker"},{"location":"MongoDB/apostila/#modulo-9-mongodb-em-ambientes-reais","text":"","title":"M\u00f3dulo 9: MongoDB em Ambientes Reais"},{"location":"MongoDB/apostila/#mongodb-com-docker-compose","text":"docker-compose.yml version: '3' services: mongodb: image: mongo:latest container_name: mongodb ports: - \"27017:27017\" environment: MONGO_INITDB_ROOT_USERNAME: admin MONGO_INITDB_ROOT_PASSWORD: senha123 volumes: - mongo_data:/data/db networks: - mongo_network mongo-express: image: mongo-express:latest container_name: mongo-express depends_on: - mongodb ports: - \"8081:8081\" environment: ME_CONFIG_MONGODB_ADMINUSERNAME: admin ME_CONFIG_MONGODB_ADMINPASSWORD: senha123 ME_CONFIG_MONGODB_SERVER: mongodb ME_CONFIG_BASICAUTH_USERNAME: admin ME_CONFIG_BASICAUTH_PASSWORD: senha123 networks: - mongo_network volumes: mongo_data: networks: mongo_network: driver: bridge","title":"MongoDB com Docker Compose"},{"location":"MongoDB/apostila/#mongodb-com-replicacao","text":"Iniciar um conjunto de r\u00e9plicas com Docker docker run -d --name mongo1 -p 27017:27017 mongo --replSet rs0 docker run -d --name mongo2 -p 27018:27017 mongo --replSet rs0 docker run -d --name mongo3 -p 27019:27017 mongo --replSet rs0 Configurar o conjunto de r\u00e9plicas docker exec -it mongo1 mongosh --eval \"rs.initiate({ _id: 'rs0', members: [ { _id: 0, host: 'localhost:27017' }, { _id: 1, host: 'localhost:27018' }, { _id: 2, host: 'localhost:27019' } ] })\"","title":"MongoDB com Replica\u00e7\u00e3o"},{"location":"MongoDB/apostila/#mongodb-atlas-servico-na-nuvem","text":"// Conex\u00e3o com MongoDB Atlas const { MongoClient } = require('mongodb'); const uri = \"mongodb+srv://usuario:senha@cluster0.mongodb.net/ecommerce?retryWrites=true&w=majority\"; const client = new MongoClient(uri); async function conectar() { try { await client.connect(); console.log(\"Conectado ao MongoDB Atlas!\"); const db = client.db('ecommerce'); const produtos = await db.collection('produtos').find().limit(5).toArray(); console.log(produtos); } finally { await client.close(); } } conectar().catch(console.error);","title":"MongoDB Atlas (Servi\u00e7o na Nuvem)"},{"location":"MongoDB/apostila/#seguranca-e-autenticacao","text":"// Criar usu\u00e1rio com permiss\u00f5es espec\u00edficas db.createUser({ user: \"app_user\", pwd: \"senha_segura\", roles: [ { role: \"readWrite\", db: \"ecommerce\" }, { role: \"read\", db: \"analytics\" } ] }) // Iniciar MongoDB com autentica\u00e7\u00e3o // mongod --auth // Conectar com autentica\u00e7\u00e3o mongo -u app_user -p senha_segura --authenticationDatabase admin","title":"Seguran\u00e7a e Autentica\u00e7\u00e3o"},{"location":"MongoDB/respostas/","text":"Projeto MongoDB E-commerce Este documento cont\u00e9m todas as respostas e consultas para as tarefas do projeto de banco de dados e-commerce utilizando MongoDB. Documenta\u00e7\u00e3o Oficial Curso B\u00e1sico de Mongo - Legendado Diferen\u00e7as entre NoSQL e SQL Introdu\u00e7\u00e3o Esta apostila cont\u00e9m uma s\u00e9rie de tarefas pr\u00e1ticas para consolidar os conhecimentos adquiridos durante o Workshop de MongoDB. As tarefas est\u00e3o organizadas em ordem crescente de dificuldade, acompanhando a evolu\u00e7\u00e3o do curso e culminando no desenvolvimento do projeto final de e-commerce. Tarefa 1: Configura\u00e7\u00e3o do Banco de Dados 1. Cria\u00e7\u00e3o do banco de dados // Conectar ao MongoDB mongo // Criar e usar o banco de dados ecommerce_db use ecommerce_db 2. Verifica\u00e7\u00e3o da conex\u00e3o // Usando mongosh test> db.getMongo().getDBNames() // Verifique se \"ecommerce_db\" est\u00e1 na lista // Ou simplesmente test> show dbs Tarefa 2: Cria\u00e7\u00e3o da Estrutura de Dados 1. Cria\u00e7\u00e3o das cole\u00e7\u00f5es use ecommerce_db // Criar cole\u00e7\u00f5es db.createCollection(\"produtos\") db.createCollection(\"categorias\") db.createCollection(\"clientes\") db.createCollection(\"pedidos\") db.createCollection(\"avaliacoes\") // Verificar cole\u00e7\u00f5es criadas show collections 2. Inser\u00e7\u00e3o de categorias db.categorias.insertMany([ { nome: \"Eletr\u00f4nicos\", descricao: \"Dispositivos e gadgets eletr\u00f4nicos\" }, { nome: \"M\u00f3veis\", descricao: \"M\u00f3veis para casa e escrit\u00f3rio\" }, { nome: \"Roupas\", descricao: \"Vestu\u00e1rio e acess\u00f3rios\" }, { nome: \"Livros\", descricao: \"Livros f\u00edsicos e digitais\" }, { nome: \"Esportes\", descricao: \"Artigos esportivos e equipamentos\" } ]) Tarefa 3: Opera\u00e7\u00f5es CRUD B\u00e1sicas 1. Inser\u00e7\u00e3o de produtos db.produtos.insertMany([ { nome: \"Smartphone Galaxy X20\", descricao: \"Smartphone com 128GB, 8GB RAM e c\u00e2mera de 64MP\", preco: 2499.99, estoque: 50, categoria: \"Eletr\u00f4nicos\", tags: [\"smartphone\", \"samsung\", \"android\"] }, { nome: \"Notebook UltraSlim\", descricao: \"Notebook leve com processador i7, 16GB RAM e SSD 512GB\", preco: 4299.99, estoque: 25, categoria: \"Eletr\u00f4nicos\", tags: [\"notebook\", \"computador\", \"trabalho\"] }, { nome: \"Smart TV 55'\", descricao: \"TV LED 4K com recursos smart e HDR\", preco: 3199.99, estoque: 30, categoria: \"Eletr\u00f4nicos\", tags: [\"tv\", \"4k\", \"smarttv\"] }, { nome: \"Sof\u00e1 Retr\u00e1til\", descricao: \"Sof\u00e1 de 3 lugares com assento retr\u00e1til e tecido suede\", preco: 1899.99, estoque: 10, categoria: \"M\u00f3veis\", tags: [\"sofa\", \"sala\", \"conforto\"] }, { nome: \"Mesa de Jantar\", descricao: \"Mesa de jantar 6 lugares em madeira maci\u00e7a\", preco: 1299.99, estoque: 15, categoria: \"M\u00f3veis\", tags: [\"mesa\", \"jantar\", \"madeira\"] }, { nome: \"Guarda-roupa Casal\", descricao: \"Guarda-roupa 6 portas com espelho e gavetas\", preco: 1599.99, estoque: 12, categoria: \"M\u00f3veis\", tags: [\"guarda-roupa\", \"quarto\", \"organizacao\"] }, { nome: \"Camiseta B\u00e1sica\", descricao: \"Camiseta 100% algod\u00e3o em diversas cores\", preco: 49.99, estoque: 200, categoria: \"Roupas\", tags: [\"camiseta\", \"casual\", \"algodao\"] }, { nome: \"Cal\u00e7a Jeans Slim\", descricao: \"Cal\u00e7a jeans com corte moderno e confort\u00e1vel\", preco: 129.99, estoque: 150, categoria: \"Roupas\", tags: [\"calca\", \"jeans\", \"casual\"] }, { nome: \"T\u00eanis Running\", descricao: \"T\u00eanis para corrida com amortecimento e suporte\", preco: 299.99, estoque: 80, categoria: \"Esportes\", tags: [\"tenis\", \"corrida\", \"esporte\"] }, { nome: \"Livro: O Senhor dos An\u00e9is\", descricao: \"Trilogia completa em capa dura\", preco: 149.99, estoque: 30, categoria: \"Livros\", tags: [\"livro\", \"fantasia\", \"tolkien\"] }, { nome: \"Bola de Futebol Oficial\", descricao: \"Bola de futebol profissional tamanho 5\", preco: 89.99, estoque: 60, categoria: \"Esportes\", tags: [\"futebol\", \"bola\", \"esporte\"] }, { nome: \"Kit Halteres\", descricao: \"Kit com 2 halteres de 5kg cada\", preco: 159.99, estoque: 40, categoria: \"Esportes\", tags: [\"musculacao\", \"fitness\", \"treino\"] }, { nome: \"Fone de Ouvido Bluetooth\", descricao: \"Fone sem fio com cancelamento de ru\u00eddo\", preco: 349.99, estoque: 45, categoria: \"Eletr\u00f4nicos\", tags: [\"fone\", \"audio\", \"bluetooth\"] }, { nome: \"Vestido de Festa\", descricao: \"Vestido longo com detalhes em renda\", preco: 259.99, estoque: 0, categoria: \"Roupas\", tags: [\"vestido\", \"festa\", \"elegante\"] }, { nome: \"Livro: Programa\u00e7\u00e3o em MongoDB\", descricao: \"Guia completo de MongoDB para desenvolvedores\", preco: 79.99, estoque: 20, categoria: \"Livros\", tags: [\"livro\", \"programacao\", \"tecnologia\"] } ]) 2. Inser\u00e7\u00e3o de clientes db.clientes.insertMany([ { nome: \"Ana Silva\", email: \"ana.silva@email.com\", telefone: \"(11) 98765-4321\", endereco: { rua: \"Rua das Flores\", numero: 123, bairro: \"Jardim Primavera\", cidade: \"S\u00e3o Paulo\", estado: \"SP\", cep: \"01234-567\" } }, { nome: \"Carlos Oliveira\", email: \"carlos.oliveira@email.com\", telefone: \"(21) 99876-5432\", endereco: { rua: \"Avenida Central\", numero: 456, bairro: \"Centro\", cidade: \"Rio de Janeiro\", estado: \"RJ\", cep: \"20000-123\" } }, { nome: \"Mariana Costa\", email: \"mariana.costa@email.com\", telefone: \"(31) 97654-3210\", endereco: { rua: \"Rua dos Ip\u00eas\", numero: 789, bairro: \"Savassi\", cidade: \"Belo Horizonte\", estado: \"MG\", cep: \"30000-456\" } }, { nome: \"Pedro Santos\", email: \"pedro.santos@email.com\", telefone: \"(41) 98765-1234\", endereco: { rua: \"Alameda dos Pinheiros\", numero: 321, bairro: \"Batel\", cidade: \"Curitiba\", estado: \"PR\", cep: \"80000-789\" } }, { nome: \"Juliana Mendes\", email: \"juliana.mendes@email.com\", telefone: \"(51) 99876-2345\", endereco: { rua: \"Rua da Praia\", numero: 654, bairro: \"Moinhos de Vento\", cidade: \"Porto Alegre\", estado: \"RS\", cep: \"90000-123\" } }, { nome: \"Rafael Lima\", email: \"rafael.lima@email.com\", telefone: \"(81) 98765-5678\", endereco: { rua: \"Avenida Boa Viagem\", numero: 987, bairro: \"Boa Viagem\", cidade: \"Recife\", estado: \"PE\", cep: \"50000-456\" } }, { nome: \"Fernanda Moreira\", email: \"fernanda.moreira@email.com\", telefone: \"(71) 99876-7890\", endereco: { rua: \"Avenida Oce\u00e2nica\", numero: 159, bairro: \"Barra\", cidade: \"Salvador\", estado: \"BA\", cep: \"40000-789\" } }, { nome: \"Lucas Almeida\", email: \"lucas.almeida@email.com\", telefone: \"(61) 98765-8901\", endereco: { rua: \"SQN 305\", numero: 405, apt: \"202\", bairro: \"Asa Norte\", cidade: \"Bras\u00edlia\", estado: \"DF\", cep: \"70000-123\" } } ]) 3. Atualiza\u00e7\u00e3o de estoque // Atualizar estoque do Smartphone db.produtos.updateOne( { nome: \"Smartphone Galaxy X20\" }, { $set: { estoque: 45 } } ) // Atualizar estoque do Notebook db.produtos.updateOne( { nome: \"Notebook UltraSlim\" }, { $set: { estoque: 20 } } ) // Atualizar estoque da Camiseta db.produtos.updateOne( { nome: \"Camiseta B\u00e1sica\" }, { $set: { estoque: 180 } } ) 4. Remo\u00e7\u00e3o de produto com estoque zerado db.produtos.deleteOne({ estoque: 0 }) 5. Listagem de produtos em ordem alfab\u00e9tica db.produtos.find().sort({ nome: 1 }) Tarefa 4: Consultas Avan\u00e7adas 1. Busca por faixa de pre\u00e7o // Produtos entre R$100 e R$500 db.produtos.find({ preco: { $gte: 100, $lte: 500 } }) 2. Busca por palavra no nome usando regex // Produtos que contenham \"Smart\" no nome db.produtos.find({ nome: { $regex: \"Smart\", $options: \"i\" } }) 3. Busca por categoria e ordena\u00e7\u00e3o por pre\u00e7o // Produtos da categoria Eletr\u00f4nicos ordenados por pre\u00e7o decrescente db.produtos.find({ categoria: \"Eletr\u00f4nicos\" }).sort({ preco: -1 }) 4. Busca de clientes por cidade // Clientes que moram em S\u00e3o Paulo db.clientes.find({ \"endereco.cidade\": \"S\u00e3o Paulo\" }) 5. Busca por tags espec\u00edficas // Produtos com a tag \"esporte\" db.produtos.find({ tags: \"esporte\" }) 6. Consulta dos 5 produtos mais caros db.produtos.find().sort({ preco: -1 }).limit(5) Tarefa 5: Relacionamentos e Documentos Complexos 1. Cria\u00e7\u00e3o de pedidos // Fun\u00e7\u00e3o auxiliar para atualizar estoque function atualizarEstoque(produtoId, quantidade) { db.produtos.updateOne( { _id: produtoId }, { $inc: { estoque: -quantidade } } ); } // Criar 10 pedidos // Pedido 1 let pedido1 = { cliente: db.clientes.findOne({ nome: \"Ana Silva\" })._id, data: new Date(\"2024-03-01T10:30:00Z\"), status: \"Entregue\", itens: [ { produto: db.produtos.findOne({ nome: \"Smartphone Galaxy X20\" })._id, nome: \"Smartphone Galaxy X20\", preco: 2499.99, quantidade: 1 }, { produto: db.produtos.findOne({ nome: \"Fone de Ouvido Bluetooth\" })._id, nome: \"Fone de Ouvido Bluetooth\", preco: 349.99, quantidade: 1 } ], valorTotal: 2849.98 }; db.pedidos.insertOne(pedido1); atualizarEstoque(pedido1.itens[0].produto, pedido1.itens[0].quantidade); atualizarEstoque(pedido1.itens[1].produto, pedido1.itens[1].quantidade); // Pedido 2 let pedido2 = { cliente: db.clientes.findOne({ nome: \"Carlos Oliveira\" })._id, data: new Date(\"2024-03-05T14:15:00Z\"), status: \"Entregue\", itens: [ { produto: db.produtos.findOne({ nome: \"Smart TV 55'\" })._id, nome: \"Smart TV 55'\", preco: 3199.99, quantidade: 1 } ], valorTotal: 3199.99 }; db.pedidos.insertOne(pedido2); atualizarEstoque(pedido2.itens[0].produto, pedido2.itens[0].quantidade); // Pedido 3 let pedido3 = { cliente: db.clientes.findOne({ nome: \"Mariana Costa\" })._id, data: new Date(\"2024-03-10T09:45:00Z\"), status: \"Entregue\", itens: [ { produto: db.produtos.findOne({ nome: \"Livro: O Senhor dos An\u00e9is\" })._id, nome: \"Livro: O Senhor dos An\u00e9is\", preco: 149.99, quantidade: 1 }, { produto: db.produtos.findOne({ nome: \"Livro: Programa\u00e7\u00e3o em MongoDB\" })._id, nome: \"Livro: Programa\u00e7\u00e3o em MongoDB\", preco: 79.99, quantidade: 1 } ], valorTotal: 229.98 }; db.pedidos.insertOne(pedido3); atualizarEstoque(pedido3.itens[0].produto, pedido3.itens[0].quantidade); atualizarEstoque(pedido3.itens[1].produto, pedido3.itens[1].quantidade); // Pedido 4 let pedido4 = { cliente: db.clientes.findOne({ nome: \"Pedro Santos\" })._id, data: new Date(\"2024-03-12T16:20:00Z\"), status: \"Em transporte\", itens: [ { produto: db.produtos.findOne({ nome: \"Sof\u00e1 Retr\u00e1til\" })._id, nome: \"Sof\u00e1 Retr\u00e1til\", preco: 1899.99, quantidade: 1 }, { produto: db.produtos.findOne({ nome: \"Mesa de Jantar\" })._id, nome: \"Mesa de Jantar\", preco: 1299.99, quantidade: 1 } ], valorTotal: 3199.98 }; db.pedidos.insertOne(pedido4); atualizarEstoque(pedido4.itens[0].produto, pedido4.itens[0].quantidade); atualizarEstoque(pedido4.itens[1].produto, pedido4.itens[1].quantidade); // Pedido 5 let pedido5 = { cliente: db.clientes.findOne({ nome: \"Juliana Mendes\" })._id, data: new Date(\"2024-03-15T11:30:00Z\"), status: \"Em processamento\", itens: [ { produto: db.produtos.findOne({ nome: \"Camiseta B\u00e1sica\" })._id, nome: \"Camiseta B\u00e1sica\", preco: 49.99, quantidade: 3 }, { produto: db.produtos.findOne({ nome: \"Cal\u00e7a Jeans Slim\" })._id, nome: \"Cal\u00e7a Jeans Slim\", preco: 129.99, quantidade: 2 } ], valorTotal: 409.95 }; db.pedidos.insertOne(pedido5); atualizarEstoque(pedido5.itens[0].produto, pedido5.itens[0].quantidade); atualizarEstoque(pedido5.itens[1].produto, pedido5.itens[1].quantidade); // Pedido 6 let pedido6 = { cliente: db.clientes.findOne({ nome: \"Rafael Lima\" })._id, data: new Date(\"2024-03-18T13:45:00Z\"), status: \"Entregue\", itens: [ { produto: db.produtos.findOne({ nome: \"T\u00eanis Running\" })._id, nome: \"T\u00eanis Running\", preco: 299.99, quantidade: 1 }, { produto: db.produtos.findOne({ nome: \"Bola de Futebol Oficial\" })._id, nome: \"Bola de Futebol Oficial\", preco: 89.99, quantidade: 1 }, { produto: db.produtos.findOne({ nome: \"Kit Halteres\" })._id, nome: \"Kit Halteres\", preco: 159.99, quantidade: 1 } ], valorTotal: 549.97 }; db.pedidos.insertOne(pedido6); atualizarEstoque(pedido6.itens[0].produto, pedido6.itens[0].quantidade); atualizarEstoque(pedido6.itens[1].produto, pedido6.itens[1].quantidade); atualizarEstoque(pedido6.itens[2].produto, pedido6.itens[2].quantidade); // Pedido 7 let pedido7 = { cliente: db.clientes.findOne({ nome: \"Fernanda Moreira\" })._id, data: new Date(\"2024-03-20T10:15:00Z\"), status: \"Entregue\", itens: [ { produto: db.produtos.findOne({ nome: \"Notebook UltraSlim\" })._id, nome: \"Notebook UltraSlim\", preco: 4299.99, quantidade: 1 }, { produto: db.produtos.findOne({ nome: \"Fone de Ouvido Bluetooth\" })._id, nome: \"Fone de Ouvido Bluetooth\", preco: 349.99, quantidade: 1 } ], valorTotal: 4649.98 }; db.pedidos.insertOne(pedido7); atualizarEstoque(pedido7.itens[0].produto, pedido7.itens[0].quantidade); atualizarEstoque(pedido7.itens[1].produto, pedido7.itens[1].quantidade); // Pedido 8 let pedido8 = { cliente: db.clientes.findOne({ nome: \"Lucas Almeida\" })._id, data: new Date(\"2024-03-22T15:30:00Z\"), status: \"Em transporte\", itens: [ { produto: db.produtos.findOne({ nome: \"Guarda-roupa Casal\" })._id, nome: \"Guarda-roupa Casal\", preco: 1599.99, quantidade: 1 } ], valorTotal: 1599.99 }; db.pedidos.insertOne(pedido8); atualizarEstoque(pedido8.itens[0].produto, pedido8.itens[0].quantidade); // Pedido 9 let pedido9 = { cliente: db.clientes.findOne({ nome: \"Ana Silva\" })._id, data: new Date(\"2024-03-25T09:00:00Z\"), status: \"Em processamento\", itens: [ { produto: db.produtos.findOne({ nome: \"Livro: Programa\u00e7\u00e3o em MongoDB\" })._id, nome: \"Livro: Programa\u00e7\u00e3o em MongoDB\", preco: 79.99, quantidade: 1 } ], valorTotal: 79.99 }; db.pedidos.insertOne(pedido9); atualizarEstoque(pedido9.itens[0].produto, pedido9.itens[0].quantidade); // Pedido 10 let pedido10 = { cliente: db.clientes.findOne({ nome: \"Carlos Oliveira\" })._id, data: new Date(\"2024-03-28T14:00:00Z\"), status: \"Aguardando pagamento\", itens: [ { produto: db.produtos.findOne({ nome: \"Camiseta B\u00e1sica\" })._id, nome: \"Camiseta B\u00e1sica\", preco: 49.99, quantidade: 2 }, { produto: db.produtos.findOne({ nome: \"Cal\u00e7a Jeans Slim\" })._id, nome: \"Cal\u00e7a Jeans Slim\", preco: 129.99, quantidade: 1 } ], valorTotal: 229.97 }; db.pedidos.insertOne(pedido10); atualizarEstoque(pedido10.itens[0].produto, pedido10.itens[0].quantidade); atualizarEstoque(pedido10.itens[1].produto, pedido10.itens[1].quantidade); 2. Cria\u00e7\u00e3o de avalia\u00e7\u00f5es // Avalia\u00e7\u00f5es para o pedido 1 db.avaliacoes.insertMany([ { produto: db.produtos.findOne({ nome: \"Smartphone Galaxy X20\" })._id, cliente: db.clientes.findOne({ nome: \"Ana Silva\" })._id, pedido: db.pedidos.findOne({ cliente: db.clientes.findOne({ nome: \"Ana Silva\" })._id, \"itens.nome\": \"Smartphone Galaxy X20\" })._id, nota: 5, comentario: \"Excelente smartphone, c\u00e2mera incr\u00edvel e bateria de longa dura\u00e7\u00e3o.\", data: new Date(\"2024-03-05T14:30:00Z\") }, { produto: db.produtos.findOne({ nome: \"Fone de Ouvido Bluetooth\" })._id, cliente: db.clientes.findOne({ nome: \"Ana Silva\" })._id, pedido: db.pedidos.findOne({ cliente: db.clientes.findOne({ nome: \"Ana Silva\" })._id, \"itens.nome\": \"Fone de Ouvido Bluetooth\" })._id, nota: 4, comentario: \"\u00d3timo fone, mas a bateria poderia durar mais.\", data: new Date(\"2024-03-05T14:35:00Z\") } ]); // Avalia\u00e7\u00f5es para o pedido 2 db.avaliacoes.insertMany([ { produto: db.produtos.findOne({ nome: \"Smart TV 55'\" })._id, cliente: db.clientes.findOne({ nome: \"Carlos Oliveira\" })._id, pedido: db.pedidos.findOne({ cliente: db.clientes.findOne({ nome: \"Carlos Oliveira\" })._id, \"itens.nome\": \"Smart TV 55'\" })._id, nota: 5, comentario: \"TV com imagem perfeita e interface muito intuitiva.\", data: new Date(\"2024-03-10T09:15:00Z\") }, { produto: db.produtos.findOne({ nome: \"Smart TV 55'\" })._id, cliente: db.clientes.findOne({ nome: \"Carlos Oliveira\" })._id, pedido: db.pedidos.findOne({ cliente: db.clientes.findOne({ nome: \"Carlos Oliveira\" })._id, \"itens.nome\": \"Smart TV 55'\" })._id, nota: 5, comentario: \"Chegou antes do prazo previsto e muito bem embalada.\", data: new Date(\"2024-03-10T09:20:00Z\") } ]); // E assim por diante para os demais pedidos... // Continuando com avalia\u00e7\u00f5es para pedidos 3 a 10... 3. Busca de pedidos de cliente espec\u00edfico // Buscar pedidos de Ana Silva com detalhes dos produtos db.pedidos.aggregate([ { $match: { cliente: db.clientes.findOne({ nome: \"Ana Silva\" })._id } }, { $lookup: { from: \"produtos\", localField: \"itens.produto\", foreignField: \"_id\", as: \"detalhes_produtos\" } }, { $project: { _id: 1, data: 1, status: 1, valorTotal: 1, itens: 1, \"detalhes_produtos.nome\": 1, \"detalhes_produtos.descricao\": 1, \"detalhes_produtos.categoria\": 1 } } ]) Tarefa 6: \u00cdndices e Otimiza\u00e7\u00e3o 1. Cria\u00e7\u00e3o de \u00edndices // \u00cdndice para busca de produtos por nome db.produtos.createIndex({ nome: 1 }) // \u00cdndice para busca de produtos por categoria e pre\u00e7o db.produtos.createIndex({ categoria: 1, preco: 1 }) // \u00cdndice \u00fanico para email de clientes db.clientes.createIndex({ email: 1 }, { unique: true }) // \u00cdndice para busca de pedidos por cliente e data db.pedidos.createIndex({ cliente: 1, data: 1 }) 2. An\u00e1lise de desempenho com explain() // Sem \u00edndice vs com \u00edndice db.produtos.find({ nome: \"Smartphone Galaxy X20\" }).explain(\"executionStats\") // Com \u00edndice categoria-pre\u00e7o db.produtos.find({ categoria: \"Eletr\u00f4nicos\", preco: { $gt: 1000 } }).explain(\"executionStats\") 3. Cria\u00e7\u00e3o de \u00edndice de texto // Criar \u00edndice de texto para nome e descri\u00e7\u00e3o de produtos db.produtos.createIndex( { nome: \"text\", descricao: \"text\" }, { weights: { nome: 2, descricao: 1 } } ) // Testar busca por texto db.produtos.find({ $text: { $search: \"smartphone android\" } }) Tarefa 7: Agrega\u00e7\u00f5es B\u00e1sicas (continua\u00e7\u00e3o) 5. Relat\u00f3rio de produtos mais vendidos db.pedidos.aggregate([ { $unwind: \"$itens\" }, { $group: { _id: \"$itens.produto\", totalVendido: { $sum: \"$itens.quantidade\" }, valorTotal: { $sum: { $multiply: [\"$itens.preco\", \"$itens.quantidade\"] } } } }, { $lookup: { from: \"produtos\", localField: \"_id\", foreignField: \"_id\", as: \"produto_info\" } }, { $project: { _id: 0, produto: { $arrayElemAt: [\"$produto_info.nome\", 0] }, categoria: { $arrayElemAt: [\"$produto_info.categoria\", 0] }, totalVendido: 1, valorTotal: 1 } }, { $sort: { totalVendido: -1 } } ]) Tarefa 8: Agrega\u00e7\u00f5es Avan\u00e7adas 1. Distribui\u00e7\u00e3o de notas nas avalia\u00e7\u00f5es por categoria db.avaliacoes.aggregate([ { $lookup: { from: \"produtos\", localField: \"produto\", foreignField: \"_id\", as: \"produto_info\" } }, { $project: { _id: 0, nota: 1, categoria: { $arrayElemAt: [\"$produto_info.categoria\", 0] } } }, { $group: { _id: { categoria: \"$categoria\", nota: \"$nota\" }, quantidade: { $sum: 1 } } }, { $group: { _id: \"$_id.categoria\", distribuicao: { $push: { nota: \"$_id.nota\", quantidade: \"$quantidade\" } }, mediaNotas: { $avg: \"$_id.nota\" } } }, { $project: { _id: 0, categoria: \"$_id\", distribuicao: 1, mediaNotas: { $round: [\"$mediaNotas\", 1] } } }, { $sort: { categoria: 1 } } ]) 2. Relat\u00f3rio de vendas por dia da semana e hora do dia db.pedidos.aggregate([ { $project: { _id: 0, valorTotal: 1, diaSemana: { $dayOfWeek: \"$data\" }, // 1=domingo, 2=segunda, etc. hora: { $hour: \"$data\" } } }, { $group: { _id: { diaSemana: \"$diaSemana\", hora: \"$hora\" }, totalVendas: { $sum: \"$valorTotal\" }, quantidadePedidos: { $sum: 1 } } }, { $project: { _id: 0, diaSemana: { $switch: { branches: [ { case: { $eq: [\"$_id.diaSemana\", 1] }, then: \"Domingo\" }, { case: { $eq: [\"$_id.diaSemana\", 2] }, then: \"Segunda-feira\" }, { case: { $eq: [\"$_id.diaSemana\", 3] }, then: \"Ter\u00e7a-feira\" }, { case: { $eq: [\"$_id.diaSemana\", 4] }, then: \"Quarta-feira\" }, { case: { $eq: [\"$_id.diaSemana\", 5] }, then: \"Quinta-feira\" }, { case: { $eq: [\"$_id.diaSemana\", 6] }, then: \"Sexta-feira\" }, { case: { $eq: [\"$_id.diaSemana\", 7] }, then: \"S\u00e1bado\" } ], default: \"Desconhecido\" } }, hora: \"$_id.hora\", totalVendas: 1, quantidadePedidos: 1 } }, { $sort: { diaSemana: 1, hora: 1 } } ]) 3. Tempo m\u00e9dio entre a cria\u00e7\u00e3o do pedido e sua entrega // Primeiro, vamos adicionar uma data de entrega para os pedidos entregues // (Na pr\u00e1tica, isso seria feito ao atualizar o status do pedido) // Atualizar os pedidos com status \"Entregue\" para adicionar data de entrega db.pedidos.updateMany( { status: \"Entregue\" }, [ { $set: { dataEntrega: { $dateAdd: { startDate: \"$data\", unit: \"day\", amount: { $floor: { $multiply: [{ $random: {} }, 5] } } // 0-4 dias ap\u00f3s o pedido } } } } ] ); // Agora calcular o tempo m\u00e9dio de entrega db.pedidos.aggregate([ { $match: { status: \"Entregue\", dataEntrega: { $exists: true } } }, { $project: { _id: 0, cliente: 1, tempoEntregaHoras: { $divide: [ { $subtract: [\"$dataEntrega\", \"$data\"] }, 3600000 // Converter de milissegundos para horas ] } } }, { $group: { _id: null, tempoMedioHoras: { $avg: \"$tempoEntregaHoras\" }, pedidoMaisRapido: { $min: \"$tempoEntregaHoras\" }, pedidoMaisLento: { $max: \"$tempoEntregaHoras\" } } }, { $project: { _id: 0, tempoMedioDias: { $round: [{ $divide: [\"$tempoMedioHoras\", 24] }, 1] }, tempoMedioHoras: { $round: [\"$tempoMedioHoras\", 1] }, pedidoMaisRapidoHoras: { $round: [\"$pedidoMaisRapido\", 1] }, pedidoMaisLentoHoras: { $round: [\"$pedidoMaisLento\", 1] } } } ]) 4. Produtos frequentemente comprados juntos db.pedidos.aggregate([ // Filtra apenas pedidos com mais de um item { $match: { $expr: { $gt: [{ $size: \"$itens\" }, 1] } } }, // Desmembra os itens do pedido { $unwind: \"$itens\" }, // Agrupa por produto e guarda os outros produtos no mesmo pedido { $group: { _id: \"$itens.produto\", outrosProdutos: { $push: { $filter: { input: \"$itens\", as: \"item\", cond: { $ne: [\"$$item.produto\", \"$itens.produto\"] } } } }, nomeProduto: { $first: \"$itens.nome\" } } }, // Desmembra os arrays de outros produtos { $unwind: \"$outrosProdutos\" }, { $unwind: \"$outrosProdutos\" }, // Agrupa para contar a frequ\u00eancia de cada par { $group: { _id: { produto1: \"$_id\", produto2: \"$outrosProdutos.produto\" }, produto1Nome: { $first: \"$nomeProduto\" }, produto2Nome: { $first: \"$outrosProdutos.nome\" }, frequencia: { $sum: 1 } } }, // Filtra para eliminar duplica\u00e7\u00f5es (A,B e B,A) { $match: { $expr: { $gt: [\"$_id.produto1\", \"$_id.produto2\"] } } }, // Ordena por frequ\u00eancia { $sort: { frequencia: -1 } }, // Projeta o resultado final { $project: { _id: 0, produto1: \"$produto1Nome\", produto2: \"$produto2Nome\", frequencia: 1 } } ]) 5. Dashboard com indicadores de desempenho db.pedidos.aggregate([ // Est\u00e1gio 1: Calcular vendas totais { $facet: { // Total de vendas geral \"vendasTotais\": [ { $group: { _id: null, valor: { $sum: \"$valorTotal\" }, quantidade: { $sum: 1 } } } ], // Vendas por m\u00eas \"vendasPorMes\": [ { $group: { _id: { ano: { $year: \"$data\" }, mes: { $month: \"$data\" } }, valor: { $sum: \"$valorTotal\" }, quantidade: { $sum: 1 } } }, { $sort: { \"_id.ano\": 1, \"_id.mes\": 1 } } ], // Ticket m\u00e9dio \"ticketMedio\": [ { $group: { _id: null, valor: { $avg: \"$valorTotal\" } } } ], // Distribui\u00e7\u00e3o por status \"statusPedidos\": [ { $group: { _id: \"$status\", quantidade: { $sum: 1 }, valorTotal: { $sum: \"$valorTotal\" } } }, { $sort: { quantidade: -1 } } ], // Produtos mais vendidos \"produtosMaisVendidos\": [ { $unwind: \"$itens\" }, { $group: { _id: \"$itens.produto\", nome: { $first: \"$itens.nome\" }, quantidade: { $sum: \"$itens.quantidade\" }, valorTotal: { $sum: { $multiply: [\"$itens.preco\", \"$itens.quantidade\"] } } } }, { $sort: { quantidade: -1 } }, { $limit: 5 } ] } }, // Est\u00e1gio 2: Formatar resultados { $project: { metricas: { vendasTotais: { $arrayElemAt: [\"$vendasTotais.valor\", 0] }, quantidadePedidos: { $arrayElemAt: [\"$vendasTotais.quantidade\", 0] }, ticketMedio: { $round: [{ $arrayElemAt: [\"$ticketMedio.valor\", 0] }, 2] } }, vendasPorMes: \"$vendasPorMes\", statusPedidos: \"$statusPedidos\", produtosMaisVendidos: \"$produtosMaisVendidos\" } } ]) Tarefa 9: Exporta\u00e7\u00e3o e Backup 1. Exporta\u00e7\u00e3o da cole\u00e7\u00e3o de produtos para CSV # Usando o mongoexport mongoexport --db ecommerce_db --collection produtos --type=csv --fields=\"_id,nome,descricao,preco,estoque,categoria,tags\" --out=produtos.csv # Com autentica\u00e7\u00e3o mongoexport --db=ecommerce_db --collection=produtos --type=csv --fields=nome,categoria,preco,estoque --out=produtos.csv --username usuario --password senha --authenticationDatabase admin 2. Script de backup autom\u00e1tico di\u00e1rio backup_script.sh #!/bin/bash # Configura\u00e7\u00f5es MONGO_HOST=\"localhost\" MONGO_PORT=\"27017\" DB_NAME=\"ecommerce_db\" BACKUP_DIR=\"/backups/mongodb\" DATE=$(date +\"%Y%m%d\") BACKUP_NAME=\"backup_${DB_NAME}_${DATE}\" # Criar diret\u00f3rio de backup se n\u00e3o existir mkdir -p $BACKUP_DIR # Criar backup usando mongodump mongodump --host $MONGO_HOST --port $MONGO_PORT --db $DB_NAME --out $BACKUP_DIR/$BACKUP_NAME # Comprimir o backup cd $BACKUP_DIR tar -czf ${BACKUP_NAME}.tar.gz $BACKUP_NAME # Remover diret\u00f3rio descompactado rm -rf $BACKUP_NAME # Manter apenas os \u00faltimos 7 backups ls -tp $BACKUP_DIR/*.tar.gz | grep -v '/$' | tail -n +8 | xargs -I {} rm -- {} echo \"Backup conclu\u00eddo: $BACKUP_DIR/${BACKUP_NAME}.tar.gz\" Configura\u00e7\u00e3o do cron para executar diariamente Adicionar no crontab ( crontab -e ) 0 2 * * * /caminho/para/backup_script.sh >> /var/log/mongodb_backup.log 2>&1 3. Restaura\u00e7\u00e3o de backup em nova inst\u00e2ncia # Descomprimir o backup tar -xzf backup_ecommerce_db_20240330.tar.gz -C /tmp/ # Restaurar usando mongorestore mongorestore --host nova-instancia --port 27017 --db ecommerce_db_novo /tmp/backup_ecommerce_db 4. Script para exportar relat\u00f3rios de vendas em PDF Usando Node.js e PDFKit Primeiro, instalar depend\u00eancias: npm install mongodb pdfkit moment fs report_generator.js const { MongoClient } = require('mongodb'); const PDFDocument = require('pdfkit'); const fs = require('fs'); const moment = require('moment'); // Configura\u00e7\u00f5es MongoDB const uri = 'mongodb://localhost:27017'; const client = new MongoClient(uri); const dbName = 'ecommerce_db'; async function generateSalesReport() { try { await client.connect(); console.log('Conectado ao MongoDB'); const db = client.db(dbName); const pedidosCollection = db.collection('pedidos'); // Data do relat\u00f3rio const today = moment().format('YYYY-MM-DD'); const fileName = `relatorio_vendas_${today}.pdf`; // Criar documento PDF const doc = new PDFDocument(); doc.pipe(fs.createWriteStream(fileName)); // T\u00edtulo e cabe\u00e7alho doc.fontSize(20).text('Relat\u00f3rio de Vendas', { align: 'center' }); doc.fontSize(12).text(`Gerado em: ${moment().format('DD/MM/YYYY HH:mm')}`, { align: 'center' }); doc.moveDown(2); // Resumo de vendas const resumoVendas = await pedidosCollection.aggregate([ { $group: { _id: null, totalVendas: { $sum: '$valorTotal' }, quantidadePedidos: { $sum: 1 }, ticketMedio: { $avg: '$valorTotal' } } } ]).toArray(); if (resumoVendas.length > 0) { const resumo = resumoVendas[0]; doc.fontSize(14).text('Resumo de Vendas'); doc.fontSize(10); doc.text(`Total de Vendas: R$ ${resumo.totalVendas.toFixed(2)}`); doc.text(`Quantidade de Pedidos: ${resumo.quantidadePedidos}`); doc.text(`Ticket M\u00e9dio: R$ ${resumo.ticketMedio.toFixed(2)}`); doc.moveDown(1); } // Vendas por m\u00eas doc.fontSize(14).text('Vendas por M\u00eas'); doc.moveDown(0.5); const vendasPorMes = await pedidosCollection.aggregate([ { $group: { _id: { ano: { $year: '$data' }, mes: { $month: '$data' } }, totalVendas: { $sum: '$valorTotal' }, quantidadePedidos: { $sum: 1 } } }, { $sort: { '_id.ano': 1, '_id.mes': 1 } } ]).toArray(); // Tabela de vendas por m\u00eas doc.fontSize(10); doc.text('Per\u00edodo', 50, doc.y, { width: 100 }); doc.text('Total Vendas', 150, doc.y - 10, { width: 150 }); doc.text('Quantidade', 300, doc.y - 10, { width: 100 }); doc.moveDown(0.5); vendasPorMes.forEach(item => { const periodo = `${item._id.ano}/${item._id.mes.toString().padStart(2, '0')}`; doc.text(periodo, 50, doc.y, { width: 100 }); doc.text(`R$ ${item.totalVendas.toFixed(2)}`, 150, doc.y - 10, { width: 150 }); doc.text(`${item.quantidadePedidos}`, 300, doc.y - 10, { width: 100 }); doc.moveDown(0.5); }); doc.moveDown(1); // Produtos mais vendidos doc.fontSize(14).text('Produtos Mais Vendidos'); doc.moveDown(0.5); const produtosMaisVendidos = await pedidosCollection.aggregate([ { $unwind: '$itens' }, { $group: { _id: '$itens.produto', nome: { $first: '$itens.nome' }, quantidade: { $sum: '$itens.quantidade' }, valorTotal: { $sum: { $multiply: ['$itens.preco', '$itens.quantidade'] } } } }, { $sort: { quantidade: -1 } }, { $limit: 10 } ]).toArray(); // Tabela de produtos mais vendidos doc.fontSize(10); doc.text('Produto', 50, doc.y, { width: 200 }); doc.text('Quantidade', 250, doc.y - 10, { width: 100 }); doc.text('Valor Total', 350, doc.y - 10, { width: 100 }); doc.moveDown(0.5); produtosMaisVendidos.forEach(item => { doc.text(item.nome, 50, doc.y, { width: 200 }); doc.text(`${item.quantidade}`, 250, doc.y - 10, { width: 100 }); doc.text(`R$ ${item.valorTotal.toFixed(2)}`, 350, doc.y - 10, { width: 100 }); doc.moveDown(0.5); }); // Finalizar documento doc.end(); console.log(`Relat\u00f3rio de vendas gerado: ${fileName}`); } finally { await client.close(); } } // Executar gera\u00e7\u00e3o do relat\u00f3rio generateSalesReport().catch(console.error); 5. Sistema de logs para opera\u00e7\u00f5es importantes Implementa\u00e7\u00e3o do sistema de logs usando MongoDB Change Streams logger.js const { MongoClient } = require('mongodb'); const fs = require('fs'); const moment = require('moment'); // Configura\u00e7\u00f5es MongoDB const uri = 'mongodb://localhost:27017'; const client = new MongoClient(uri); const dbName = 'ecommerce_db'; async function startLogger() { try { await client.connect(); console.log('Logger conectado ao MongoDB'); const db = client.db(dbName); // Arquivo de log const logFile = fs.createWriteStream('mongodb_operations.log', { flags: 'a' }); // Monitorar opera\u00e7\u00f5es na cole\u00e7\u00e3o de produtos const produtosChangeStream = db.collection('produtos').watch(); produtosChangeStream.on('change', (change) => { const timestamp = moment().format('YYYY-MM-DD HH:mm:ss'); const operation = change.operationType; let details = ''; if (operation === 'insert') { details = `Novo produto inserido: ${change.fullDocument.nome}`; } else if (operation === 'update') { details = `Produto atualizado: ID ${change.documentKey._id}`; if (change.updateDescription && change.updateDescription.updatedFields) { details += `, Campos: ${Object.keys(change.updateDescription.updatedFields).join(', ')}`; } } else if (operation === 'delete') { details = `Produto removido: ID ${change.documentKey._id}`; } const logMessage = `[${timestamp}] [PRODUTOS] ${operation.toUpperCase()}: ${details}\\n`; logFile.write(logMessage); console.log(logMessage); }); // Monitorar opera\u00e7\u00f5es na cole\u00e7\u00e3o de pedidos const pedidosChangeStream = db.collection('pedidos').watch(); pedidosChangeStream.on('change', (change) => { const timestamp = moment().format('YYYY-MM-DD HH:mm:ss'); const operation = change.operationType; let details = ''; if (operation === 'insert') { details = `Novo pedido registrado: Cliente ID ${change.fullDocument.cliente}, Valor: R$ ${change.fullDocument.valorTotal}`; } else if (operation === 'update') { details = `Pedido atualizado: ID ${change.documentKey._id}`; if (change.updateDescription && change.updateDescription.updatedFields) { if (change.updateDescription.updatedFields.status) { details += `, Novo status: ${change.updateDescription.updatedFields.status}`; } } } else if (operation === 'delete') { details = `Pedido removido: ID ${change.documentKey._id}`; } const logMessage = `[${timestamp}] [PEDIDOS] ${operation.toUpperCase()}: ${details}\\n`; logFile.write(logMessage); console.log(logMessage); }); console.log('Logger iniciado e monitorando opera\u00e7\u00f5es do MongoDB'); // Manter a conex\u00e3o aberta process.on('SIGINT', async () => { console.log('Encerrando logger...'); await client.close(); }); } catch (error) { console.error('Erro ao iniciar logger:', error); } } // Iniciar o logger startLogger().catch(console.error); Tarefa 10: Opera\u00e7\u00f5es com Docker 1. Crie um docker-compose.yml para MongoDB e Mongo Express version: '3' services: mongodb: image: mongo:latest container_name: mongodb ports: - \"27017:27017\" environment: MONGO_INITDB_ROOT_USERNAME: admin MONGO_INITDB_ROOT_PASSWORD: senha123 volumes: - mongo_data:/data/db networks: - mongo_network mongo-express: image: mongo-express:latest container_name: mongo-express depends_on: - mongodb ports: - \"8081:8081\" environment: ME_CONFIG_MONGODB_ADMINUSERNAME: admin ME_CONFIG_MONGODB_ADMINPASSWORD: senha123 ME_CONFIG_MONGODB_SERVER: mongodb ME_CONFIG_BASICAUTH_USERNAME: admin ME_CONFIG_BASICAUTH_PASSWORD: senha123 networks: - mongo_network volumes: mongo_data: networks: mongo_network: driver: bridge 2. Implemente um sistema de replica\u00e7\u00e3o com 3 inst\u00e2ncias MongoDB docker run -d --name mongo1 -p 27017:27017 mongo --replSet rs0 docker run -d --name mongo2 -p 27018:27017 mongo --replSet rs0 docker run -d --name mongo3 -p 27019:27017 mongo --replSet rs0 Configurar o conjunto de r\u00e9plicas docker exec -it mongo1 mongosh --eval \"rs.initiate({ _id: 'rs0', members: [ { _id: 0, host: 'localhost:27017' }, { _id: 1, host: 'localhost:27018' }, { _id: 2, host: 'localhost:27019' } ] })\" Tarefa 11: Prepara\u00e7\u00e3o do Projeto 1. Crie um diagrama de relacionamento entre as cole\u00e7\u00f5es (Diagrama seria inserido aqui, se fosse um formato visual) 2. Configure \u00edndices otimizados para todos os casos de uso (J\u00e1 abordado na Tarefa 6) 3. Implemente valida\u00e7\u00e3o de esquema para todas as cole\u00e7\u00f5es (Exemplo de valida\u00e7\u00e3o de esquema para a cole\u00e7\u00e3o produtos ) db.createCollection(\"produtos\", { validator: { $jsonSchema: { bsonType: \"object\", required: [\"nome\", \"preco\", \"estoque\", \"categoria\"], properties: { nome: { bsonType: \"string\", description: \"deve ser uma string e \u00e9 obrigat\u00f3rio\" }, preco: { bsonType: \"double\", minimum: 0, description: \"deve ser um double maior ou igual a 0 e \u00e9 obrigat\u00f3rio\" }, estoque: { bsonType: \"int\", minimum: 0, description: \"deve ser um inteiro maior ou igual a 0 e \u00e9 obrigat\u00f3rio\" }, categoria: { bsonType: \"string\", description: \"deve ser uma string e \u00e9 obrigat\u00f3rio\" }, descricao: { bsonType: \"string\", description: \"deve ser uma string\" }, tags: { bsonType: \"array\", items: { bsonType: \"string\" }, description: \"deve ser um array de strings\" } } } } }) Tarefa 12: Relat\u00f3rios e Analytics 1. Desenvolva relat\u00f3rios de vendas por per\u00edodo (Exemplo: Vendas di\u00e1rias) db.pedidos.aggregate([ { $group: { _id: { $dateToString: { format: \"%Y-%m-%d\", date: \"$data\" } }, totalVendas: { $sum: \"$valorTotal\" }, quantidadePedidos: { $sum: 1 } } }, { $sort: { _id: 1 } } ]) 2. Crie um sistema de recomenda\u00e7\u00e3o baseado em compras anteriores (Exemplo: Produtos comprados juntos) db.pedidos.aggregate([ { $unwind: \"$itens\" }, { $group: { _id: \"$cliente\", produtosComprados: { $addToSet: \"$itens.produto\" } } }, { $unwind: \"$produtosComprados\" }, { $group: { _id: \"$produtosComprados\", clientes: { $addToSet: \"$_id\" } } }, { $project: { _id: 0, produtoId: \"$_id\", clientesQueCompraram: \"$clientes\", count: { $size: \"$clientes\" } } }, { $sort: { count: -1 } } ]) 3. Implemente dashboards de m\u00e9tricas para administradores (J\u00e1 abordado na Tarefa 8, item 5) 4. Crie um sistema de alertas para produtos com estoque baixo db.produtos.find({ estoque: { $lt: 10 } }) 5. Desenvolva relat\u00f3rios de comportamento de usu\u00e1rios (Exemplo: Clientes que mais gastaram) db.pedidos.aggregate([ { $group: { _id: \"$cliente\", totalGasto: { $sum: \"$valorTotal\" }, totalPedidos: { $sum: 1 } } }, { $lookup: { from: \"clientes\", localField: \"_id\", foreignField: \"_id\", as: \"clienteInfo\" } }, { $unwind: \"$clienteInfo\" }, { $project: { _id: 0, nomeCliente: \"$clienteInfo.nome\", emailCliente: \"$clienteInfo.email\", totalGasto: 1, totalPedidos: 1 } }, { $sort: { totalGasto: -1 } }, { $limit: 5 } ]) Tarefa 13: Entrega e Documenta\u00e7\u00e3o 1. Documente todas as funcionalidades implementadas (Este documento serve como parte da documenta\u00e7\u00e3o) 2. Crie guias de uso para administradores e clientes (Exemplo de guia para administradores: Como verificar o status do MongoDB) sudo systemctl status mongod","title":"Respostas"},{"location":"MongoDB/respostas/#projeto-mongodb-e-commerce","text":"Este documento cont\u00e9m todas as respostas e consultas para as tarefas do projeto de banco de dados e-commerce utilizando MongoDB. Documenta\u00e7\u00e3o Oficial Curso B\u00e1sico de Mongo - Legendado Diferen\u00e7as entre NoSQL e SQL","title":"Projeto MongoDB E-commerce"},{"location":"MongoDB/respostas/#introducao","text":"Esta apostila cont\u00e9m uma s\u00e9rie de tarefas pr\u00e1ticas para consolidar os conhecimentos adquiridos durante o Workshop de MongoDB. As tarefas est\u00e3o organizadas em ordem crescente de dificuldade, acompanhando a evolu\u00e7\u00e3o do curso e culminando no desenvolvimento do projeto final de e-commerce.","title":"Introdu\u00e7\u00e3o"},{"location":"MongoDB/respostas/#tarefa-1-configuracao-do-banco-de-dados","text":"","title":"Tarefa 1: Configura\u00e7\u00e3o do Banco de Dados"},{"location":"MongoDB/respostas/#1-criacao-do-banco-de-dados","text":"// Conectar ao MongoDB mongo // Criar e usar o banco de dados ecommerce_db use ecommerce_db","title":"1. Cria\u00e7\u00e3o do banco de dados"},{"location":"MongoDB/respostas/#2-verificacao-da-conexao","text":"// Usando mongosh test> db.getMongo().getDBNames() // Verifique se \"ecommerce_db\" est\u00e1 na lista // Ou simplesmente test> show dbs","title":"2. Verifica\u00e7\u00e3o da conex\u00e3o"},{"location":"MongoDB/respostas/#tarefa-2-criacao-da-estrutura-de-dados","text":"","title":"Tarefa 2: Cria\u00e7\u00e3o da Estrutura de Dados"},{"location":"MongoDB/respostas/#1-criacao-das-colecoes","text":"use ecommerce_db // Criar cole\u00e7\u00f5es db.createCollection(\"produtos\") db.createCollection(\"categorias\") db.createCollection(\"clientes\") db.createCollection(\"pedidos\") db.createCollection(\"avaliacoes\") // Verificar cole\u00e7\u00f5es criadas show collections","title":"1. Cria\u00e7\u00e3o das cole\u00e7\u00f5es"},{"location":"MongoDB/respostas/#2-insercao-de-categorias","text":"db.categorias.insertMany([ { nome: \"Eletr\u00f4nicos\", descricao: \"Dispositivos e gadgets eletr\u00f4nicos\" }, { nome: \"M\u00f3veis\", descricao: \"M\u00f3veis para casa e escrit\u00f3rio\" }, { nome: \"Roupas\", descricao: \"Vestu\u00e1rio e acess\u00f3rios\" }, { nome: \"Livros\", descricao: \"Livros f\u00edsicos e digitais\" }, { nome: \"Esportes\", descricao: \"Artigos esportivos e equipamentos\" } ])","title":"2. Inser\u00e7\u00e3o de categorias"},{"location":"MongoDB/respostas/#tarefa-3-operacoes-crud-basicas","text":"","title":"Tarefa 3: Opera\u00e7\u00f5es CRUD B\u00e1sicas"},{"location":"MongoDB/respostas/#1-insercao-de-produtos","text":"db.produtos.insertMany([ { nome: \"Smartphone Galaxy X20\", descricao: \"Smartphone com 128GB, 8GB RAM e c\u00e2mera de 64MP\", preco: 2499.99, estoque: 50, categoria: \"Eletr\u00f4nicos\", tags: [\"smartphone\", \"samsung\", \"android\"] }, { nome: \"Notebook UltraSlim\", descricao: \"Notebook leve com processador i7, 16GB RAM e SSD 512GB\", preco: 4299.99, estoque: 25, categoria: \"Eletr\u00f4nicos\", tags: [\"notebook\", \"computador\", \"trabalho\"] }, { nome: \"Smart TV 55'\", descricao: \"TV LED 4K com recursos smart e HDR\", preco: 3199.99, estoque: 30, categoria: \"Eletr\u00f4nicos\", tags: [\"tv\", \"4k\", \"smarttv\"] }, { nome: \"Sof\u00e1 Retr\u00e1til\", descricao: \"Sof\u00e1 de 3 lugares com assento retr\u00e1til e tecido suede\", preco: 1899.99, estoque: 10, categoria: \"M\u00f3veis\", tags: [\"sofa\", \"sala\", \"conforto\"] }, { nome: \"Mesa de Jantar\", descricao: \"Mesa de jantar 6 lugares em madeira maci\u00e7a\", preco: 1299.99, estoque: 15, categoria: \"M\u00f3veis\", tags: [\"mesa\", \"jantar\", \"madeira\"] }, { nome: \"Guarda-roupa Casal\", descricao: \"Guarda-roupa 6 portas com espelho e gavetas\", preco: 1599.99, estoque: 12, categoria: \"M\u00f3veis\", tags: [\"guarda-roupa\", \"quarto\", \"organizacao\"] }, { nome: \"Camiseta B\u00e1sica\", descricao: \"Camiseta 100% algod\u00e3o em diversas cores\", preco: 49.99, estoque: 200, categoria: \"Roupas\", tags: [\"camiseta\", \"casual\", \"algodao\"] }, { nome: \"Cal\u00e7a Jeans Slim\", descricao: \"Cal\u00e7a jeans com corte moderno e confort\u00e1vel\", preco: 129.99, estoque: 150, categoria: \"Roupas\", tags: [\"calca\", \"jeans\", \"casual\"] }, { nome: \"T\u00eanis Running\", descricao: \"T\u00eanis para corrida com amortecimento e suporte\", preco: 299.99, estoque: 80, categoria: \"Esportes\", tags: [\"tenis\", \"corrida\", \"esporte\"] }, { nome: \"Livro: O Senhor dos An\u00e9is\", descricao: \"Trilogia completa em capa dura\", preco: 149.99, estoque: 30, categoria: \"Livros\", tags: [\"livro\", \"fantasia\", \"tolkien\"] }, { nome: \"Bola de Futebol Oficial\", descricao: \"Bola de futebol profissional tamanho 5\", preco: 89.99, estoque: 60, categoria: \"Esportes\", tags: [\"futebol\", \"bola\", \"esporte\"] }, { nome: \"Kit Halteres\", descricao: \"Kit com 2 halteres de 5kg cada\", preco: 159.99, estoque: 40, categoria: \"Esportes\", tags: [\"musculacao\", \"fitness\", \"treino\"] }, { nome: \"Fone de Ouvido Bluetooth\", descricao: \"Fone sem fio com cancelamento de ru\u00eddo\", preco: 349.99, estoque: 45, categoria: \"Eletr\u00f4nicos\", tags: [\"fone\", \"audio\", \"bluetooth\"] }, { nome: \"Vestido de Festa\", descricao: \"Vestido longo com detalhes em renda\", preco: 259.99, estoque: 0, categoria: \"Roupas\", tags: [\"vestido\", \"festa\", \"elegante\"] }, { nome: \"Livro: Programa\u00e7\u00e3o em MongoDB\", descricao: \"Guia completo de MongoDB para desenvolvedores\", preco: 79.99, estoque: 20, categoria: \"Livros\", tags: [\"livro\", \"programacao\", \"tecnologia\"] } ])","title":"1. Inser\u00e7\u00e3o de produtos"},{"location":"MongoDB/respostas/#2-insercao-de-clientes","text":"db.clientes.insertMany([ { nome: \"Ana Silva\", email: \"ana.silva@email.com\", telefone: \"(11) 98765-4321\", endereco: { rua: \"Rua das Flores\", numero: 123, bairro: \"Jardim Primavera\", cidade: \"S\u00e3o Paulo\", estado: \"SP\", cep: \"01234-567\" } }, { nome: \"Carlos Oliveira\", email: \"carlos.oliveira@email.com\", telefone: \"(21) 99876-5432\", endereco: { rua: \"Avenida Central\", numero: 456, bairro: \"Centro\", cidade: \"Rio de Janeiro\", estado: \"RJ\", cep: \"20000-123\" } }, { nome: \"Mariana Costa\", email: \"mariana.costa@email.com\", telefone: \"(31) 97654-3210\", endereco: { rua: \"Rua dos Ip\u00eas\", numero: 789, bairro: \"Savassi\", cidade: \"Belo Horizonte\", estado: \"MG\", cep: \"30000-456\" } }, { nome: \"Pedro Santos\", email: \"pedro.santos@email.com\", telefone: \"(41) 98765-1234\", endereco: { rua: \"Alameda dos Pinheiros\", numero: 321, bairro: \"Batel\", cidade: \"Curitiba\", estado: \"PR\", cep: \"80000-789\" } }, { nome: \"Juliana Mendes\", email: \"juliana.mendes@email.com\", telefone: \"(51) 99876-2345\", endereco: { rua: \"Rua da Praia\", numero: 654, bairro: \"Moinhos de Vento\", cidade: \"Porto Alegre\", estado: \"RS\", cep: \"90000-123\" } }, { nome: \"Rafael Lima\", email: \"rafael.lima@email.com\", telefone: \"(81) 98765-5678\", endereco: { rua: \"Avenida Boa Viagem\", numero: 987, bairro: \"Boa Viagem\", cidade: \"Recife\", estado: \"PE\", cep: \"50000-456\" } }, { nome: \"Fernanda Moreira\", email: \"fernanda.moreira@email.com\", telefone: \"(71) 99876-7890\", endereco: { rua: \"Avenida Oce\u00e2nica\", numero: 159, bairro: \"Barra\", cidade: \"Salvador\", estado: \"BA\", cep: \"40000-789\" } }, { nome: \"Lucas Almeida\", email: \"lucas.almeida@email.com\", telefone: \"(61) 98765-8901\", endereco: { rua: \"SQN 305\", numero: 405, apt: \"202\", bairro: \"Asa Norte\", cidade: \"Bras\u00edlia\", estado: \"DF\", cep: \"70000-123\" } } ])","title":"2. Inser\u00e7\u00e3o de clientes"},{"location":"MongoDB/respostas/#3-atualizacao-de-estoque","text":"// Atualizar estoque do Smartphone db.produtos.updateOne( { nome: \"Smartphone Galaxy X20\" }, { $set: { estoque: 45 } } ) // Atualizar estoque do Notebook db.produtos.updateOne( { nome: \"Notebook UltraSlim\" }, { $set: { estoque: 20 } } ) // Atualizar estoque da Camiseta db.produtos.updateOne( { nome: \"Camiseta B\u00e1sica\" }, { $set: { estoque: 180 } } )","title":"3. Atualiza\u00e7\u00e3o de estoque"},{"location":"MongoDB/respostas/#4-remocao-de-produto-com-estoque-zerado","text":"db.produtos.deleteOne({ estoque: 0 })","title":"4. Remo\u00e7\u00e3o de produto com estoque zerado"},{"location":"MongoDB/respostas/#5-listagem-de-produtos-em-ordem-alfabetica","text":"db.produtos.find().sort({ nome: 1 })","title":"5. Listagem de produtos em ordem alfab\u00e9tica"},{"location":"MongoDB/respostas/#tarefa-4-consultas-avancadas","text":"","title":"Tarefa 4: Consultas Avan\u00e7adas"},{"location":"MongoDB/respostas/#1-busca-por-faixa-de-preco","text":"// Produtos entre R$100 e R$500 db.produtos.find({ preco: { $gte: 100, $lte: 500 } })","title":"1. Busca por faixa de pre\u00e7o"},{"location":"MongoDB/respostas/#2-busca-por-palavra-no-nome-usando-regex","text":"// Produtos que contenham \"Smart\" no nome db.produtos.find({ nome: { $regex: \"Smart\", $options: \"i\" } })","title":"2. Busca por palavra no nome usando regex"},{"location":"MongoDB/respostas/#3-busca-por-categoria-e-ordenacao-por-preco","text":"// Produtos da categoria Eletr\u00f4nicos ordenados por pre\u00e7o decrescente db.produtos.find({ categoria: \"Eletr\u00f4nicos\" }).sort({ preco: -1 })","title":"3. Busca por categoria e ordena\u00e7\u00e3o por pre\u00e7o"},{"location":"MongoDB/respostas/#4-busca-de-clientes-por-cidade","text":"// Clientes que moram em S\u00e3o Paulo db.clientes.find({ \"endereco.cidade\": \"S\u00e3o Paulo\" })","title":"4. Busca de clientes por cidade"},{"location":"MongoDB/respostas/#5-busca-por-tags-especificas","text":"// Produtos com a tag \"esporte\" db.produtos.find({ tags: \"esporte\" })","title":"5. Busca por tags espec\u00edficas"},{"location":"MongoDB/respostas/#6-consulta-dos-5-produtos-mais-caros","text":"db.produtos.find().sort({ preco: -1 }).limit(5)","title":"6. Consulta dos 5 produtos mais caros"},{"location":"MongoDB/respostas/#tarefa-5-relacionamentos-e-documentos-complexos","text":"","title":"Tarefa 5: Relacionamentos e Documentos Complexos"},{"location":"MongoDB/respostas/#1-criacao-de-pedidos","text":"// Fun\u00e7\u00e3o auxiliar para atualizar estoque function atualizarEstoque(produtoId, quantidade) { db.produtos.updateOne( { _id: produtoId }, { $inc: { estoque: -quantidade } } ); } // Criar 10 pedidos // Pedido 1 let pedido1 = { cliente: db.clientes.findOne({ nome: \"Ana Silva\" })._id, data: new Date(\"2024-03-01T10:30:00Z\"), status: \"Entregue\", itens: [ { produto: db.produtos.findOne({ nome: \"Smartphone Galaxy X20\" })._id, nome: \"Smartphone Galaxy X20\", preco: 2499.99, quantidade: 1 }, { produto: db.produtos.findOne({ nome: \"Fone de Ouvido Bluetooth\" })._id, nome: \"Fone de Ouvido Bluetooth\", preco: 349.99, quantidade: 1 } ], valorTotal: 2849.98 }; db.pedidos.insertOne(pedido1); atualizarEstoque(pedido1.itens[0].produto, pedido1.itens[0].quantidade); atualizarEstoque(pedido1.itens[1].produto, pedido1.itens[1].quantidade); // Pedido 2 let pedido2 = { cliente: db.clientes.findOne({ nome: \"Carlos Oliveira\" })._id, data: new Date(\"2024-03-05T14:15:00Z\"), status: \"Entregue\", itens: [ { produto: db.produtos.findOne({ nome: \"Smart TV 55'\" })._id, nome: \"Smart TV 55'\", preco: 3199.99, quantidade: 1 } ], valorTotal: 3199.99 }; db.pedidos.insertOne(pedido2); atualizarEstoque(pedido2.itens[0].produto, pedido2.itens[0].quantidade); // Pedido 3 let pedido3 = { cliente: db.clientes.findOne({ nome: \"Mariana Costa\" })._id, data: new Date(\"2024-03-10T09:45:00Z\"), status: \"Entregue\", itens: [ { produto: db.produtos.findOne({ nome: \"Livro: O Senhor dos An\u00e9is\" })._id, nome: \"Livro: O Senhor dos An\u00e9is\", preco: 149.99, quantidade: 1 }, { produto: db.produtos.findOne({ nome: \"Livro: Programa\u00e7\u00e3o em MongoDB\" })._id, nome: \"Livro: Programa\u00e7\u00e3o em MongoDB\", preco: 79.99, quantidade: 1 } ], valorTotal: 229.98 }; db.pedidos.insertOne(pedido3); atualizarEstoque(pedido3.itens[0].produto, pedido3.itens[0].quantidade); atualizarEstoque(pedido3.itens[1].produto, pedido3.itens[1].quantidade); // Pedido 4 let pedido4 = { cliente: db.clientes.findOne({ nome: \"Pedro Santos\" })._id, data: new Date(\"2024-03-12T16:20:00Z\"), status: \"Em transporte\", itens: [ { produto: db.produtos.findOne({ nome: \"Sof\u00e1 Retr\u00e1til\" })._id, nome: \"Sof\u00e1 Retr\u00e1til\", preco: 1899.99, quantidade: 1 }, { produto: db.produtos.findOne({ nome: \"Mesa de Jantar\" })._id, nome: \"Mesa de Jantar\", preco: 1299.99, quantidade: 1 } ], valorTotal: 3199.98 }; db.pedidos.insertOne(pedido4); atualizarEstoque(pedido4.itens[0].produto, pedido4.itens[0].quantidade); atualizarEstoque(pedido4.itens[1].produto, pedido4.itens[1].quantidade); // Pedido 5 let pedido5 = { cliente: db.clientes.findOne({ nome: \"Juliana Mendes\" })._id, data: new Date(\"2024-03-15T11:30:00Z\"), status: \"Em processamento\", itens: [ { produto: db.produtos.findOne({ nome: \"Camiseta B\u00e1sica\" })._id, nome: \"Camiseta B\u00e1sica\", preco: 49.99, quantidade: 3 }, { produto: db.produtos.findOne({ nome: \"Cal\u00e7a Jeans Slim\" })._id, nome: \"Cal\u00e7a Jeans Slim\", preco: 129.99, quantidade: 2 } ], valorTotal: 409.95 }; db.pedidos.insertOne(pedido5); atualizarEstoque(pedido5.itens[0].produto, pedido5.itens[0].quantidade); atualizarEstoque(pedido5.itens[1].produto, pedido5.itens[1].quantidade); // Pedido 6 let pedido6 = { cliente: db.clientes.findOne({ nome: \"Rafael Lima\" })._id, data: new Date(\"2024-03-18T13:45:00Z\"), status: \"Entregue\", itens: [ { produto: db.produtos.findOne({ nome: \"T\u00eanis Running\" })._id, nome: \"T\u00eanis Running\", preco: 299.99, quantidade: 1 }, { produto: db.produtos.findOne({ nome: \"Bola de Futebol Oficial\" })._id, nome: \"Bola de Futebol Oficial\", preco: 89.99, quantidade: 1 }, { produto: db.produtos.findOne({ nome: \"Kit Halteres\" })._id, nome: \"Kit Halteres\", preco: 159.99, quantidade: 1 } ], valorTotal: 549.97 }; db.pedidos.insertOne(pedido6); atualizarEstoque(pedido6.itens[0].produto, pedido6.itens[0].quantidade); atualizarEstoque(pedido6.itens[1].produto, pedido6.itens[1].quantidade); atualizarEstoque(pedido6.itens[2].produto, pedido6.itens[2].quantidade); // Pedido 7 let pedido7 = { cliente: db.clientes.findOne({ nome: \"Fernanda Moreira\" })._id, data: new Date(\"2024-03-20T10:15:00Z\"), status: \"Entregue\", itens: [ { produto: db.produtos.findOne({ nome: \"Notebook UltraSlim\" })._id, nome: \"Notebook UltraSlim\", preco: 4299.99, quantidade: 1 }, { produto: db.produtos.findOne({ nome: \"Fone de Ouvido Bluetooth\" })._id, nome: \"Fone de Ouvido Bluetooth\", preco: 349.99, quantidade: 1 } ], valorTotal: 4649.98 }; db.pedidos.insertOne(pedido7); atualizarEstoque(pedido7.itens[0].produto, pedido7.itens[0].quantidade); atualizarEstoque(pedido7.itens[1].produto, pedido7.itens[1].quantidade); // Pedido 8 let pedido8 = { cliente: db.clientes.findOne({ nome: \"Lucas Almeida\" })._id, data: new Date(\"2024-03-22T15:30:00Z\"), status: \"Em transporte\", itens: [ { produto: db.produtos.findOne({ nome: \"Guarda-roupa Casal\" })._id, nome: \"Guarda-roupa Casal\", preco: 1599.99, quantidade: 1 } ], valorTotal: 1599.99 }; db.pedidos.insertOne(pedido8); atualizarEstoque(pedido8.itens[0].produto, pedido8.itens[0].quantidade); // Pedido 9 let pedido9 = { cliente: db.clientes.findOne({ nome: \"Ana Silva\" })._id, data: new Date(\"2024-03-25T09:00:00Z\"), status: \"Em processamento\", itens: [ { produto: db.produtos.findOne({ nome: \"Livro: Programa\u00e7\u00e3o em MongoDB\" })._id, nome: \"Livro: Programa\u00e7\u00e3o em MongoDB\", preco: 79.99, quantidade: 1 } ], valorTotal: 79.99 }; db.pedidos.insertOne(pedido9); atualizarEstoque(pedido9.itens[0].produto, pedido9.itens[0].quantidade); // Pedido 10 let pedido10 = { cliente: db.clientes.findOne({ nome: \"Carlos Oliveira\" })._id, data: new Date(\"2024-03-28T14:00:00Z\"), status: \"Aguardando pagamento\", itens: [ { produto: db.produtos.findOne({ nome: \"Camiseta B\u00e1sica\" })._id, nome: \"Camiseta B\u00e1sica\", preco: 49.99, quantidade: 2 }, { produto: db.produtos.findOne({ nome: \"Cal\u00e7a Jeans Slim\" })._id, nome: \"Cal\u00e7a Jeans Slim\", preco: 129.99, quantidade: 1 } ], valorTotal: 229.97 }; db.pedidos.insertOne(pedido10); atualizarEstoque(pedido10.itens[0].produto, pedido10.itens[0].quantidade); atualizarEstoque(pedido10.itens[1].produto, pedido10.itens[1].quantidade);","title":"1. Cria\u00e7\u00e3o de pedidos"},{"location":"MongoDB/respostas/#2-criacao-de-avaliacoes","text":"// Avalia\u00e7\u00f5es para o pedido 1 db.avaliacoes.insertMany([ { produto: db.produtos.findOne({ nome: \"Smartphone Galaxy X20\" })._id, cliente: db.clientes.findOne({ nome: \"Ana Silva\" })._id, pedido: db.pedidos.findOne({ cliente: db.clientes.findOne({ nome: \"Ana Silva\" })._id, \"itens.nome\": \"Smartphone Galaxy X20\" })._id, nota: 5, comentario: \"Excelente smartphone, c\u00e2mera incr\u00edvel e bateria de longa dura\u00e7\u00e3o.\", data: new Date(\"2024-03-05T14:30:00Z\") }, { produto: db.produtos.findOne({ nome: \"Fone de Ouvido Bluetooth\" })._id, cliente: db.clientes.findOne({ nome: \"Ana Silva\" })._id, pedido: db.pedidos.findOne({ cliente: db.clientes.findOne({ nome: \"Ana Silva\" })._id, \"itens.nome\": \"Fone de Ouvido Bluetooth\" })._id, nota: 4, comentario: \"\u00d3timo fone, mas a bateria poderia durar mais.\", data: new Date(\"2024-03-05T14:35:00Z\") } ]); // Avalia\u00e7\u00f5es para o pedido 2 db.avaliacoes.insertMany([ { produto: db.produtos.findOne({ nome: \"Smart TV 55'\" })._id, cliente: db.clientes.findOne({ nome: \"Carlos Oliveira\" })._id, pedido: db.pedidos.findOne({ cliente: db.clientes.findOne({ nome: \"Carlos Oliveira\" })._id, \"itens.nome\": \"Smart TV 55'\" })._id, nota: 5, comentario: \"TV com imagem perfeita e interface muito intuitiva.\", data: new Date(\"2024-03-10T09:15:00Z\") }, { produto: db.produtos.findOne({ nome: \"Smart TV 55'\" })._id, cliente: db.clientes.findOne({ nome: \"Carlos Oliveira\" })._id, pedido: db.pedidos.findOne({ cliente: db.clientes.findOne({ nome: \"Carlos Oliveira\" })._id, \"itens.nome\": \"Smart TV 55'\" })._id, nota: 5, comentario: \"Chegou antes do prazo previsto e muito bem embalada.\", data: new Date(\"2024-03-10T09:20:00Z\") } ]); // E assim por diante para os demais pedidos... // Continuando com avalia\u00e7\u00f5es para pedidos 3 a 10...","title":"2. Cria\u00e7\u00e3o de avalia\u00e7\u00f5es"},{"location":"MongoDB/respostas/#3-busca-de-pedidos-de-cliente-especifico","text":"// Buscar pedidos de Ana Silva com detalhes dos produtos db.pedidos.aggregate([ { $match: { cliente: db.clientes.findOne({ nome: \"Ana Silva\" })._id } }, { $lookup: { from: \"produtos\", localField: \"itens.produto\", foreignField: \"_id\", as: \"detalhes_produtos\" } }, { $project: { _id: 1, data: 1, status: 1, valorTotal: 1, itens: 1, \"detalhes_produtos.nome\": 1, \"detalhes_produtos.descricao\": 1, \"detalhes_produtos.categoria\": 1 } } ])","title":"3. Busca de pedidos de cliente espec\u00edfico"},{"location":"MongoDB/respostas/#tarefa-6-indices-e-otimizacao","text":"","title":"Tarefa 6: \u00cdndices e Otimiza\u00e7\u00e3o"},{"location":"MongoDB/respostas/#1-criacao-de-indices","text":"// \u00cdndice para busca de produtos por nome db.produtos.createIndex({ nome: 1 }) // \u00cdndice para busca de produtos por categoria e pre\u00e7o db.produtos.createIndex({ categoria: 1, preco: 1 }) // \u00cdndice \u00fanico para email de clientes db.clientes.createIndex({ email: 1 }, { unique: true }) // \u00cdndice para busca de pedidos por cliente e data db.pedidos.createIndex({ cliente: 1, data: 1 })","title":"1. Cria\u00e7\u00e3o de \u00edndices"},{"location":"MongoDB/respostas/#2-analise-de-desempenho-com-explain","text":"// Sem \u00edndice vs com \u00edndice db.produtos.find({ nome: \"Smartphone Galaxy X20\" }).explain(\"executionStats\") // Com \u00edndice categoria-pre\u00e7o db.produtos.find({ categoria: \"Eletr\u00f4nicos\", preco: { $gt: 1000 } }).explain(\"executionStats\")","title":"2. An\u00e1lise de desempenho com explain()"},{"location":"MongoDB/respostas/#3-criacao-de-indice-de-texto","text":"// Criar \u00edndice de texto para nome e descri\u00e7\u00e3o de produtos db.produtos.createIndex( { nome: \"text\", descricao: \"text\" }, { weights: { nome: 2, descricao: 1 } } ) // Testar busca por texto db.produtos.find({ $text: { $search: \"smartphone android\" } })","title":"3. Cria\u00e7\u00e3o de \u00edndice de texto"},{"location":"MongoDB/respostas/#tarefa-7-agregacoes-basicas-continuacao","text":"","title":"Tarefa 7: Agrega\u00e7\u00f5es B\u00e1sicas (continua\u00e7\u00e3o)"},{"location":"MongoDB/respostas/#5-relatorio-de-produtos-mais-vendidos","text":"db.pedidos.aggregate([ { $unwind: \"$itens\" }, { $group: { _id: \"$itens.produto\", totalVendido: { $sum: \"$itens.quantidade\" }, valorTotal: { $sum: { $multiply: [\"$itens.preco\", \"$itens.quantidade\"] } } } }, { $lookup: { from: \"produtos\", localField: \"_id\", foreignField: \"_id\", as: \"produto_info\" } }, { $project: { _id: 0, produto: { $arrayElemAt: [\"$produto_info.nome\", 0] }, categoria: { $arrayElemAt: [\"$produto_info.categoria\", 0] }, totalVendido: 1, valorTotal: 1 } }, { $sort: { totalVendido: -1 } } ])","title":"5. Relat\u00f3rio de produtos mais vendidos"},{"location":"MongoDB/respostas/#tarefa-8-agregacoes-avancadas","text":"","title":"Tarefa 8: Agrega\u00e7\u00f5es Avan\u00e7adas"},{"location":"MongoDB/respostas/#1-distribuicao-de-notas-nas-avaliacoes-por-categoria","text":"db.avaliacoes.aggregate([ { $lookup: { from: \"produtos\", localField: \"produto\", foreignField: \"_id\", as: \"produto_info\" } }, { $project: { _id: 0, nota: 1, categoria: { $arrayElemAt: [\"$produto_info.categoria\", 0] } } }, { $group: { _id: { categoria: \"$categoria\", nota: \"$nota\" }, quantidade: { $sum: 1 } } }, { $group: { _id: \"$_id.categoria\", distribuicao: { $push: { nota: \"$_id.nota\", quantidade: \"$quantidade\" } }, mediaNotas: { $avg: \"$_id.nota\" } } }, { $project: { _id: 0, categoria: \"$_id\", distribuicao: 1, mediaNotas: { $round: [\"$mediaNotas\", 1] } } }, { $sort: { categoria: 1 } } ])","title":"1. Distribui\u00e7\u00e3o de notas nas avalia\u00e7\u00f5es por categoria"},{"location":"MongoDB/respostas/#2-relatorio-de-vendas-por-dia-da-semana-e-hora-do-dia","text":"db.pedidos.aggregate([ { $project: { _id: 0, valorTotal: 1, diaSemana: { $dayOfWeek: \"$data\" }, // 1=domingo, 2=segunda, etc. hora: { $hour: \"$data\" } } }, { $group: { _id: { diaSemana: \"$diaSemana\", hora: \"$hora\" }, totalVendas: { $sum: \"$valorTotal\" }, quantidadePedidos: { $sum: 1 } } }, { $project: { _id: 0, diaSemana: { $switch: { branches: [ { case: { $eq: [\"$_id.diaSemana\", 1] }, then: \"Domingo\" }, { case: { $eq: [\"$_id.diaSemana\", 2] }, then: \"Segunda-feira\" }, { case: { $eq: [\"$_id.diaSemana\", 3] }, then: \"Ter\u00e7a-feira\" }, { case: { $eq: [\"$_id.diaSemana\", 4] }, then: \"Quarta-feira\" }, { case: { $eq: [\"$_id.diaSemana\", 5] }, then: \"Quinta-feira\" }, { case: { $eq: [\"$_id.diaSemana\", 6] }, then: \"Sexta-feira\" }, { case: { $eq: [\"$_id.diaSemana\", 7] }, then: \"S\u00e1bado\" } ], default: \"Desconhecido\" } }, hora: \"$_id.hora\", totalVendas: 1, quantidadePedidos: 1 } }, { $sort: { diaSemana: 1, hora: 1 } } ])","title":"2. Relat\u00f3rio de vendas por dia da semana e hora do dia"},{"location":"MongoDB/respostas/#3-tempo-medio-entre-a-criacao-do-pedido-e-sua-entrega","text":"// Primeiro, vamos adicionar uma data de entrega para os pedidos entregues // (Na pr\u00e1tica, isso seria feito ao atualizar o status do pedido) // Atualizar os pedidos com status \"Entregue\" para adicionar data de entrega db.pedidos.updateMany( { status: \"Entregue\" }, [ { $set: { dataEntrega: { $dateAdd: { startDate: \"$data\", unit: \"day\", amount: { $floor: { $multiply: [{ $random: {} }, 5] } } // 0-4 dias ap\u00f3s o pedido } } } } ] ); // Agora calcular o tempo m\u00e9dio de entrega db.pedidos.aggregate([ { $match: { status: \"Entregue\", dataEntrega: { $exists: true } } }, { $project: { _id: 0, cliente: 1, tempoEntregaHoras: { $divide: [ { $subtract: [\"$dataEntrega\", \"$data\"] }, 3600000 // Converter de milissegundos para horas ] } } }, { $group: { _id: null, tempoMedioHoras: { $avg: \"$tempoEntregaHoras\" }, pedidoMaisRapido: { $min: \"$tempoEntregaHoras\" }, pedidoMaisLento: { $max: \"$tempoEntregaHoras\" } } }, { $project: { _id: 0, tempoMedioDias: { $round: [{ $divide: [\"$tempoMedioHoras\", 24] }, 1] }, tempoMedioHoras: { $round: [\"$tempoMedioHoras\", 1] }, pedidoMaisRapidoHoras: { $round: [\"$pedidoMaisRapido\", 1] }, pedidoMaisLentoHoras: { $round: [\"$pedidoMaisLento\", 1] } } } ])","title":"3. Tempo m\u00e9dio entre a cria\u00e7\u00e3o do pedido e sua entrega"},{"location":"MongoDB/respostas/#4-produtos-frequentemente-comprados-juntos","text":"db.pedidos.aggregate([ // Filtra apenas pedidos com mais de um item { $match: { $expr: { $gt: [{ $size: \"$itens\" }, 1] } } }, // Desmembra os itens do pedido { $unwind: \"$itens\" }, // Agrupa por produto e guarda os outros produtos no mesmo pedido { $group: { _id: \"$itens.produto\", outrosProdutos: { $push: { $filter: { input: \"$itens\", as: \"item\", cond: { $ne: [\"$$item.produto\", \"$itens.produto\"] } } } }, nomeProduto: { $first: \"$itens.nome\" } } }, // Desmembra os arrays de outros produtos { $unwind: \"$outrosProdutos\" }, { $unwind: \"$outrosProdutos\" }, // Agrupa para contar a frequ\u00eancia de cada par { $group: { _id: { produto1: \"$_id\", produto2: \"$outrosProdutos.produto\" }, produto1Nome: { $first: \"$nomeProduto\" }, produto2Nome: { $first: \"$outrosProdutos.nome\" }, frequencia: { $sum: 1 } } }, // Filtra para eliminar duplica\u00e7\u00f5es (A,B e B,A) { $match: { $expr: { $gt: [\"$_id.produto1\", \"$_id.produto2\"] } } }, // Ordena por frequ\u00eancia { $sort: { frequencia: -1 } }, // Projeta o resultado final { $project: { _id: 0, produto1: \"$produto1Nome\", produto2: \"$produto2Nome\", frequencia: 1 } } ])","title":"4. Produtos frequentemente comprados juntos"},{"location":"MongoDB/respostas/#5-dashboard-com-indicadores-de-desempenho","text":"db.pedidos.aggregate([ // Est\u00e1gio 1: Calcular vendas totais { $facet: { // Total de vendas geral \"vendasTotais\": [ { $group: { _id: null, valor: { $sum: \"$valorTotal\" }, quantidade: { $sum: 1 } } } ], // Vendas por m\u00eas \"vendasPorMes\": [ { $group: { _id: { ano: { $year: \"$data\" }, mes: { $month: \"$data\" } }, valor: { $sum: \"$valorTotal\" }, quantidade: { $sum: 1 } } }, { $sort: { \"_id.ano\": 1, \"_id.mes\": 1 } } ], // Ticket m\u00e9dio \"ticketMedio\": [ { $group: { _id: null, valor: { $avg: \"$valorTotal\" } } } ], // Distribui\u00e7\u00e3o por status \"statusPedidos\": [ { $group: { _id: \"$status\", quantidade: { $sum: 1 }, valorTotal: { $sum: \"$valorTotal\" } } }, { $sort: { quantidade: -1 } } ], // Produtos mais vendidos \"produtosMaisVendidos\": [ { $unwind: \"$itens\" }, { $group: { _id: \"$itens.produto\", nome: { $first: \"$itens.nome\" }, quantidade: { $sum: \"$itens.quantidade\" }, valorTotal: { $sum: { $multiply: [\"$itens.preco\", \"$itens.quantidade\"] } } } }, { $sort: { quantidade: -1 } }, { $limit: 5 } ] } }, // Est\u00e1gio 2: Formatar resultados { $project: { metricas: { vendasTotais: { $arrayElemAt: [\"$vendasTotais.valor\", 0] }, quantidadePedidos: { $arrayElemAt: [\"$vendasTotais.quantidade\", 0] }, ticketMedio: { $round: [{ $arrayElemAt: [\"$ticketMedio.valor\", 0] }, 2] } }, vendasPorMes: \"$vendasPorMes\", statusPedidos: \"$statusPedidos\", produtosMaisVendidos: \"$produtosMaisVendidos\" } } ])","title":"5. Dashboard com indicadores de desempenho"},{"location":"MongoDB/respostas/#tarefa-9-exportacao-e-backup","text":"","title":"Tarefa 9: Exporta\u00e7\u00e3o e Backup"},{"location":"MongoDB/respostas/#1-exportacao-da-colecao-de-produtos-para-csv","text":"# Usando o mongoexport mongoexport --db ecommerce_db --collection produtos --type=csv --fields=\"_id,nome,descricao,preco,estoque,categoria,tags\" --out=produtos.csv # Com autentica\u00e7\u00e3o mongoexport --db=ecommerce_db --collection=produtos --type=csv --fields=nome,categoria,preco,estoque --out=produtos.csv --username usuario --password senha --authenticationDatabase admin","title":"1. Exporta\u00e7\u00e3o da cole\u00e7\u00e3o de produtos para CSV"},{"location":"MongoDB/respostas/#2-script-de-backup-automatico-diario","text":"backup_script.sh #!/bin/bash # Configura\u00e7\u00f5es MONGO_HOST=\"localhost\" MONGO_PORT=\"27017\" DB_NAME=\"ecommerce_db\" BACKUP_DIR=\"/backups/mongodb\" DATE=$(date +\"%Y%m%d\") BACKUP_NAME=\"backup_${DB_NAME}_${DATE}\" # Criar diret\u00f3rio de backup se n\u00e3o existir mkdir -p $BACKUP_DIR # Criar backup usando mongodump mongodump --host $MONGO_HOST --port $MONGO_PORT --db $DB_NAME --out $BACKUP_DIR/$BACKUP_NAME # Comprimir o backup cd $BACKUP_DIR tar -czf ${BACKUP_NAME}.tar.gz $BACKUP_NAME # Remover diret\u00f3rio descompactado rm -rf $BACKUP_NAME # Manter apenas os \u00faltimos 7 backups ls -tp $BACKUP_DIR/*.tar.gz | grep -v '/$' | tail -n +8 | xargs -I {} rm -- {} echo \"Backup conclu\u00eddo: $BACKUP_DIR/${BACKUP_NAME}.tar.gz\" Configura\u00e7\u00e3o do cron para executar diariamente Adicionar no crontab ( crontab -e ) 0 2 * * * /caminho/para/backup_script.sh >> /var/log/mongodb_backup.log 2>&1","title":"2. Script de backup autom\u00e1tico di\u00e1rio"},{"location":"MongoDB/respostas/#3-restauracao-de-backup-em-nova-instancia","text":"# Descomprimir o backup tar -xzf backup_ecommerce_db_20240330.tar.gz -C /tmp/ # Restaurar usando mongorestore mongorestore --host nova-instancia --port 27017 --db ecommerce_db_novo /tmp/backup_ecommerce_db","title":"3. Restaura\u00e7\u00e3o de backup em nova inst\u00e2ncia"},{"location":"MongoDB/respostas/#4-script-para-exportar-relatorios-de-vendas-em-pdf","text":"Usando Node.js e PDFKit Primeiro, instalar depend\u00eancias: npm install mongodb pdfkit moment fs report_generator.js const { MongoClient } = require('mongodb'); const PDFDocument = require('pdfkit'); const fs = require('fs'); const moment = require('moment'); // Configura\u00e7\u00f5es MongoDB const uri = 'mongodb://localhost:27017'; const client = new MongoClient(uri); const dbName = 'ecommerce_db'; async function generateSalesReport() { try { await client.connect(); console.log('Conectado ao MongoDB'); const db = client.db(dbName); const pedidosCollection = db.collection('pedidos'); // Data do relat\u00f3rio const today = moment().format('YYYY-MM-DD'); const fileName = `relatorio_vendas_${today}.pdf`; // Criar documento PDF const doc = new PDFDocument(); doc.pipe(fs.createWriteStream(fileName)); // T\u00edtulo e cabe\u00e7alho doc.fontSize(20).text('Relat\u00f3rio de Vendas', { align: 'center' }); doc.fontSize(12).text(`Gerado em: ${moment().format('DD/MM/YYYY HH:mm')}`, { align: 'center' }); doc.moveDown(2); // Resumo de vendas const resumoVendas = await pedidosCollection.aggregate([ { $group: { _id: null, totalVendas: { $sum: '$valorTotal' }, quantidadePedidos: { $sum: 1 }, ticketMedio: { $avg: '$valorTotal' } } } ]).toArray(); if (resumoVendas.length > 0) { const resumo = resumoVendas[0]; doc.fontSize(14).text('Resumo de Vendas'); doc.fontSize(10); doc.text(`Total de Vendas: R$ ${resumo.totalVendas.toFixed(2)}`); doc.text(`Quantidade de Pedidos: ${resumo.quantidadePedidos}`); doc.text(`Ticket M\u00e9dio: R$ ${resumo.ticketMedio.toFixed(2)}`); doc.moveDown(1); } // Vendas por m\u00eas doc.fontSize(14).text('Vendas por M\u00eas'); doc.moveDown(0.5); const vendasPorMes = await pedidosCollection.aggregate([ { $group: { _id: { ano: { $year: '$data' }, mes: { $month: '$data' } }, totalVendas: { $sum: '$valorTotal' }, quantidadePedidos: { $sum: 1 } } }, { $sort: { '_id.ano': 1, '_id.mes': 1 } } ]).toArray(); // Tabela de vendas por m\u00eas doc.fontSize(10); doc.text('Per\u00edodo', 50, doc.y, { width: 100 }); doc.text('Total Vendas', 150, doc.y - 10, { width: 150 }); doc.text('Quantidade', 300, doc.y - 10, { width: 100 }); doc.moveDown(0.5); vendasPorMes.forEach(item => { const periodo = `${item._id.ano}/${item._id.mes.toString().padStart(2, '0')}`; doc.text(periodo, 50, doc.y, { width: 100 }); doc.text(`R$ ${item.totalVendas.toFixed(2)}`, 150, doc.y - 10, { width: 150 }); doc.text(`${item.quantidadePedidos}`, 300, doc.y - 10, { width: 100 }); doc.moveDown(0.5); }); doc.moveDown(1); // Produtos mais vendidos doc.fontSize(14).text('Produtos Mais Vendidos'); doc.moveDown(0.5); const produtosMaisVendidos = await pedidosCollection.aggregate([ { $unwind: '$itens' }, { $group: { _id: '$itens.produto', nome: { $first: '$itens.nome' }, quantidade: { $sum: '$itens.quantidade' }, valorTotal: { $sum: { $multiply: ['$itens.preco', '$itens.quantidade'] } } } }, { $sort: { quantidade: -1 } }, { $limit: 10 } ]).toArray(); // Tabela de produtos mais vendidos doc.fontSize(10); doc.text('Produto', 50, doc.y, { width: 200 }); doc.text('Quantidade', 250, doc.y - 10, { width: 100 }); doc.text('Valor Total', 350, doc.y - 10, { width: 100 }); doc.moveDown(0.5); produtosMaisVendidos.forEach(item => { doc.text(item.nome, 50, doc.y, { width: 200 }); doc.text(`${item.quantidade}`, 250, doc.y - 10, { width: 100 }); doc.text(`R$ ${item.valorTotal.toFixed(2)}`, 350, doc.y - 10, { width: 100 }); doc.moveDown(0.5); }); // Finalizar documento doc.end(); console.log(`Relat\u00f3rio de vendas gerado: ${fileName}`); } finally { await client.close(); } } // Executar gera\u00e7\u00e3o do relat\u00f3rio generateSalesReport().catch(console.error);","title":"4. Script para exportar relat\u00f3rios de vendas em PDF"},{"location":"MongoDB/respostas/#5-sistema-de-logs-para-operacoes-importantes","text":"Implementa\u00e7\u00e3o do sistema de logs usando MongoDB Change Streams logger.js const { MongoClient } = require('mongodb'); const fs = require('fs'); const moment = require('moment'); // Configura\u00e7\u00f5es MongoDB const uri = 'mongodb://localhost:27017'; const client = new MongoClient(uri); const dbName = 'ecommerce_db'; async function startLogger() { try { await client.connect(); console.log('Logger conectado ao MongoDB'); const db = client.db(dbName); // Arquivo de log const logFile = fs.createWriteStream('mongodb_operations.log', { flags: 'a' }); // Monitorar opera\u00e7\u00f5es na cole\u00e7\u00e3o de produtos const produtosChangeStream = db.collection('produtos').watch(); produtosChangeStream.on('change', (change) => { const timestamp = moment().format('YYYY-MM-DD HH:mm:ss'); const operation = change.operationType; let details = ''; if (operation === 'insert') { details = `Novo produto inserido: ${change.fullDocument.nome}`; } else if (operation === 'update') { details = `Produto atualizado: ID ${change.documentKey._id}`; if (change.updateDescription && change.updateDescription.updatedFields) { details += `, Campos: ${Object.keys(change.updateDescription.updatedFields).join(', ')}`; } } else if (operation === 'delete') { details = `Produto removido: ID ${change.documentKey._id}`; } const logMessage = `[${timestamp}] [PRODUTOS] ${operation.toUpperCase()}: ${details}\\n`; logFile.write(logMessage); console.log(logMessage); }); // Monitorar opera\u00e7\u00f5es na cole\u00e7\u00e3o de pedidos const pedidosChangeStream = db.collection('pedidos').watch(); pedidosChangeStream.on('change', (change) => { const timestamp = moment().format('YYYY-MM-DD HH:mm:ss'); const operation = change.operationType; let details = ''; if (operation === 'insert') { details = `Novo pedido registrado: Cliente ID ${change.fullDocument.cliente}, Valor: R$ ${change.fullDocument.valorTotal}`; } else if (operation === 'update') { details = `Pedido atualizado: ID ${change.documentKey._id}`; if (change.updateDescription && change.updateDescription.updatedFields) { if (change.updateDescription.updatedFields.status) { details += `, Novo status: ${change.updateDescription.updatedFields.status}`; } } } else if (operation === 'delete') { details = `Pedido removido: ID ${change.documentKey._id}`; } const logMessage = `[${timestamp}] [PEDIDOS] ${operation.toUpperCase()}: ${details}\\n`; logFile.write(logMessage); console.log(logMessage); }); console.log('Logger iniciado e monitorando opera\u00e7\u00f5es do MongoDB'); // Manter a conex\u00e3o aberta process.on('SIGINT', async () => { console.log('Encerrando logger...'); await client.close(); }); } catch (error) { console.error('Erro ao iniciar logger:', error); } } // Iniciar o logger startLogger().catch(console.error);","title":"5. Sistema de logs para opera\u00e7\u00f5es importantes"},{"location":"MongoDB/respostas/#tarefa-10-operacoes-com-docker","text":"","title":"Tarefa 10: Opera\u00e7\u00f5es com Docker"},{"location":"MongoDB/respostas/#1-crie-um-docker-composeyml-para-mongodb-e-mongo-express","text":"version: '3' services: mongodb: image: mongo:latest container_name: mongodb ports: - \"27017:27017\" environment: MONGO_INITDB_ROOT_USERNAME: admin MONGO_INITDB_ROOT_PASSWORD: senha123 volumes: - mongo_data:/data/db networks: - mongo_network mongo-express: image: mongo-express:latest container_name: mongo-express depends_on: - mongodb ports: - \"8081:8081\" environment: ME_CONFIG_MONGODB_ADMINUSERNAME: admin ME_CONFIG_MONGODB_ADMINPASSWORD: senha123 ME_CONFIG_MONGODB_SERVER: mongodb ME_CONFIG_BASICAUTH_USERNAME: admin ME_CONFIG_BASICAUTH_PASSWORD: senha123 networks: - mongo_network volumes: mongo_data: networks: mongo_network: driver: bridge","title":"1. Crie um docker-compose.yml para MongoDB e Mongo Express"},{"location":"MongoDB/respostas/#2-implemente-um-sistema-de-replicacao-com-3-instancias-mongodb","text":"docker run -d --name mongo1 -p 27017:27017 mongo --replSet rs0 docker run -d --name mongo2 -p 27018:27017 mongo --replSet rs0 docker run -d --name mongo3 -p 27019:27017 mongo --replSet rs0 Configurar o conjunto de r\u00e9plicas docker exec -it mongo1 mongosh --eval \"rs.initiate({ _id: 'rs0', members: [ { _id: 0, host: 'localhost:27017' }, { _id: 1, host: 'localhost:27018' }, { _id: 2, host: 'localhost:27019' } ] })\"","title":"2. Implemente um sistema de replica\u00e7\u00e3o com 3 inst\u00e2ncias MongoDB"},{"location":"MongoDB/respostas/#tarefa-11-preparacao-do-projeto","text":"","title":"Tarefa 11: Prepara\u00e7\u00e3o do Projeto"},{"location":"MongoDB/respostas/#1-crie-um-diagrama-de-relacionamento-entre-as-colecoes","text":"(Diagrama seria inserido aqui, se fosse um formato visual)","title":"1. Crie um diagrama de relacionamento entre as cole\u00e7\u00f5es"},{"location":"MongoDB/respostas/#2-configure-indices-otimizados-para-todos-os-casos-de-uso","text":"(J\u00e1 abordado na Tarefa 6)","title":"2. Configure \u00edndices otimizados para todos os casos de uso"},{"location":"MongoDB/respostas/#3-implemente-validacao-de-esquema-para-todas-as-colecoes","text":"(Exemplo de valida\u00e7\u00e3o de esquema para a cole\u00e7\u00e3o produtos ) db.createCollection(\"produtos\", { validator: { $jsonSchema: { bsonType: \"object\", required: [\"nome\", \"preco\", \"estoque\", \"categoria\"], properties: { nome: { bsonType: \"string\", description: \"deve ser uma string e \u00e9 obrigat\u00f3rio\" }, preco: { bsonType: \"double\", minimum: 0, description: \"deve ser um double maior ou igual a 0 e \u00e9 obrigat\u00f3rio\" }, estoque: { bsonType: \"int\", minimum: 0, description: \"deve ser um inteiro maior ou igual a 0 e \u00e9 obrigat\u00f3rio\" }, categoria: { bsonType: \"string\", description: \"deve ser uma string e \u00e9 obrigat\u00f3rio\" }, descricao: { bsonType: \"string\", description: \"deve ser uma string\" }, tags: { bsonType: \"array\", items: { bsonType: \"string\" }, description: \"deve ser um array de strings\" } } } } })","title":"3. Implemente valida\u00e7\u00e3o de esquema para todas as cole\u00e7\u00f5es"},{"location":"MongoDB/respostas/#tarefa-12-relatorios-e-analytics","text":"","title":"Tarefa 12: Relat\u00f3rios e Analytics"},{"location":"MongoDB/respostas/#1-desenvolva-relatorios-de-vendas-por-periodo","text":"(Exemplo: Vendas di\u00e1rias) db.pedidos.aggregate([ { $group: { _id: { $dateToString: { format: \"%Y-%m-%d\", date: \"$data\" } }, totalVendas: { $sum: \"$valorTotal\" }, quantidadePedidos: { $sum: 1 } } }, { $sort: { _id: 1 } } ])","title":"1. Desenvolva relat\u00f3rios de vendas por per\u00edodo"},{"location":"MongoDB/respostas/#2-crie-um-sistema-de-recomendacao-baseado-em-compras-anteriores","text":"(Exemplo: Produtos comprados juntos) db.pedidos.aggregate([ { $unwind: \"$itens\" }, { $group: { _id: \"$cliente\", produtosComprados: { $addToSet: \"$itens.produto\" } } }, { $unwind: \"$produtosComprados\" }, { $group: { _id: \"$produtosComprados\", clientes: { $addToSet: \"$_id\" } } }, { $project: { _id: 0, produtoId: \"$_id\", clientesQueCompraram: \"$clientes\", count: { $size: \"$clientes\" } } }, { $sort: { count: -1 } } ])","title":"2. Crie um sistema de recomenda\u00e7\u00e3o baseado em compras anteriores"},{"location":"MongoDB/respostas/#3-implemente-dashboards-de-metricas-para-administradores","text":"(J\u00e1 abordado na Tarefa 8, item 5)","title":"3. Implemente dashboards de m\u00e9tricas para administradores"},{"location":"MongoDB/respostas/#4-crie-um-sistema-de-alertas-para-produtos-com-estoque-baixo","text":"db.produtos.find({ estoque: { $lt: 10 } })","title":"4. Crie um sistema de alertas para produtos com estoque baixo"},{"location":"MongoDB/respostas/#5-desenvolva-relatorios-de-comportamento-de-usuarios","text":"(Exemplo: Clientes que mais gastaram) db.pedidos.aggregate([ { $group: { _id: \"$cliente\", totalGasto: { $sum: \"$valorTotal\" }, totalPedidos: { $sum: 1 } } }, { $lookup: { from: \"clientes\", localField: \"_id\", foreignField: \"_id\", as: \"clienteInfo\" } }, { $unwind: \"$clienteInfo\" }, { $project: { _id: 0, nomeCliente: \"$clienteInfo.nome\", emailCliente: \"$clienteInfo.email\", totalGasto: 1, totalPedidos: 1 } }, { $sort: { totalGasto: -1 } }, { $limit: 5 } ])","title":"5. Desenvolva relat\u00f3rios de comportamento de usu\u00e1rios"},{"location":"MongoDB/respostas/#tarefa-13-entrega-e-documentacao","text":"","title":"Tarefa 13: Entrega e Documenta\u00e7\u00e3o"},{"location":"MongoDB/respostas/#1-documente-todas-as-funcionalidades-implementadas","text":"(Este documento serve como parte da documenta\u00e7\u00e3o)","title":"1. Documente todas as funcionalidades implementadas"},{"location":"MongoDB/respostas/#2-crie-guias-de-uso-para-administradores-e-clientes","text":"(Exemplo de guia para administradores: Como verificar o status do MongoDB) sudo systemctl status mongod","title":"2. Crie guias de uso para administradores e clientes"},{"location":"MongoDB/tarefas/","text":"Apostila de Tarefas - Workshop MongoDB Documenta\u00e7\u00e3o Oficial Curso B\u00e1sico de Mongo - Legendado Diferen\u00e7as entre NoSQL e SQL Introdu\u00e7\u00e3o Esta apostila cont\u00e9m uma s\u00e9rie de tarefas pr\u00e1ticas para consolidar os conhecimentos adquiridos durante o Workshop de MongoDB. As tarefas est\u00e3o organizadas em ordem crescente de dificuldade, acompanhando a evolu\u00e7\u00e3o do curso e culminando no desenvolvimento do projeto final de e-commerce. Tarefas Fundamentais Tarefa 1: Instala\u00e7\u00e3o e Configura\u00e7\u00e3o Instale o MongoDB na sua m\u00e1quina (escolha entre instala\u00e7\u00e3o convencional ou Docker) Configure um usu\u00e1rio administrador para o banco de dados Crie um banco de dados chamado ecommerce_db Verifique a conex\u00e3o usando o MongoDB Compass ou mongosh Tarefa 2: Cria\u00e7\u00e3o da Estrutura de Dados Crie as seguintes cole\u00e7\u00f5es no banco ecommerce_db : produtos categorias clientes pedidos avaliacoes Insira pelo menos 5 categorias diferentes de produtos Documente a estrutura criada em um arquivo README.md Tarefa 3: Opera\u00e7\u00f5es CRUD B\u00e1sicas Insira pelo menos 15 produtos, distribu\u00eddos entre as categorias criadas Cada produto deve ter: nome, descri\u00e7\u00e3o, pre\u00e7o, estoque, categoria, e pelo menos 3 tags Insira pelo menos 8 clientes com dados completos (nome, email, telefone, endere\u00e7o) Atualize o estoque de 3 produtos diferentes Remova um produto que esteja com estoque zerado Liste todos os produtos em ordem alfab\u00e9tica de nome Tarefas Intermedi\u00e1rias Tarefa 4: Consultas Avan\u00e7adas Busque produtos por faixa de pre\u00e7o (ex: entre R$100 e R$500) Encontre produtos que contenham uma palavra espec\u00edfica no nome (usando regex) Busque produtos por categoria e ordene por pre\u00e7o (decrescente) Encontre clientes que moram em uma determinada cidade Busque produtos que tenham tags espec\u00edficas Crie uma consulta que retorne apenas os 5 produtos mais caros Tarefa 5: Relacionamentos e Documentos Complexos Crie 10 pedidos que relacionem clientes e produtos Cada pedido deve conter: cliente, data, status, itens (produtos e quantidades), valor total Atualize o estoque automaticamente ao criar um pedido Para cada pedido, crie pelo menos 2 avalia\u00e7\u00f5es de produtos As avalia\u00e7\u00f5es devem ter: produto, cliente, pedido, nota (1-5), coment\u00e1rio e data Busque pedidos de um cliente espec\u00edfico com todos os detalhes dos produtos Tarefa 6: \u00cdndices e Otimiza\u00e7\u00e3o Crie \u00edndices para as consultas mais frequentes: \u00cdndice para busca de produtos por nome \u00cdndice para busca de produtos por categoria e pre\u00e7o \u00cdndice \u00fanico para email de clientes \u00cdndice para busca de pedidos por cliente e data Analise o desempenho das consultas com e sem \u00edndices usando explain() Crie um \u00edndice de texto para busca em produtos (nome e descri\u00e7\u00e3o) Teste o desempenho com diferentes tipos de consultas e tamanhos de resultado Tarefas Avan\u00e7adas Tarefa 7: Agrega\u00e7\u00f5es B\u00e1sicas Calcule o valor m\u00e9dio dos pedidos Conte o n\u00famero de produtos por categoria Encontre os 3 clientes com maior valor total em pedidos Calcule o total de vendas por m\u00eas Crie um relat\u00f3rio de produtos mais vendidos Tarefa 8: Agrega\u00e7\u00f5es Avan\u00e7adas Crie um pipeline que mostre a distribui\u00e7\u00e3o de notas nas avalia\u00e7\u00f5es por categoria de produto Gere um relat\u00f3rio de vendas por dia da semana e hora do dia Calcule o tempo m\u00e9dio entre a cria\u00e7\u00e3o do pedido e sua entrega Identifique produtos que s\u00e3o frequentemente comprados juntos Crie um dashboard com indicadores de desempenho (vendas, ticket m\u00e9dio, produtos mais vistos) Tarefa 9: Exporta\u00e7\u00e3o e Backup Exporte a cole\u00e7\u00e3o de produtos para um arquivo CSV Crie um script de backup autom\u00e1tico di\u00e1rio do banco de dados Restaure o banco a partir de um backup em uma nova inst\u00e2ncia MongoDB Crie um script para exportar relat\u00f3rios de vendas em formato PDF Implemente um sistema de logs para registrar opera\u00e7\u00f5es importantes Tarefa 10: Opera\u00e7\u00f5es com Docker Crie um docker-compose.yml para MongoDB e Mongo Express Configure persist\u00eancia de dados com volumes Implemente um sistema de replica\u00e7\u00e3o com 3 inst\u00e2ncias MongoDB Tarefa 11: Prepara\u00e7\u00e3o do Projeto Crie um diagrama de relacionamento entre as cole\u00e7\u00f5es Configure \u00edndices otimizados para todos os casos de uso Implemente valida\u00e7\u00e3o de esquema para todas as cole\u00e7\u00f5es Tarefa 12: Relat\u00f3rios e Analytics Desenvolva relat\u00f3rios de vendas por per\u00edodo Crie um sistema de recomenda\u00e7\u00e3o baseado em compras anteriores Implemente dashboards de m\u00e9tricas para administradores Crie um sistema de alertas para produtos com estoque baixo Desenvolva relat\u00f3rios de comportamento de usu\u00e1rios Tarefa 13: Entrega e Documenta\u00e7\u00e3o Documente todas as funcionalidades implementadas Crie guias de uso para administradores e clientes Prepare uma apresenta\u00e7\u00e3o do projeto final","title":"Tarefas"},{"location":"MongoDB/tarefas/#apostila-de-tarefas-workshop-mongodb","text":"Documenta\u00e7\u00e3o Oficial Curso B\u00e1sico de Mongo - Legendado Diferen\u00e7as entre NoSQL e SQL","title":"Apostila de Tarefas - Workshop MongoDB"},{"location":"MongoDB/tarefas/#introducao","text":"Esta apostila cont\u00e9m uma s\u00e9rie de tarefas pr\u00e1ticas para consolidar os conhecimentos adquiridos durante o Workshop de MongoDB. As tarefas est\u00e3o organizadas em ordem crescente de dificuldade, acompanhando a evolu\u00e7\u00e3o do curso e culminando no desenvolvimento do projeto final de e-commerce.","title":"Introdu\u00e7\u00e3o"},{"location":"MongoDB/tarefas/#tarefas-fundamentais","text":"","title":"Tarefas Fundamentais"},{"location":"MongoDB/tarefas/#tarefa-1-instalacao-e-configuracao","text":"Instale o MongoDB na sua m\u00e1quina (escolha entre instala\u00e7\u00e3o convencional ou Docker) Configure um usu\u00e1rio administrador para o banco de dados Crie um banco de dados chamado ecommerce_db Verifique a conex\u00e3o usando o MongoDB Compass ou mongosh","title":"Tarefa 1: Instala\u00e7\u00e3o e Configura\u00e7\u00e3o"},{"location":"MongoDB/tarefas/#tarefa-2-criacao-da-estrutura-de-dados","text":"Crie as seguintes cole\u00e7\u00f5es no banco ecommerce_db : produtos categorias clientes pedidos avaliacoes Insira pelo menos 5 categorias diferentes de produtos Documente a estrutura criada em um arquivo README.md","title":"Tarefa 2: Cria\u00e7\u00e3o da Estrutura de Dados"},{"location":"MongoDB/tarefas/#tarefa-3-operacoes-crud-basicas","text":"Insira pelo menos 15 produtos, distribu\u00eddos entre as categorias criadas Cada produto deve ter: nome, descri\u00e7\u00e3o, pre\u00e7o, estoque, categoria, e pelo menos 3 tags Insira pelo menos 8 clientes com dados completos (nome, email, telefone, endere\u00e7o) Atualize o estoque de 3 produtos diferentes Remova um produto que esteja com estoque zerado Liste todos os produtos em ordem alfab\u00e9tica de nome","title":"Tarefa 3: Opera\u00e7\u00f5es CRUD B\u00e1sicas"},{"location":"MongoDB/tarefas/#tarefas-intermediarias","text":"","title":"Tarefas Intermedi\u00e1rias"},{"location":"MongoDB/tarefas/#tarefa-4-consultas-avancadas","text":"Busque produtos por faixa de pre\u00e7o (ex: entre R$100 e R$500) Encontre produtos que contenham uma palavra espec\u00edfica no nome (usando regex) Busque produtos por categoria e ordene por pre\u00e7o (decrescente) Encontre clientes que moram em uma determinada cidade Busque produtos que tenham tags espec\u00edficas Crie uma consulta que retorne apenas os 5 produtos mais caros","title":"Tarefa 4: Consultas Avan\u00e7adas"},{"location":"MongoDB/tarefas/#tarefa-5-relacionamentos-e-documentos-complexos","text":"Crie 10 pedidos que relacionem clientes e produtos Cada pedido deve conter: cliente, data, status, itens (produtos e quantidades), valor total Atualize o estoque automaticamente ao criar um pedido Para cada pedido, crie pelo menos 2 avalia\u00e7\u00f5es de produtos As avalia\u00e7\u00f5es devem ter: produto, cliente, pedido, nota (1-5), coment\u00e1rio e data Busque pedidos de um cliente espec\u00edfico com todos os detalhes dos produtos","title":"Tarefa 5: Relacionamentos e Documentos Complexos"},{"location":"MongoDB/tarefas/#tarefa-6-indices-e-otimizacao","text":"Crie \u00edndices para as consultas mais frequentes: \u00cdndice para busca de produtos por nome \u00cdndice para busca de produtos por categoria e pre\u00e7o \u00cdndice \u00fanico para email de clientes \u00cdndice para busca de pedidos por cliente e data Analise o desempenho das consultas com e sem \u00edndices usando explain() Crie um \u00edndice de texto para busca em produtos (nome e descri\u00e7\u00e3o) Teste o desempenho com diferentes tipos de consultas e tamanhos de resultado","title":"Tarefa 6: \u00cdndices e Otimiza\u00e7\u00e3o"},{"location":"MongoDB/tarefas/#tarefas-avancadas","text":"","title":"Tarefas Avan\u00e7adas"},{"location":"MongoDB/tarefas/#tarefa-7-agregacoes-basicas","text":"Calcule o valor m\u00e9dio dos pedidos Conte o n\u00famero de produtos por categoria Encontre os 3 clientes com maior valor total em pedidos Calcule o total de vendas por m\u00eas Crie um relat\u00f3rio de produtos mais vendidos","title":"Tarefa 7: Agrega\u00e7\u00f5es B\u00e1sicas"},{"location":"MongoDB/tarefas/#tarefa-8-agregacoes-avancadas","text":"Crie um pipeline que mostre a distribui\u00e7\u00e3o de notas nas avalia\u00e7\u00f5es por categoria de produto Gere um relat\u00f3rio de vendas por dia da semana e hora do dia Calcule o tempo m\u00e9dio entre a cria\u00e7\u00e3o do pedido e sua entrega Identifique produtos que s\u00e3o frequentemente comprados juntos Crie um dashboard com indicadores de desempenho (vendas, ticket m\u00e9dio, produtos mais vistos)","title":"Tarefa 8: Agrega\u00e7\u00f5es Avan\u00e7adas"},{"location":"MongoDB/tarefas/#tarefa-9-exportacao-e-backup","text":"Exporte a cole\u00e7\u00e3o de produtos para um arquivo CSV Crie um script de backup autom\u00e1tico di\u00e1rio do banco de dados Restaure o banco a partir de um backup em uma nova inst\u00e2ncia MongoDB Crie um script para exportar relat\u00f3rios de vendas em formato PDF Implemente um sistema de logs para registrar opera\u00e7\u00f5es importantes","title":"Tarefa 9: Exporta\u00e7\u00e3o e Backup"},{"location":"MongoDB/tarefas/#tarefa-10-operacoes-com-docker","text":"Crie um docker-compose.yml para MongoDB e Mongo Express Configure persist\u00eancia de dados com volumes Implemente um sistema de replica\u00e7\u00e3o com 3 inst\u00e2ncias MongoDB","title":"Tarefa 10: Opera\u00e7\u00f5es com Docker"},{"location":"MongoDB/tarefas/#tarefa-11-preparacao-do-projeto","text":"Crie um diagrama de relacionamento entre as cole\u00e7\u00f5es Configure \u00edndices otimizados para todos os casos de uso Implemente valida\u00e7\u00e3o de esquema para todas as cole\u00e7\u00f5es","title":"Tarefa 11: Prepara\u00e7\u00e3o do Projeto"},{"location":"MongoDB/tarefas/#tarefa-12-relatorios-e-analytics","text":"Desenvolva relat\u00f3rios de vendas por per\u00edodo Crie um sistema de recomenda\u00e7\u00e3o baseado em compras anteriores Implemente dashboards de m\u00e9tricas para administradores Crie um sistema de alertas para produtos com estoque baixo Desenvolva relat\u00f3rios de comportamento de usu\u00e1rios","title":"Tarefa 12: Relat\u00f3rios e Analytics"},{"location":"MongoDB/tarefas/#tarefa-13-entrega-e-documentacao","text":"Documente todas as funcionalidades implementadas Crie guias de uso para administradores e clientes Prepare uma apresenta\u00e7\u00e3o do projeto final","title":"Tarefa 13: Entrega e Documenta\u00e7\u00e3o"},{"location":"Requisitos/","text":"An\u00e1lise de Requisitos - Guia Completo Sum\u00e1rio Introdu\u00e7\u00e3o Conceitos Fundamentais Tipos de Requisitos Processo de An\u00e1lise T\u00e9cnicas de Levantamento Documenta\u00e7\u00e3o de Requisitos Valida\u00e7\u00e3o e Verifica\u00e7\u00e3o Casos Pr\u00e1ticos Erros Comuns e Como Evitar Templates e Ferramentas 1. Introdu\u00e7\u00e3o O que \u00e9 An\u00e1lise de Requisitos? An\u00e1lise de Requisitos \u00e9 o processo de descobrir, analisar, documentar e verificar os servi\u00e7os requeridos de um sistema e as restri\u00e7\u00f5es sob as quais ele deve operar. \u00c9 a funda\u00e7\u00e3o de qualquer projeto de software bem-sucedido. Por que \u00e9 Importante? Estat\u00edsticas do setor mostram que: 70% dos projetos de software falham devido a requisitos mal definidos Corrigir um erro de requisito na fase de desenvolvimento custa 10x mais que na fase de an\u00e1lise Corrigir ap\u00f3s o deploy pode custar at\u00e9 100x mais Benef\u00edcios da boa an\u00e1lise: Reduz retrabalho e custos Melhora a satisfa\u00e7\u00e3o do cliente Diminui riscos do projeto Facilita estimativas precisas Melhora a qualidade do produto final Papel do Analista de Requisitos O analista atua como ponte entre: Stakeholders (quem define o que precisa ser feito) Equipe t\u00e9cnica (quem implementa a solu\u00e7\u00e3o) Responsabilidades principais: Entender o problema de neg\u00f3cio Identificar todos os stakeholders Extrair e documentar requisitos Validar entendimento com stakeholders Comunicar requisitos para a equipe t\u00e9cnica Gerenciar mudan\u00e7as nos requisitos 2. Conceitos Fundamentais Requisito vs. Especifica\u00e7\u00e3o Requisito: O QUE o sistema deve fazer \"O sistema deve permitir login de usu\u00e1rios\" Especifica\u00e7\u00e3o: COMO o sistema deve fazer \"O login ser\u00e1 realizado atrav\u00e9s de formul\u00e1rio com campos email/senha, valida\u00e7\u00e3o no servidor via API REST, retorno de token JWT para autentica\u00e7\u00e3o\" Stakeholders Defini\u00e7\u00e3o: Qualquer pessoa ou grupo que afeta ou \u00e9 afetado pelo sistema. Tipos de Stakeholders: Prim\u00e1rios: Usu\u00e1rios diretos do sistema Secund\u00e1rios: Afetados indiretamente (gerentes, suporte t\u00e9cnico) Chave: Tomadores de decis\u00e3o (sponsors, product owners) Sombra: Descobertos durante o projeto (auditores, reguladores) Exemplo pr\u00e1tico - Sistema de E-commerce: Prim\u00e1rios: Clientes, vendedores Secund\u00e1rios: Equipe de marketing, suporte ao cliente Chave: Gerente de produto, diretor comercial Sombra: \u00d3rg\u00e3os reguladores (PROCON), sistemas de pagamento Problema vs. Solu\u00e7\u00e3o \u274c Foco na Solu\u00e7\u00e3o (Errado): \"O sistema precisa ter um bot\u00e3o vermelho no canto direito\" \u2705 Foco no Problema (Correto): \"Os usu\u00e1rios precisam de uma forma r\u00e1pida de sair do sistema em situa\u00e7\u00f5es de emerg\u00eancia\" Por que isso importa? Focar no problema permite m\u00faltiplas solu\u00e7\u00f5es Evita pre-concep\u00e7\u00f5es que limitam a criatividade Garante que a real necessidade seja atendida 3. Tipos de Requisitos 1. Requisitos Funcionais (RF) Defini\u00e7\u00e3o: Descrevem o que o sistema deve fazer - suas fun\u00e7\u00f5es e comportamentos. Caracter\u00edsticas: Sempre come\u00e7am com um verbo de a\u00e7\u00e3o S\u00e3o test\u00e1veis e mensur\u00e1veis Descrevem comportamento observ\u00e1vel Template: O sistema deve [A\u00c7\u00c3O] [OBJETO] [CONDI\u00c7\u00c3O] Exemplos: RF01: O sistema deve autenticar usu\u00e1rios atrav\u00e9s de email e senha RF02: O sistema deve gerar relat\u00f3rio de vendas mensais RF03: O sistema deve enviar notifica\u00e7\u00e3o por email quando o estoque estiver baixo RF04: O sistema deve permitir cancelamento de pedidos em at\u00e9 24 horas 2. Requisitos N\u00e3o-Funcionais (RNF) Defini\u00e7\u00e3o: Descrevem como o sistema deve funcionar - qualidades e restri\u00e7\u00f5es. Principais Categorias: Performance Tempo de resposta: \"P\u00e1ginas devem carregar em menos de 2 segundos\" Throughput: \"Sistema deve suportar 1000 usu\u00e1rios simult\u00e2neos\" Capacidade: \"Banco deve armazenar 1 milh\u00e3o de registros\" Usabilidade Facilidade de uso: \"Usu\u00e1rio deve conseguir fazer uma compra em menos de 3 cliques\" Acessibilidade: \"Interface deve seguir padr\u00f5es WCAG 2.1\" Aprendizagem: \"Novos usu\u00e1rios devem completar primeira tarefa em menos de 5 minutos\" Confiabilidade Disponibilidade: \"Sistema deve ter 99.9% de uptime\" Recupera\u00e7\u00e3o: \"Sistema deve se recuperar de falhas em menos de 30 segundos\" Precis\u00e3o: \"C\u00e1lculos financeiros devem ter precis\u00e3o de 2 casas decimais\" Seguran\u00e7a Autentica\u00e7\u00e3o: \"Senhas devem ter m\u00ednimo 8 caracteres com s\u00edmbolos\" Autoriza\u00e7\u00e3o: \"Apenas administradores podem deletar usu\u00e1rios\" Criptografia: \"Dados sens\u00edveis devem ser criptografados em repouso\" Compatibilidade Plataformas: \"Deve funcionar em Chrome, Firefox, Safari e Edge\" Dispositivos: \"Interface deve ser responsiva para desktop e mobile\" Sistemas: \"Deve integrar com sistemas SAP existentes\" Exemplo Completo - Sistema de Blog: Requisitos Funcionais: RF01: O sistema deve permitir cria\u00e7\u00e3o de posts RF02: O sistema deve permitir coment\u00e1rios em posts RF03: O sistema deve permitir busca por t\u00edtulo e conte\u00fado Requisitos N\u00e3o-Funcionais: RNF01: Interface deve carregar em menos de 3 segundos (Performance) RNF02: Deve funcionar em dispositivos m\u00f3veis (Compatibilidade) RNF03: Apenas autores podem editar seus pr\u00f3prios posts (Seguran\u00e7a) 3. Regras de Neg\u00f3cio Defini\u00e7\u00e3o: Pol\u00edticas, regulamenta\u00e7\u00f5es ou princ\u00edpios que governam como a organiza\u00e7\u00e3o opera. Caracter\u00edsticas: Existem independente do sistema Podem mudar ao longo do tempo Influenciam m\u00faltiplos requisitos Exemplos: RN01: Desconto m\u00e1ximo permitido \u00e9 20% RN02: Pedidos acima de R$ 100 t\u00eam frete gr\u00e1tis RN03: Usu\u00e1rios menores de 18 anos n\u00e3o podem comprar bebidas alco\u00f3licas 4. Processo de An\u00e1lise 1. Fases do Processo Fase 1: Descoberta Objetivo: Entender o contexto e identificar stakeholders Atividades: Estudar documentos existentes Identificar todos os stakeholders Entender o dom\u00ednio do problema Definir escopo inicial Entregas: Lista de stakeholders Gloss\u00e1rio de termos do dom\u00ednio Documento de contexto Fase 2: Elicita\u00e7\u00e3o Objetivo: Extrair requisitos dos stakeholders Atividades: Realizar entrevistas Conduzir workshops Observar processos atuais Analisar sistemas similares Entregas: Requisitos brutos (n\u00e3o organizados) Atas de reuni\u00f5es Artefatos de processo atual Fase 3: An\u00e1lise Objetivo: Organizar, priorizar e refinar requisitos Atividades: Categorizar requisitos Identificar depend\u00eancias Resolver conflitos Priorizar requisitos Entregas: Lista priorizada de requisitos Matriz de depend\u00eancias Log de decis\u00f5es Fase 4: Especifica\u00e7\u00e3o Objetivo: Documentar requisitos de forma clara e precisa Atividades: Escrever requisitos usando templates Criar casos de uso Definir crit\u00e9rios de aceita\u00e7\u00e3o Revisar documenta\u00e7\u00e3o Entregas: Documento de requisitos Casos de uso Crit\u00e9rios de aceita\u00e7\u00e3o Fase 5: Valida\u00e7\u00e3o Objetivo: Confirmar que requisitos est\u00e3o corretos Atividades: Revisar com stakeholders Criar prot\u00f3tipos Realizar testes de conceito Aprova\u00e7\u00e3o formal Entregas: Requisitos aprovados Prot\u00f3tipos validados Atas de aprova\u00e7\u00e3o 2. Ciclo Iterativo Importante: O processo N\u00c3O \u00e9 linear. \u00c9 comum voltar a fases anteriores quando: Novos stakeholders s\u00e3o descobertos Requisitos conflitantes s\u00e3o identificados Mudan\u00e7as no contexto ocorrem Feedback dos usu\u00e1rios \u00e9 recebido 5. T\u00e9cnicas de Levantamento 1. Entrevistas Quando usar: In\u00edcio do projeto para entender contexto geral Quando precisar de informa\u00e7\u00f5es detalhadas Para esclarecer requisitos conflitantes Como conduzir: Prepara\u00e7\u00e3o: Pesquise sobre o entrevistado e seu papel Prepare roteiro com perguntas abertas Agende em hor\u00e1rio conveniente Tenha ferramentas de registro (gravador, notas) Durante a entrevista: Comece com perguntas contextuais Use t\u00e9cnicas de escuta ativa Fa\u00e7a perguntas de esclarecimento Evite induzir respostas Ap\u00f3s a entrevista: Transcreva anota\u00e7\u00f5es imediatamente Envie resumo para valida\u00e7\u00e3o Identifique pontos que precisam de esclarecimento Exemplo de roteiro: ENTREVISTA - GERENTE DE VENDAS Objetivo: Entender processo atual de vendas 1. CONTEXTO 1. Pode me descrever um dia t\u00edpico seu? 1. Quais s\u00e3o seus principais desafios? 2. PROCESSO ATUAL 1. Como voc\u00eas fazem vendas hoje? 1. Que ferramentas utilizam? 1. Onde voc\u00eas sentem mais dificuldade? 3. NECESSIDADES 1. O que gostaria que fosse diferente? 1. Se pudesse ter uma varinha m\u00e1gica, o que mudaria? 4. CRIT\u00c9RIOS DE SUCESSO - Como saberia que o novo sistema est\u00e1 funcionando? - Que m\u00e9tricas s\u00e3o importantes para voc\u00ea? 2. Observa\u00e7\u00e3o Quando usar: Para entender processos complexos Quando h\u00e1 diferen\u00e7a entre o que dizem e fazem Para identificar necessidades n\u00e3o verbalizadas T\u00e9cnicas: Shadowing: Acompanhar usu\u00e1rio durante trabalho Fly on the wall: Observar sem interferir Contextual inquiry: Observar e fazer perguntas Exemplo pr\u00e1tico: Observando um atendente de call center, voc\u00ea pode descobrir que ele usa uma planilha Excel paralela ao sistema oficial porque o sistema \u00e9 muito lento. Isso revela requisitos de performance que n\u00e3o seriam mencionados em entrevista. 3. Workshops Quando usar: Para alinhar vis\u00f5es de m\u00faltiplos stakeholders Para resolver conflitos de requisitos Para brainstorming de solu\u00e7\u00f5es Estrutura t\u00edpica: Abertura (15 min): Objetivos e regras Contexto (30 min): Apresenta\u00e7\u00e3o do problema Diverg\u00eancia (60 min): Levantamento de ideias Converg\u00eancia (45 min): Organiza\u00e7\u00e3o e prioriza\u00e7\u00e3o Fechamento (15 min): Pr\u00f3ximos passos 4. An\u00e1lise de Documentos Documentos \u00fateis: Manuais de processo existentes Regulamenta\u00e7\u00f5es e normas Sistemas similares Reclama\u00e7\u00f5es de usu\u00e1rios Dados de uso de sistemas atuais 5. Question\u00e1rios Quando usar: Para coletar dados de muitas pessoas Para validar prioridades Para coletar feedback sobre prot\u00f3tipos Tipos de perguntas: Fechadas: Para dados quantitativos Abertas: Para insights qualitativos Escala: Para medir intensidade de opini\u00f5es 6. Documenta\u00e7\u00e3o de Requisitos 1. Caracter\u00edsticas de Bons Requisitos Mnem\u00f4nico: CORRECT C ompletos: Toda informa\u00e7\u00e3o necess\u00e1ria est\u00e1 presente C orretos: Livres de erros R astre\u00e1veis: Podem ser ligados \u00e0 origem e implementa\u00e7\u00e3o R elevantes: Importantes para o sucesso do projeto E spec\u00edficos: N\u00e3o amb\u00edguos C onsistentes: N\u00e3o conflitam entre si T est\u00e1veis: Podem ser verificados 2. Escrevendo Requisitos Funcionais Template b\u00e1sico: O sistema deve [A\u00c7\u00c3O] [OBJETO] [CONDI\u00c7\u00c3O/RESTRI\u00c7\u00c3O] Exemplos bem escritos: \u2705 \"O sistema deve enviar email de confirma\u00e7\u00e3o ao usu\u00e1rio dentro de 5 minutos ap\u00f3s o cadastro\" \u2705 \"O sistema deve permitir cancelamento de pedidos apenas se o status for 'Aguardando pagamento'\" Exemplos mal escritos: \u274c \"O sistema deve ser r\u00e1pido\" (muito vago) \u274c \"O sistema deve ter uma tela bonita\" (subjetivo) \u274c \"O sistema deve usar banco MySQL\" (solu\u00e7\u00e3o, n\u00e3o requisito) 3. Crit\u00e9rios de Aceita\u00e7\u00e3o Defini\u00e7\u00e3o: Condi\u00e7\u00f5es espec\u00edficas que devem ser atendidas para que um requisito seja considerado implementado corretamente. Formato Given-When-Then: DADO QUE [contexto inicial] QUANDO [a\u00e7\u00e3o \u00e9 executada] ENT\u00c3O [resultado esperado] Exemplo: RF05: O sistema deve validar CPF do usu\u00e1rio Crit\u00e9rios de Aceita\u00e7\u00e3o: CA01: DADO QUE usu\u00e1rio informa CPF v\u00e1lido QUANDO submete formul\u00e1rio de cadastro ENT\u00c3O cadastro deve ser aceito CA02: DADO QUE usu\u00e1rio informa CPF inv\u00e1lido QUANDO submete formul\u00e1rio de cadastro ENT\u00c3O deve exibir mensagem \"CPF inv\u00e1lido\" CA03: DADO QUE usu\u00e1rio n\u00e3o informa CPF QUANDO submete formul\u00e1rio de cadastro ENT\u00c3O deve exibir mensagem \"CPF \u00e9 obrigat\u00f3rio\" 4. Casos de Uso Quando usar: Para descrever intera\u00e7\u00f5es complexas Para mostrar fluxos alternativos Para documentar regras de neg\u00f3cio Template de Caso de Uso: CASO DE USO: [Nome] ATOR: [Quem executa] OBJETIVO: [O que quer alcan\u00e7ar] PR\u00c9-CONDI\u00c7\u00d5ES: - [Condi\u00e7\u00f5es que devem existir antes] FLUXO PRINCIPAL: 1. [Passo 1] 2. [Passo 2] 3. [Passo 3] FLUXOS ALTERNATIVOS: A1. [Condi\u00e7\u00e3o alternativa] A1.1. [Passo alternativo] A1.2. [Retorna ao passo X do fluxo principal] P\u00d3S-CONDI\u00c7\u00d5ES: - [Estado do sistema ap\u00f3s execu\u00e7\u00e3o] Exemplo completo: CASO DE USO: Realizar Login ATOR: Usuario do sistema OBJETIVO: Acessar \u00e1rea restrita do sistema PR\u00c9-CONDI\u00c7\u00d5ES: - Usu\u00e1rio possui conta ativa no sistema - Sistema est\u00e1 dispon\u00edvel FLUXO PRINCIPAL: 1. Usu\u00e1rio acessa p\u00e1gina de login 2. Sistema exibe formul\u00e1rio com campos email e senha 3. Usu\u00e1rio preenche email e senha 4. Usu\u00e1rio clica em \"Entrar\" 5. Sistema valida credenciais 6. Sistema redireciona para p\u00e1gina inicial 7. Caso de uso termina FLUXOS ALTERNATIVOS: A1. Credenciais inv\u00e1lidas (passo 5) A1.1. Sistema exibe mensagem \"Email ou senha incorretos\" A1.2. Retorna ao passo 2 A2. Conta bloqueada (passo 5) A2.1. Sistema exibe mensagem \"Conta temporariamente bloqueada\" A2.2. Sistema envia email com instru\u00e7\u00f5es de desbloqueio A2.3. Caso de uso termina P\u00d3S-CONDI\u00c7\u00d5ES: - Usu\u00e1rio est\u00e1 autenticado no sistema - Sess\u00e3o de usu\u00e1rio est\u00e1 ativa 7. Valida\u00e7\u00e3o e Verifica\u00e7\u00e3o 1. Diferen\u00e7a entre Valida\u00e7\u00e3o e Verifica\u00e7\u00e3o Verifica\u00e7\u00e3o: \"Estamos construindo o produto corretamente?\" T\u00e9cnica: Revis\u00f5es, inspe\u00e7\u00f5es, an\u00e1lise Foco: Consist\u00eancia interna dos requisitos Valida\u00e7\u00e3o: \"Estamos construindo o produto correto?\" T\u00e9cnica: Prot\u00f3tipos, testes com usu\u00e1rios Foco: Adequa\u00e7\u00e3o \u00e0s necessidades reais 2. T\u00e9cnicas de Verifica\u00e7\u00e3o Revis\u00e3o por Pares Outro analista revisa os requisitos Foco em clareza, completude e consist\u00eancia Use checklists padronizados Inspe\u00e7\u00e3o Formal Processo estruturado com pap\u00e9is definidos Moderador, autor, revisores, escriba M\u00e9tricas de defeitos encontrados An\u00e1lise de Depend\u00eancias Verificar se requisitos conflitam Identificar depend\u00eancias em cascata Usar matriz de rastreabilidade 3. T\u00e9cnicas de Valida\u00e7\u00e3o Prototipagem Tipos de prot\u00f3tipos: Papel: Sketches e wireframes Digital: Mockups interativos Funcionais: Vers\u00f5es simplificadas do sistema Vantagens: Feedback visual imediato Identifica problemas de usabilidade Valida fluxos de processo Cen\u00e1rios e Simula\u00e7\u00f5es Criar hist\u00f3rias de uso realistas Simular situa\u00e7\u00f5es de exce\u00e7\u00e3o Testar com dados reais (anonimizados) Revis\u00e3o com Stakeholders Apresentar requisitos em linguagem do neg\u00f3cio Usar exemplos concretos Documentar feedback e mudan\u00e7as 8. Casos Pr\u00e1ticos 1. Caso: Sistema de Biblioteca Contexto: Uma biblioteca universit\u00e1ria quer digitalizar seu sistema de empr\u00e9stimos. Stakeholders identificados: Bibliotec\u00e1rios (cadastro de livros, controle de empr\u00e9stimos) Estudantes (busca e reserva de livros) Professores (reservas priorit\u00e1rias) Administra\u00e7\u00e3o (relat\u00f3rios e multas) Processo de an\u00e1lise: Passo 1: Entrevistas iniciais Descobertas principais: Sistema atual \u00e9 manual com fichas Muitos livros s\u00e3o perdidos ou devolvidos em atraso Estudantes reclamam de n\u00e3o saber se livro est\u00e1 dispon\u00edvel Bibliotec\u00e1rios gastam muito tempo com controle manual Passo 2: Observa\u00e7\u00e3o do processo atual Insights: Processo de busca \u00e9 lento (catalogos f\u00edsicos) Renova\u00e7\u00f5es requerem ida f\u00edsica \u00e0 biblioteca Multas s\u00e3o calculadas manualmente e h\u00e1 erros Passo 3: Workshop de requisitos Prioriza\u00e7\u00f5es: MUST: Cat\u00e1logo online, controle de empr\u00e9stimos SHOULD: Reservas online, c\u00e1lculo autom\u00e1tico de multas COULD: Notifica\u00e7\u00f5es por email, integra\u00e7\u00e3o com sistema acad\u00eamico WON'T: Compra de livros online (fora do escopo) Requisitos resultantes: Funcionais: RF01: Sistema deve permitir busca de livros por t\u00edtulo, autor e assunto RF02: Sistema deve controlar empr\u00e9stimos com prazos por tipo de usu\u00e1rio RF03: Sistema deve calcular multas automaticamente por atraso RF04: Sistema deve permitir renova\u00e7\u00e3o online se n\u00e3o h\u00e1 reservas RF05: Sistema deve enviar notifica\u00e7\u00f5es de vencimento por email N\u00e3o-funcionais: RNF01: Busca deve retornar resultados em menos de 3 segundos RNF02: Sistema deve estar dispon\u00edvel 99% do tempo durante hor\u00e1rio de funcionamento RNF03: Interface deve ser acess\u00edvel para pessoas com defici\u00eancia visual RNF04: Deve integrar com sistema de autentica\u00e7\u00e3o da universidade Regras de neg\u00f3cio: RN01: Estudantes podem emprestar at\u00e9 3 livros por 15 dias RN02: Professores podem emprestar at\u00e9 10 livros por 30 dias RN03: Multa \u00e9 R$ 0,50 por dia de atraso RN04: Usu\u00e1rio com multa pendente n\u00e3o pode fazer novos empr\u00e9stimos 2. Caso: App de Delivery Contexto: Restaurante local quer criar app para delivery pr\u00f3prio. Stakeholders: Clientes (pedidos online) Cozinha (gerenciamento de pedidos) Entregadores (otimiza\u00e7\u00e3o de rotas) Ger\u00eancia (relat\u00f3rios e controle) Desafios encontrados: Cliente quer \"igual ao iFood\" mas com or\u00e7amento limitado Cozinha tem pouca familiaridade com tecnologia Entregadores usam apenas celular Ger\u00eancia quer muitos relat\u00f3rios diferentes Solu\u00e7\u00e3o de prioriza\u00e7\u00e3o: Usando t\u00e9cnica MoSCoW com or\u00e7amento fixo: MUST (70% do or\u00e7amento): Cat\u00e1logo de produtos Carrinho de compras Processamento de pedidos Painel simples para cozinha SHOULD (20% do or\u00e7amento): App para entregadores Notifica\u00e7\u00f5es push Hist\u00f3rico de pedidos COULD (10% do or\u00e7amento): Programa de fidelidade Avalia\u00e7\u00f5es de produtos WON'T (para vers\u00e3o 1): Integra\u00e7\u00e3o com redes sociais Chatbot de atendimento Relat\u00f3rios avan\u00e7ados 9. Erros Comuns e Como Evitar 1. Erros de Processo Erro: Pular a fase de descoberta Sintomas: Requisitos surgem durante desenvolvimento Stakeholders importantes s\u00e3o esquecidos Escopo cresce descontroladamente Como evitar: Sempre invista tempo em entender o contexto Mapeie stakeholders de forma sistem\u00e1tica Documente premissas e restri\u00e7\u00f5es Erro: N\u00e3o validar requisitos Sintomas: Sistema pronto n\u00e3o atende necessidades Usu\u00e1rios rejeitam a solu\u00e7\u00e3o Muito retrabalho ap\u00f3s deploy Como evitar: Crie prot\u00f3tipos cedo Valide requisitos com m\u00faltiplos stakeholders Use t\u00e9cnicas de feedback iterativo 2. Erros de Documenta\u00e7\u00e3o Erro: Requisitos amb\u00edguos Exemplos problem\u00e1ticos: \u274c \"Sistema deve ser r\u00e1pido\" \u274c \"Interface deve ser intuitiva\" \u274c \"Deve funcionar bem\" Como evitar: Use crit\u00e9rios mensur\u00e1veis Defina claramente termos vagos Inclua exemplos concretos Erro: Misturar requisitos com solu\u00e7\u00f5es Exemplo problem\u00e1tico: \u274c \"Sistema deve usar dropdown para sele\u00e7\u00e3o de pa\u00eds\" Corre\u00e7\u00e3o: \u2705 \"Sistema deve permitir sele\u00e7\u00e3o de pa\u00eds de forma r\u00e1pida e precisa\" 3. Erros de Comunica\u00e7\u00e3o Erro: Usar jarg\u00e3o t\u00e9cnico com usu\u00e1rios Como evitar: Adapte linguagem ao p\u00fablico Use exemplos do dia-a-dia Confirme entendimento constantemente Erro: N\u00e3o gerenciar expectativas Como evitar: Seja transparente sobre limita\u00e7\u00f5es Explique trade-offs de decis\u00f5es Documente mudan\u00e7as e impactos 10. Templates e Ferramentas 1. Template de Documento de Requisitos # DOCUMENTO DE REQUISITOS **Projeto:** [Nome do Projeto] **Vers\u00e3o:** [Vers\u00e3o] **Data:** [Data] **Autor:** [Nome do Analista] ## 1. INTRODU\u00c7\u00c3O ### 1.1 Objetivo do Documento ### 1.2 Escopo do Projeto ### 1.3 Stakeholders ### 1.4 Gloss\u00e1rio ## 2. VIS\u00c3O GERAL ### 2.1 Contexto do Neg\u00f3cio ### 2.2 Problema Atual ### 2.3 Solu\u00e7\u00e3o Proposta ### 2.4 Benef\u00edcios Esperados ## 3. REQUISITOS FUNCIONAIS [Para cada requisito:] - **ID:** RF001 - **T\u00edtulo:** [Nome descritivo] - **Descri\u00e7\u00e3o:** [Descri\u00e7\u00e3o detalhada] - **Prioridade:** [Alta/M\u00e9dia/Baixa] - **Crit\u00e9rios de Aceita\u00e7\u00e3o:** - CA001: [Crit\u00e9rio 1] - CA002: [Crit\u00e9rio 2] ## 4. REQUISITOS N\u00c3O-FUNCIONAIS [Organizado por categoria:] ### 4.1 Performance ### 4.2 Usabilidade ### 4.3 Seguran\u00e7a ### 4.4 Compatibilidade ## 5. REGRAS DE NEG\u00d3CIO [Lista numerada com regras claras] ## 6. RESTRI\u00c7\u00d5ES E LIMITA\u00c7\u00d5ES ### 6.1 T\u00e9cnicas ### 6.2 Or\u00e7ament\u00e1rias ### 6.3 Temporais ## 7. CASOS DE USO [Casos de uso detalhados para fluxos principais] ## 8. PROT\u00d3TIPOS E MOCKUPS [Links ou anexos com prot\u00f3tipos] ## 9. CRIT\u00c9RIOS DE ACEITA\u00c7\u00c3O DO PROJETO [Como saber que o projeto foi bem-sucedido] ## 10. RISCOS E MITIGA\u00c7\u00d5ES [Principais riscos identificados e planos de mitiga\u00e7\u00e3o] ## 11. APROVA\u00c7\u00d5ES [Se\u00e7\u00e3o para assinaturas dos stakeholders] 2. Checklist de Qualidade Antes de finalizar um requisito, verifique: Clareza Usa linguagem clara e objetiva? Evita jarg\u00f5es desnecess\u00e1rios? Pode ser entendido por n\u00e3o-t\u00e9cnicos? Completude Todas as informa\u00e7\u00f5es necess\u00e1rias est\u00e3o presentes? Condi\u00e7\u00f5es de exce\u00e7\u00e3o foram consideradas? Depend\u00eancias est\u00e3o documentadas? Consist\u00eancia N\u00e3o conflita com outros requisitos? Usa terminologia consistente? Segue padr\u00f5es do documento? Testabilidade \u00c9 poss\u00edvel verificar se foi implementado? Crit\u00e9rios de aceita\u00e7\u00e3o s\u00e3o mensur\u00e1veis? Comportamento esperado est\u00e1 claro? Viabilidade \u00c9 tecnicamente poss\u00edvel? Est\u00e1 dentro das restri\u00e7\u00f5es do projeto? Tempo/custo s\u00e3o razo\u00e1veis? 3. Ferramentas Recomendadas Para Documenta\u00e7\u00e3o Confluence: Documenta\u00e7\u00e3o colaborativa Notion: Organiza\u00e7\u00e3o flex\u00edvel de requisitos GitBook: Documenta\u00e7\u00e3o t\u00e9cnica estruturada Google Docs: Colabora\u00e7\u00e3o simples e feedback Para Prototipagem Figma: Design de interfaces e prot\u00f3tipos interativos InVision: Prot\u00f3tipos clic\u00e1veis Balsamiq: Wireframes r\u00e1pidos Draw.io: Diagramas e fluxos Para Gerenciamento Jira: Rastreamento de requisitos e issues Trello: Organiza\u00e7\u00e3o visual simples Azure DevOps: Gerenciamento completo de projeto Monday.com: Gest\u00e3o de projetos e requisitos Para Colabora\u00e7\u00e3o Miro: Workshops virtuais e brainstorming Slack: Comunica\u00e7\u00e3o da equipe Zoom: Entrevistas e reuni\u00f5es Loom: Grava\u00e7\u00e3o de explica\u00e7\u00f5es e demos Conclus\u00e3o A an\u00e1lise de requisitos \u00e9 uma disciplina que combina habilidades t\u00e9cnicas (documenta\u00e7\u00e3o, modelagem) com habilidades interpessoais (comunica\u00e7\u00e3o, negocia\u00e7\u00e3o). O sucesso nesta \u00e1rea vem da pr\u00e1tica constante e da capacidade de se adaptar a diferentes contextos e stakeholders. Lembre-se sempre: Foque no problema, n\u00e3o na solu\u00e7\u00e3o Comunique-se na linguagem do seu p\u00fablico Valide constantemente seu entendimento Documente decis\u00f5es e suas justificativas Seja iterativo e flex\u00edvel A qualidade dos requisitos determina diretamente o sucesso do projeto. Invista tempo nesta fase - \u00e9 o melhor ROI que voc\u00ea pode ter em desenvolvimento de software. Esta apostila serve como guia de refer\u00eancia durante as atividades pr\u00e1ticas de an\u00e1lise de requisitos. Consulte as se\u00e7\u00f5es relevantes conforme necessite durante a execu\u00e7\u00e3o dos projetos.","title":"Vis\u00e3o Geral"},{"location":"Requisitos/#analise-de-requisitos-guia-completo","text":"","title":"An\u00e1lise de Requisitos - Guia Completo"},{"location":"Requisitos/#sumario","text":"Introdu\u00e7\u00e3o Conceitos Fundamentais Tipos de Requisitos Processo de An\u00e1lise T\u00e9cnicas de Levantamento Documenta\u00e7\u00e3o de Requisitos Valida\u00e7\u00e3o e Verifica\u00e7\u00e3o Casos Pr\u00e1ticos Erros Comuns e Como Evitar Templates e Ferramentas","title":"Sum\u00e1rio"},{"location":"Requisitos/#1-introducao","text":"","title":"1. Introdu\u00e7\u00e3o"},{"location":"Requisitos/#o-que-e-analise-de-requisitos","text":"An\u00e1lise de Requisitos \u00e9 o processo de descobrir, analisar, documentar e verificar os servi\u00e7os requeridos de um sistema e as restri\u00e7\u00f5es sob as quais ele deve operar. \u00c9 a funda\u00e7\u00e3o de qualquer projeto de software bem-sucedido.","title":"O que \u00e9 An\u00e1lise de Requisitos?"},{"location":"Requisitos/#por-que-e-importante","text":"Estat\u00edsticas do setor mostram que: 70% dos projetos de software falham devido a requisitos mal definidos Corrigir um erro de requisito na fase de desenvolvimento custa 10x mais que na fase de an\u00e1lise Corrigir ap\u00f3s o deploy pode custar at\u00e9 100x mais Benef\u00edcios da boa an\u00e1lise: Reduz retrabalho e custos Melhora a satisfa\u00e7\u00e3o do cliente Diminui riscos do projeto Facilita estimativas precisas Melhora a qualidade do produto final","title":"Por que \u00e9 Importante?"},{"location":"Requisitos/#papel-do-analista-de-requisitos","text":"O analista atua como ponte entre: Stakeholders (quem define o que precisa ser feito) Equipe t\u00e9cnica (quem implementa a solu\u00e7\u00e3o) Responsabilidades principais: Entender o problema de neg\u00f3cio Identificar todos os stakeholders Extrair e documentar requisitos Validar entendimento com stakeholders Comunicar requisitos para a equipe t\u00e9cnica Gerenciar mudan\u00e7as nos requisitos","title":"Papel do Analista de Requisitos"},{"location":"Requisitos/#2-conceitos-fundamentais","text":"","title":"2. Conceitos Fundamentais"},{"location":"Requisitos/#requisito-vs-especificacao","text":"Requisito: O QUE o sistema deve fazer \"O sistema deve permitir login de usu\u00e1rios\" Especifica\u00e7\u00e3o: COMO o sistema deve fazer \"O login ser\u00e1 realizado atrav\u00e9s de formul\u00e1rio com campos email/senha, valida\u00e7\u00e3o no servidor via API REST, retorno de token JWT para autentica\u00e7\u00e3o\"","title":"Requisito vs. Especifica\u00e7\u00e3o"},{"location":"Requisitos/#stakeholders","text":"Defini\u00e7\u00e3o: Qualquer pessoa ou grupo que afeta ou \u00e9 afetado pelo sistema. Tipos de Stakeholders: Prim\u00e1rios: Usu\u00e1rios diretos do sistema Secund\u00e1rios: Afetados indiretamente (gerentes, suporte t\u00e9cnico) Chave: Tomadores de decis\u00e3o (sponsors, product owners) Sombra: Descobertos durante o projeto (auditores, reguladores) Exemplo pr\u00e1tico - Sistema de E-commerce: Prim\u00e1rios: Clientes, vendedores Secund\u00e1rios: Equipe de marketing, suporte ao cliente Chave: Gerente de produto, diretor comercial Sombra: \u00d3rg\u00e3os reguladores (PROCON), sistemas de pagamento","title":"Stakeholders"},{"location":"Requisitos/#problema-vs-solucao","text":"\u274c Foco na Solu\u00e7\u00e3o (Errado): \"O sistema precisa ter um bot\u00e3o vermelho no canto direito\" \u2705 Foco no Problema (Correto): \"Os usu\u00e1rios precisam de uma forma r\u00e1pida de sair do sistema em situa\u00e7\u00f5es de emerg\u00eancia\" Por que isso importa? Focar no problema permite m\u00faltiplas solu\u00e7\u00f5es Evita pre-concep\u00e7\u00f5es que limitam a criatividade Garante que a real necessidade seja atendida","title":"Problema vs. Solu\u00e7\u00e3o"},{"location":"Requisitos/#3-tipos-de-requisitos","text":"","title":"3. Tipos de Requisitos"},{"location":"Requisitos/#1-requisitos-funcionais-rf","text":"Defini\u00e7\u00e3o: Descrevem o que o sistema deve fazer - suas fun\u00e7\u00f5es e comportamentos. Caracter\u00edsticas: Sempre come\u00e7am com um verbo de a\u00e7\u00e3o S\u00e3o test\u00e1veis e mensur\u00e1veis Descrevem comportamento observ\u00e1vel Template: O sistema deve [A\u00c7\u00c3O] [OBJETO] [CONDI\u00c7\u00c3O] Exemplos: RF01: O sistema deve autenticar usu\u00e1rios atrav\u00e9s de email e senha RF02: O sistema deve gerar relat\u00f3rio de vendas mensais RF03: O sistema deve enviar notifica\u00e7\u00e3o por email quando o estoque estiver baixo RF04: O sistema deve permitir cancelamento de pedidos em at\u00e9 24 horas","title":"1. Requisitos Funcionais (RF)"},{"location":"Requisitos/#2-requisitos-nao-funcionais-rnf","text":"Defini\u00e7\u00e3o: Descrevem como o sistema deve funcionar - qualidades e restri\u00e7\u00f5es. Principais Categorias: Performance Tempo de resposta: \"P\u00e1ginas devem carregar em menos de 2 segundos\" Throughput: \"Sistema deve suportar 1000 usu\u00e1rios simult\u00e2neos\" Capacidade: \"Banco deve armazenar 1 milh\u00e3o de registros\" Usabilidade Facilidade de uso: \"Usu\u00e1rio deve conseguir fazer uma compra em menos de 3 cliques\" Acessibilidade: \"Interface deve seguir padr\u00f5es WCAG 2.1\" Aprendizagem: \"Novos usu\u00e1rios devem completar primeira tarefa em menos de 5 minutos\" Confiabilidade Disponibilidade: \"Sistema deve ter 99.9% de uptime\" Recupera\u00e7\u00e3o: \"Sistema deve se recuperar de falhas em menos de 30 segundos\" Precis\u00e3o: \"C\u00e1lculos financeiros devem ter precis\u00e3o de 2 casas decimais\" Seguran\u00e7a Autentica\u00e7\u00e3o: \"Senhas devem ter m\u00ednimo 8 caracteres com s\u00edmbolos\" Autoriza\u00e7\u00e3o: \"Apenas administradores podem deletar usu\u00e1rios\" Criptografia: \"Dados sens\u00edveis devem ser criptografados em repouso\" Compatibilidade Plataformas: \"Deve funcionar em Chrome, Firefox, Safari e Edge\" Dispositivos: \"Interface deve ser responsiva para desktop e mobile\" Sistemas: \"Deve integrar com sistemas SAP existentes\" Exemplo Completo - Sistema de Blog: Requisitos Funcionais: RF01: O sistema deve permitir cria\u00e7\u00e3o de posts RF02: O sistema deve permitir coment\u00e1rios em posts RF03: O sistema deve permitir busca por t\u00edtulo e conte\u00fado Requisitos N\u00e3o-Funcionais: RNF01: Interface deve carregar em menos de 3 segundos (Performance) RNF02: Deve funcionar em dispositivos m\u00f3veis (Compatibilidade) RNF03: Apenas autores podem editar seus pr\u00f3prios posts (Seguran\u00e7a)","title":"2. Requisitos N\u00e3o-Funcionais (RNF)"},{"location":"Requisitos/#3-regras-de-negocio","text":"Defini\u00e7\u00e3o: Pol\u00edticas, regulamenta\u00e7\u00f5es ou princ\u00edpios que governam como a organiza\u00e7\u00e3o opera. Caracter\u00edsticas: Existem independente do sistema Podem mudar ao longo do tempo Influenciam m\u00faltiplos requisitos Exemplos: RN01: Desconto m\u00e1ximo permitido \u00e9 20% RN02: Pedidos acima de R$ 100 t\u00eam frete gr\u00e1tis RN03: Usu\u00e1rios menores de 18 anos n\u00e3o podem comprar bebidas alco\u00f3licas","title":"3. Regras de Neg\u00f3cio"},{"location":"Requisitos/#4-processo-de-analise","text":"","title":"4. Processo de An\u00e1lise"},{"location":"Requisitos/#1-fases-do-processo","text":"Fase 1: Descoberta Objetivo: Entender o contexto e identificar stakeholders Atividades: Estudar documentos existentes Identificar todos os stakeholders Entender o dom\u00ednio do problema Definir escopo inicial Entregas: Lista de stakeholders Gloss\u00e1rio de termos do dom\u00ednio Documento de contexto Fase 2: Elicita\u00e7\u00e3o Objetivo: Extrair requisitos dos stakeholders Atividades: Realizar entrevistas Conduzir workshops Observar processos atuais Analisar sistemas similares Entregas: Requisitos brutos (n\u00e3o organizados) Atas de reuni\u00f5es Artefatos de processo atual Fase 3: An\u00e1lise Objetivo: Organizar, priorizar e refinar requisitos Atividades: Categorizar requisitos Identificar depend\u00eancias Resolver conflitos Priorizar requisitos Entregas: Lista priorizada de requisitos Matriz de depend\u00eancias Log de decis\u00f5es Fase 4: Especifica\u00e7\u00e3o Objetivo: Documentar requisitos de forma clara e precisa Atividades: Escrever requisitos usando templates Criar casos de uso Definir crit\u00e9rios de aceita\u00e7\u00e3o Revisar documenta\u00e7\u00e3o Entregas: Documento de requisitos Casos de uso Crit\u00e9rios de aceita\u00e7\u00e3o Fase 5: Valida\u00e7\u00e3o Objetivo: Confirmar que requisitos est\u00e3o corretos Atividades: Revisar com stakeholders Criar prot\u00f3tipos Realizar testes de conceito Aprova\u00e7\u00e3o formal Entregas: Requisitos aprovados Prot\u00f3tipos validados Atas de aprova\u00e7\u00e3o","title":"1. Fases do Processo"},{"location":"Requisitos/#2-ciclo-iterativo","text":"Importante: O processo N\u00c3O \u00e9 linear. \u00c9 comum voltar a fases anteriores quando: Novos stakeholders s\u00e3o descobertos Requisitos conflitantes s\u00e3o identificados Mudan\u00e7as no contexto ocorrem Feedback dos usu\u00e1rios \u00e9 recebido","title":"2. Ciclo Iterativo"},{"location":"Requisitos/#5-tecnicas-de-levantamento","text":"","title":"5. T\u00e9cnicas de Levantamento"},{"location":"Requisitos/#1-entrevistas","text":"Quando usar: In\u00edcio do projeto para entender contexto geral Quando precisar de informa\u00e7\u00f5es detalhadas Para esclarecer requisitos conflitantes Como conduzir: Prepara\u00e7\u00e3o: Pesquise sobre o entrevistado e seu papel Prepare roteiro com perguntas abertas Agende em hor\u00e1rio conveniente Tenha ferramentas de registro (gravador, notas) Durante a entrevista: Comece com perguntas contextuais Use t\u00e9cnicas de escuta ativa Fa\u00e7a perguntas de esclarecimento Evite induzir respostas Ap\u00f3s a entrevista: Transcreva anota\u00e7\u00f5es imediatamente Envie resumo para valida\u00e7\u00e3o Identifique pontos que precisam de esclarecimento Exemplo de roteiro: ENTREVISTA - GERENTE DE VENDAS Objetivo: Entender processo atual de vendas 1. CONTEXTO 1. Pode me descrever um dia t\u00edpico seu? 1. Quais s\u00e3o seus principais desafios? 2. PROCESSO ATUAL 1. Como voc\u00eas fazem vendas hoje? 1. Que ferramentas utilizam? 1. Onde voc\u00eas sentem mais dificuldade? 3. NECESSIDADES 1. O que gostaria que fosse diferente? 1. Se pudesse ter uma varinha m\u00e1gica, o que mudaria? 4. CRIT\u00c9RIOS DE SUCESSO - Como saberia que o novo sistema est\u00e1 funcionando? - Que m\u00e9tricas s\u00e3o importantes para voc\u00ea?","title":"1. Entrevistas"},{"location":"Requisitos/#2-observacao","text":"Quando usar: Para entender processos complexos Quando h\u00e1 diferen\u00e7a entre o que dizem e fazem Para identificar necessidades n\u00e3o verbalizadas T\u00e9cnicas: Shadowing: Acompanhar usu\u00e1rio durante trabalho Fly on the wall: Observar sem interferir Contextual inquiry: Observar e fazer perguntas Exemplo pr\u00e1tico: Observando um atendente de call center, voc\u00ea pode descobrir que ele usa uma planilha Excel paralela ao sistema oficial porque o sistema \u00e9 muito lento. Isso revela requisitos de performance que n\u00e3o seriam mencionados em entrevista.","title":"2. Observa\u00e7\u00e3o"},{"location":"Requisitos/#3-workshops","text":"Quando usar: Para alinhar vis\u00f5es de m\u00faltiplos stakeholders Para resolver conflitos de requisitos Para brainstorming de solu\u00e7\u00f5es Estrutura t\u00edpica: Abertura (15 min): Objetivos e regras Contexto (30 min): Apresenta\u00e7\u00e3o do problema Diverg\u00eancia (60 min): Levantamento de ideias Converg\u00eancia (45 min): Organiza\u00e7\u00e3o e prioriza\u00e7\u00e3o Fechamento (15 min): Pr\u00f3ximos passos","title":"3. Workshops"},{"location":"Requisitos/#4-analise-de-documentos","text":"Documentos \u00fateis: Manuais de processo existentes Regulamenta\u00e7\u00f5es e normas Sistemas similares Reclama\u00e7\u00f5es de usu\u00e1rios Dados de uso de sistemas atuais","title":"4. An\u00e1lise de Documentos"},{"location":"Requisitos/#5-questionarios","text":"Quando usar: Para coletar dados de muitas pessoas Para validar prioridades Para coletar feedback sobre prot\u00f3tipos Tipos de perguntas: Fechadas: Para dados quantitativos Abertas: Para insights qualitativos Escala: Para medir intensidade de opini\u00f5es","title":"5. Question\u00e1rios"},{"location":"Requisitos/#6-documentacao-de-requisitos","text":"","title":"6. Documenta\u00e7\u00e3o de Requisitos"},{"location":"Requisitos/#1-caracteristicas-de-bons-requisitos","text":"Mnem\u00f4nico: CORRECT C ompletos: Toda informa\u00e7\u00e3o necess\u00e1ria est\u00e1 presente C orretos: Livres de erros R astre\u00e1veis: Podem ser ligados \u00e0 origem e implementa\u00e7\u00e3o R elevantes: Importantes para o sucesso do projeto E spec\u00edficos: N\u00e3o amb\u00edguos C onsistentes: N\u00e3o conflitam entre si T est\u00e1veis: Podem ser verificados","title":"1. Caracter\u00edsticas de Bons Requisitos"},{"location":"Requisitos/#2-escrevendo-requisitos-funcionais","text":"Template b\u00e1sico: O sistema deve [A\u00c7\u00c3O] [OBJETO] [CONDI\u00c7\u00c3O/RESTRI\u00c7\u00c3O] Exemplos bem escritos: \u2705 \"O sistema deve enviar email de confirma\u00e7\u00e3o ao usu\u00e1rio dentro de 5 minutos ap\u00f3s o cadastro\" \u2705 \"O sistema deve permitir cancelamento de pedidos apenas se o status for 'Aguardando pagamento'\" Exemplos mal escritos: \u274c \"O sistema deve ser r\u00e1pido\" (muito vago) \u274c \"O sistema deve ter uma tela bonita\" (subjetivo) \u274c \"O sistema deve usar banco MySQL\" (solu\u00e7\u00e3o, n\u00e3o requisito)","title":"2. Escrevendo Requisitos Funcionais"},{"location":"Requisitos/#3-criterios-de-aceitacao","text":"Defini\u00e7\u00e3o: Condi\u00e7\u00f5es espec\u00edficas que devem ser atendidas para que um requisito seja considerado implementado corretamente. Formato Given-When-Then: DADO QUE [contexto inicial] QUANDO [a\u00e7\u00e3o \u00e9 executada] ENT\u00c3O [resultado esperado] Exemplo: RF05: O sistema deve validar CPF do usu\u00e1rio Crit\u00e9rios de Aceita\u00e7\u00e3o: CA01: DADO QUE usu\u00e1rio informa CPF v\u00e1lido QUANDO submete formul\u00e1rio de cadastro ENT\u00c3O cadastro deve ser aceito CA02: DADO QUE usu\u00e1rio informa CPF inv\u00e1lido QUANDO submete formul\u00e1rio de cadastro ENT\u00c3O deve exibir mensagem \"CPF inv\u00e1lido\" CA03: DADO QUE usu\u00e1rio n\u00e3o informa CPF QUANDO submete formul\u00e1rio de cadastro ENT\u00c3O deve exibir mensagem \"CPF \u00e9 obrigat\u00f3rio\"","title":"3. Crit\u00e9rios de Aceita\u00e7\u00e3o"},{"location":"Requisitos/#4-casos-de-uso","text":"Quando usar: Para descrever intera\u00e7\u00f5es complexas Para mostrar fluxos alternativos Para documentar regras de neg\u00f3cio Template de Caso de Uso: CASO DE USO: [Nome] ATOR: [Quem executa] OBJETIVO: [O que quer alcan\u00e7ar] PR\u00c9-CONDI\u00c7\u00d5ES: - [Condi\u00e7\u00f5es que devem existir antes] FLUXO PRINCIPAL: 1. [Passo 1] 2. [Passo 2] 3. [Passo 3] FLUXOS ALTERNATIVOS: A1. [Condi\u00e7\u00e3o alternativa] A1.1. [Passo alternativo] A1.2. [Retorna ao passo X do fluxo principal] P\u00d3S-CONDI\u00c7\u00d5ES: - [Estado do sistema ap\u00f3s execu\u00e7\u00e3o] Exemplo completo: CASO DE USO: Realizar Login ATOR: Usuario do sistema OBJETIVO: Acessar \u00e1rea restrita do sistema PR\u00c9-CONDI\u00c7\u00d5ES: - Usu\u00e1rio possui conta ativa no sistema - Sistema est\u00e1 dispon\u00edvel FLUXO PRINCIPAL: 1. Usu\u00e1rio acessa p\u00e1gina de login 2. Sistema exibe formul\u00e1rio com campos email e senha 3. Usu\u00e1rio preenche email e senha 4. Usu\u00e1rio clica em \"Entrar\" 5. Sistema valida credenciais 6. Sistema redireciona para p\u00e1gina inicial 7. Caso de uso termina FLUXOS ALTERNATIVOS: A1. Credenciais inv\u00e1lidas (passo 5) A1.1. Sistema exibe mensagem \"Email ou senha incorretos\" A1.2. Retorna ao passo 2 A2. Conta bloqueada (passo 5) A2.1. Sistema exibe mensagem \"Conta temporariamente bloqueada\" A2.2. Sistema envia email com instru\u00e7\u00f5es de desbloqueio A2.3. Caso de uso termina P\u00d3S-CONDI\u00c7\u00d5ES: - Usu\u00e1rio est\u00e1 autenticado no sistema - Sess\u00e3o de usu\u00e1rio est\u00e1 ativa","title":"4. Casos de Uso"},{"location":"Requisitos/#7-validacao-e-verificacao","text":"","title":"7. Valida\u00e7\u00e3o e Verifica\u00e7\u00e3o"},{"location":"Requisitos/#1-diferenca-entre-validacao-e-verificacao","text":"Verifica\u00e7\u00e3o: \"Estamos construindo o produto corretamente?\" T\u00e9cnica: Revis\u00f5es, inspe\u00e7\u00f5es, an\u00e1lise Foco: Consist\u00eancia interna dos requisitos Valida\u00e7\u00e3o: \"Estamos construindo o produto correto?\" T\u00e9cnica: Prot\u00f3tipos, testes com usu\u00e1rios Foco: Adequa\u00e7\u00e3o \u00e0s necessidades reais","title":"1. Diferen\u00e7a entre Valida\u00e7\u00e3o e Verifica\u00e7\u00e3o"},{"location":"Requisitos/#2-tecnicas-de-verificacao","text":"Revis\u00e3o por Pares Outro analista revisa os requisitos Foco em clareza, completude e consist\u00eancia Use checklists padronizados Inspe\u00e7\u00e3o Formal Processo estruturado com pap\u00e9is definidos Moderador, autor, revisores, escriba M\u00e9tricas de defeitos encontrados An\u00e1lise de Depend\u00eancias Verificar se requisitos conflitam Identificar depend\u00eancias em cascata Usar matriz de rastreabilidade","title":"2. T\u00e9cnicas de Verifica\u00e7\u00e3o"},{"location":"Requisitos/#3-tecnicas-de-validacao","text":"Prototipagem Tipos de prot\u00f3tipos: Papel: Sketches e wireframes Digital: Mockups interativos Funcionais: Vers\u00f5es simplificadas do sistema Vantagens: Feedback visual imediato Identifica problemas de usabilidade Valida fluxos de processo Cen\u00e1rios e Simula\u00e7\u00f5es Criar hist\u00f3rias de uso realistas Simular situa\u00e7\u00f5es de exce\u00e7\u00e3o Testar com dados reais (anonimizados) Revis\u00e3o com Stakeholders Apresentar requisitos em linguagem do neg\u00f3cio Usar exemplos concretos Documentar feedback e mudan\u00e7as","title":"3. T\u00e9cnicas de Valida\u00e7\u00e3o"},{"location":"Requisitos/#8-casos-praticos","text":"","title":"8. Casos Pr\u00e1ticos"},{"location":"Requisitos/#1-caso-sistema-de-biblioteca","text":"Contexto: Uma biblioteca universit\u00e1ria quer digitalizar seu sistema de empr\u00e9stimos. Stakeholders identificados: Bibliotec\u00e1rios (cadastro de livros, controle de empr\u00e9stimos) Estudantes (busca e reserva de livros) Professores (reservas priorit\u00e1rias) Administra\u00e7\u00e3o (relat\u00f3rios e multas) Processo de an\u00e1lise: Passo 1: Entrevistas iniciais Descobertas principais: Sistema atual \u00e9 manual com fichas Muitos livros s\u00e3o perdidos ou devolvidos em atraso Estudantes reclamam de n\u00e3o saber se livro est\u00e1 dispon\u00edvel Bibliotec\u00e1rios gastam muito tempo com controle manual Passo 2: Observa\u00e7\u00e3o do processo atual Insights: Processo de busca \u00e9 lento (catalogos f\u00edsicos) Renova\u00e7\u00f5es requerem ida f\u00edsica \u00e0 biblioteca Multas s\u00e3o calculadas manualmente e h\u00e1 erros Passo 3: Workshop de requisitos Prioriza\u00e7\u00f5es: MUST: Cat\u00e1logo online, controle de empr\u00e9stimos SHOULD: Reservas online, c\u00e1lculo autom\u00e1tico de multas COULD: Notifica\u00e7\u00f5es por email, integra\u00e7\u00e3o com sistema acad\u00eamico WON'T: Compra de livros online (fora do escopo) Requisitos resultantes: Funcionais: RF01: Sistema deve permitir busca de livros por t\u00edtulo, autor e assunto RF02: Sistema deve controlar empr\u00e9stimos com prazos por tipo de usu\u00e1rio RF03: Sistema deve calcular multas automaticamente por atraso RF04: Sistema deve permitir renova\u00e7\u00e3o online se n\u00e3o h\u00e1 reservas RF05: Sistema deve enviar notifica\u00e7\u00f5es de vencimento por email N\u00e3o-funcionais: RNF01: Busca deve retornar resultados em menos de 3 segundos RNF02: Sistema deve estar dispon\u00edvel 99% do tempo durante hor\u00e1rio de funcionamento RNF03: Interface deve ser acess\u00edvel para pessoas com defici\u00eancia visual RNF04: Deve integrar com sistema de autentica\u00e7\u00e3o da universidade Regras de neg\u00f3cio: RN01: Estudantes podem emprestar at\u00e9 3 livros por 15 dias RN02: Professores podem emprestar at\u00e9 10 livros por 30 dias RN03: Multa \u00e9 R$ 0,50 por dia de atraso RN04: Usu\u00e1rio com multa pendente n\u00e3o pode fazer novos empr\u00e9stimos","title":"1. Caso: Sistema de Biblioteca"},{"location":"Requisitos/#2-caso-app-de-delivery","text":"Contexto: Restaurante local quer criar app para delivery pr\u00f3prio. Stakeholders: Clientes (pedidos online) Cozinha (gerenciamento de pedidos) Entregadores (otimiza\u00e7\u00e3o de rotas) Ger\u00eancia (relat\u00f3rios e controle) Desafios encontrados: Cliente quer \"igual ao iFood\" mas com or\u00e7amento limitado Cozinha tem pouca familiaridade com tecnologia Entregadores usam apenas celular Ger\u00eancia quer muitos relat\u00f3rios diferentes Solu\u00e7\u00e3o de prioriza\u00e7\u00e3o: Usando t\u00e9cnica MoSCoW com or\u00e7amento fixo: MUST (70% do or\u00e7amento): Cat\u00e1logo de produtos Carrinho de compras Processamento de pedidos Painel simples para cozinha SHOULD (20% do or\u00e7amento): App para entregadores Notifica\u00e7\u00f5es push Hist\u00f3rico de pedidos COULD (10% do or\u00e7amento): Programa de fidelidade Avalia\u00e7\u00f5es de produtos WON'T (para vers\u00e3o 1): Integra\u00e7\u00e3o com redes sociais Chatbot de atendimento Relat\u00f3rios avan\u00e7ados","title":"2. Caso: App de Delivery"},{"location":"Requisitos/#9-erros-comuns-e-como-evitar","text":"","title":"9. Erros Comuns e Como Evitar"},{"location":"Requisitos/#1-erros-de-processo","text":"Erro: Pular a fase de descoberta Sintomas: Requisitos surgem durante desenvolvimento Stakeholders importantes s\u00e3o esquecidos Escopo cresce descontroladamente Como evitar: Sempre invista tempo em entender o contexto Mapeie stakeholders de forma sistem\u00e1tica Documente premissas e restri\u00e7\u00f5es Erro: N\u00e3o validar requisitos Sintomas: Sistema pronto n\u00e3o atende necessidades Usu\u00e1rios rejeitam a solu\u00e7\u00e3o Muito retrabalho ap\u00f3s deploy Como evitar: Crie prot\u00f3tipos cedo Valide requisitos com m\u00faltiplos stakeholders Use t\u00e9cnicas de feedback iterativo","title":"1. Erros de Processo"},{"location":"Requisitos/#2-erros-de-documentacao","text":"Erro: Requisitos amb\u00edguos Exemplos problem\u00e1ticos: \u274c \"Sistema deve ser r\u00e1pido\" \u274c \"Interface deve ser intuitiva\" \u274c \"Deve funcionar bem\" Como evitar: Use crit\u00e9rios mensur\u00e1veis Defina claramente termos vagos Inclua exemplos concretos Erro: Misturar requisitos com solu\u00e7\u00f5es Exemplo problem\u00e1tico: \u274c \"Sistema deve usar dropdown para sele\u00e7\u00e3o de pa\u00eds\" Corre\u00e7\u00e3o: \u2705 \"Sistema deve permitir sele\u00e7\u00e3o de pa\u00eds de forma r\u00e1pida e precisa\"","title":"2. Erros de Documenta\u00e7\u00e3o"},{"location":"Requisitos/#3-erros-de-comunicacao","text":"Erro: Usar jarg\u00e3o t\u00e9cnico com usu\u00e1rios Como evitar: Adapte linguagem ao p\u00fablico Use exemplos do dia-a-dia Confirme entendimento constantemente Erro: N\u00e3o gerenciar expectativas Como evitar: Seja transparente sobre limita\u00e7\u00f5es Explique trade-offs de decis\u00f5es Documente mudan\u00e7as e impactos","title":"3. Erros de Comunica\u00e7\u00e3o"},{"location":"Requisitos/#10-templates-e-ferramentas","text":"","title":"10. Templates e Ferramentas"},{"location":"Requisitos/#1-template-de-documento-de-requisitos","text":"# DOCUMENTO DE REQUISITOS **Projeto:** [Nome do Projeto] **Vers\u00e3o:** [Vers\u00e3o] **Data:** [Data] **Autor:** [Nome do Analista] ## 1. INTRODU\u00c7\u00c3O ### 1.1 Objetivo do Documento ### 1.2 Escopo do Projeto ### 1.3 Stakeholders ### 1.4 Gloss\u00e1rio ## 2. VIS\u00c3O GERAL ### 2.1 Contexto do Neg\u00f3cio ### 2.2 Problema Atual ### 2.3 Solu\u00e7\u00e3o Proposta ### 2.4 Benef\u00edcios Esperados ## 3. REQUISITOS FUNCIONAIS [Para cada requisito:] - **ID:** RF001 - **T\u00edtulo:** [Nome descritivo] - **Descri\u00e7\u00e3o:** [Descri\u00e7\u00e3o detalhada] - **Prioridade:** [Alta/M\u00e9dia/Baixa] - **Crit\u00e9rios de Aceita\u00e7\u00e3o:** - CA001: [Crit\u00e9rio 1] - CA002: [Crit\u00e9rio 2] ## 4. REQUISITOS N\u00c3O-FUNCIONAIS [Organizado por categoria:] ### 4.1 Performance ### 4.2 Usabilidade ### 4.3 Seguran\u00e7a ### 4.4 Compatibilidade ## 5. REGRAS DE NEG\u00d3CIO [Lista numerada com regras claras] ## 6. RESTRI\u00c7\u00d5ES E LIMITA\u00c7\u00d5ES ### 6.1 T\u00e9cnicas ### 6.2 Or\u00e7ament\u00e1rias ### 6.3 Temporais ## 7. CASOS DE USO [Casos de uso detalhados para fluxos principais] ## 8. PROT\u00d3TIPOS E MOCKUPS [Links ou anexos com prot\u00f3tipos] ## 9. CRIT\u00c9RIOS DE ACEITA\u00c7\u00c3O DO PROJETO [Como saber que o projeto foi bem-sucedido] ## 10. RISCOS E MITIGA\u00c7\u00d5ES [Principais riscos identificados e planos de mitiga\u00e7\u00e3o] ## 11. APROVA\u00c7\u00d5ES [Se\u00e7\u00e3o para assinaturas dos stakeholders]","title":"1. Template de Documento de Requisitos"},{"location":"Requisitos/#2-checklist-de-qualidade","text":"Antes de finalizar um requisito, verifique: Clareza Usa linguagem clara e objetiva? Evita jarg\u00f5es desnecess\u00e1rios? Pode ser entendido por n\u00e3o-t\u00e9cnicos? Completude Todas as informa\u00e7\u00f5es necess\u00e1rias est\u00e3o presentes? Condi\u00e7\u00f5es de exce\u00e7\u00e3o foram consideradas? Depend\u00eancias est\u00e3o documentadas? Consist\u00eancia N\u00e3o conflita com outros requisitos? Usa terminologia consistente? Segue padr\u00f5es do documento? Testabilidade \u00c9 poss\u00edvel verificar se foi implementado? Crit\u00e9rios de aceita\u00e7\u00e3o s\u00e3o mensur\u00e1veis? Comportamento esperado est\u00e1 claro? Viabilidade \u00c9 tecnicamente poss\u00edvel? Est\u00e1 dentro das restri\u00e7\u00f5es do projeto? Tempo/custo s\u00e3o razo\u00e1veis?","title":"2. Checklist de Qualidade"},{"location":"Requisitos/#3-ferramentas-recomendadas","text":"Para Documenta\u00e7\u00e3o Confluence: Documenta\u00e7\u00e3o colaborativa Notion: Organiza\u00e7\u00e3o flex\u00edvel de requisitos GitBook: Documenta\u00e7\u00e3o t\u00e9cnica estruturada Google Docs: Colabora\u00e7\u00e3o simples e feedback Para Prototipagem Figma: Design de interfaces e prot\u00f3tipos interativos InVision: Prot\u00f3tipos clic\u00e1veis Balsamiq: Wireframes r\u00e1pidos Draw.io: Diagramas e fluxos Para Gerenciamento Jira: Rastreamento de requisitos e issues Trello: Organiza\u00e7\u00e3o visual simples Azure DevOps: Gerenciamento completo de projeto Monday.com: Gest\u00e3o de projetos e requisitos Para Colabora\u00e7\u00e3o Miro: Workshops virtuais e brainstorming Slack: Comunica\u00e7\u00e3o da equipe Zoom: Entrevistas e reuni\u00f5es Loom: Grava\u00e7\u00e3o de explica\u00e7\u00f5es e demos","title":"3. Ferramentas Recomendadas"},{"location":"Requisitos/#conclusao","text":"A an\u00e1lise de requisitos \u00e9 uma disciplina que combina habilidades t\u00e9cnicas (documenta\u00e7\u00e3o, modelagem) com habilidades interpessoais (comunica\u00e7\u00e3o, negocia\u00e7\u00e3o). O sucesso nesta \u00e1rea vem da pr\u00e1tica constante e da capacidade de se adaptar a diferentes contextos e stakeholders. Lembre-se sempre: Foque no problema, n\u00e3o na solu\u00e7\u00e3o Comunique-se na linguagem do seu p\u00fablico Valide constantemente seu entendimento Documente decis\u00f5es e suas justificativas Seja iterativo e flex\u00edvel A qualidade dos requisitos determina diretamente o sucesso do projeto. Invista tempo nesta fase - \u00e9 o melhor ROI que voc\u00ea pode ter em desenvolvimento de software. Esta apostila serve como guia de refer\u00eancia durante as atividades pr\u00e1ticas de an\u00e1lise de requisitos. Consulte as se\u00e7\u00f5es relevantes conforme necessite durante a execu\u00e7\u00e3o dos projetos.","title":"Conclus\u00e3o"},{"location":"Ts/Plano%20de%20Estudos/","text":"Plano de Estudos TypeScript - 30 Dias Do Iniciante ao Intermedi\u00e1rio Estrutura do Plano Dura\u00e7\u00e3o : 30 dias (1h30 por dia) Tempo por sess\u00e3o : 35min teoria + 45min pr\u00e1tica + 10min documenta\u00e7\u00e3o Metodologia : Progress\u00e3o incremental com projetos pr\u00e1ticos Objetivo : Dominar TypeScript intermedi\u00e1rio com foco em classes, tipagens robustas e patterns arquiteturais SEMANA 1: Fundamentos Cr\u00edticos e Classes Dia 1: Classes Fundamentais Teoria : Constructor, properties, methods, access modifiers Pr\u00e1tica : Criar classe User com valida\u00e7\u00f5es Exerc\u00edcio : class DatabaseConnection { constructor(url: string); constructor(host: string, port: number, database: string); // A implementa\u00e7\u00e3o real lida com ambas as assinaturas constructor(arg1: string, arg2?: number, arg3?: string) { // ... l\u00f3gica para diferenciar os construtores } } Documenta\u00e7\u00e3o : Classes - TypeScript Handbook Dia 2: Context do this - Parte 1 Teoria : this binding, arrow functions vs regular functions Pr\u00e1tica : Implementar m\u00e9todo de chaining type-safe Exerc\u00edcio : Resolver problemas de this context em callbacks class QueryBuilder { private query: string = ''; where(condition: string): this { this.query += ` WHERE ${condition}`; return this; } orderBy(field: string): this { this.query += ` ORDER BY ${field}`; return this; } } Documenta\u00e7\u00e3o : This Types Dia 3: Eliminando any - Parte 1 Teoria : unknown vs any , type assertions seguras Pr\u00e1tica : Refatorar c\u00f3digo com any para tipagens seguras Exerc\u00edcio : Implementar fun\u00e7\u00e3o de parsing de JSON type-safe function safeJsonParse<T>(json: string): T | Error { try { return JSON.parse(json) as T; } catch (e) { return new Error('Failed to parse JSON'); } } Documenta\u00e7\u00e3o : Unknown Type Dia 4: Type Guards e Narrowing Teoria : typeof , instanceof , custom type guards Pr\u00e1tica : Criar type guards para valida\u00e7\u00e3o de dados da API Exerc\u00edcio : Implementar type guards para discriminated unions type SuccessResponse = { status: 'success', data: any }; type ErrorResponse = { status: 'error', message: string }; type ApiResponse = SuccessResponse | ErrorResponse; function isSuccessResponse(response: ApiResponse): response is SuccessResponse { return response.status === 'success'; } Documenta\u00e7\u00e3o : Narrowing Dia 5: Utility Types Nativos - Record e B\u00e1sicos Teoria : Record<K,V> , Pick , Omit , Partial , Required Pr\u00e1tica : Criar sistema de configura\u00e7\u00e3o type-safe Exerc\u00edcio : Implementar mapeamento como seu exemplo: const tooltipContent: Record<string, string> = { [columnType.YIELD]: 'min_fare.table.tooltips.yield', }; Documenta\u00e7\u00e3o : Utility Types Dia 6: Template Literal Types Teoria : Template literals, key remapping Pr\u00e1tica : Criar sistema de rotas type-safe Exerc\u00edcio : Implementar auto-complete para caminhos de API type ApiRoutes = `/api/${'users' | 'posts'}/${string}`; Documenta\u00e7\u00e3o : Template Literal Types Dia 7: Project Mini #1 Pr\u00e1tica Intensiva : Implementar classe BaseRepository combinando todos os conceitos - Classes com generics - Type guards para valida\u00e7\u00e3o - Methods com this return para chaining - Utility types para opera\u00e7\u00f5es CRUD SEMANA 2: Classes Avan\u00e7adas e Generics Dia 8: Heran\u00e7a e Abstract Classes Teoria : extends , super , abstract methods e properties Pr\u00e1tica : Implementar hierarquia de classes para diferentes tipos de usu\u00e1rios Exerc\u00edcio : Criar abstract class similar ao seu GetTableDataService abstract class BaseService<TResponse, TParams> { abstract handle(params: TParams): Promise<TResponse>; } Documenta\u00e7\u00e3o : Abstract Classes Dia 9: Generics em Classes Teoria : Generic constraints, multiple type parameters, default types Pr\u00e1tica : Criar sistema de cache gen\u00e9rico type-safe Exerc\u00edcio : Implementar DataService<T extends BaseEntity, K extends keyof T> Documenta\u00e7\u00e3o : Generics Dia 10: Context this - Parte 2 Avan\u00e7ada Teoria : this parameters, ThisType<T> , this em generics Pr\u00e1tica : Implementar fluent API com tipagem correta do this Exerc\u00edcio : Criar builder pattern type-safe class FormBuilder<T> { private data: Partial<T> = {}; field<K extends keyof T>(name: K, value: T[K]): FormBuilder<T> { this.data[name] = value; return this; } build(): T { return this.data as T; } } Documenta\u00e7\u00e3o : This Parameters Dia 11: Decorators Teoria : Method decorators, property decorators, metadata Pr\u00e1tica : Criar sistema de valida\u00e7\u00e3o com decorators Exerc\u00edcio : Implementar @validate , @cache , @log decorators Documenta\u00e7\u00e3o : Decorators Dia 12: Eliminando any - Parte 2 Teoria : never type, exhaustive checking, branded types Pr\u00e1tica : Refatorar APIs externas sem tipagem Exerc\u00edcio : Criar wrapper type-safe para biblioteca sem tipos // Exemplo de como um wrapper seguro seria interface SafeLibrary { featureOne(p: string): void; featureTwo(p: number): boolean; } function wrapLibrary(untyped: any): SafeLibrary { // ... implementa\u00e7\u00e3o com valida\u00e7\u00f5es return untyped as SafeLibrary; } Documenta\u00e7\u00e3o : Never Type Dia 13: Conditional Types Teoria : T extends U ? X : Y , infer keyword Pr\u00e1tica : Criar utility types customizados Exerc\u00edcio : Implementar DeepPartial<T> , NonNullable<T> type DeepPartial<T> = T extends object ? { [P in keyof T]?: DeepPartial<T[P]>; } : T; Documenta\u00e7\u00e3o : Conditional Types Dia 14: Project Mini #2 Pr\u00e1tica Intensiva : Sistema de autentica\u00e7\u00e3o completo - Abstract classes para diferentes providers - Generics para diferentes tipos de usu\u00e1rio - Decorators para autoriza\u00e7\u00e3o - Conditional types para permiss\u00f5es SEMANA 3: Patterns Arquiteturais e Function Types Dia 15: Function Overloading Teoria : Multiple signatures, conditional returns Pr\u00e1tica : Criar API com diferentes assinaturas baseadas em par\u00e2metros Exerc\u00edcio : Implementar fun\u00e7\u00e3o que retorna tipos diferentes baseado no input function getData(id: string): Promise<User>; function getData(filter: Filter): Promise<User[]>; function getData(arg: string | Filter): Promise<User | User[]> { // ... implementa\u00e7\u00e3o } Documenta\u00e7\u00e3o : Function Overloads Dia 16: Mapped Types Avan\u00e7ados Teoria : Key remapping, filtering, template literals em mapped types Pr\u00e1tica : Criar sistema de forms din\u00e2mico Exerc\u00edcio : Implementar FormConfig<T> que gera configura\u00e7\u00e3o baseada no tipo type FormConfig<T> = { [K in keyof T as `${string & K}Config`]: FieldConfig<T[K]> } Documenta\u00e7\u00e3o : Mapped Types Dia 17: Service Layer Architecture Teoria : Dependency injection, interface segregation Pr\u00e1tica : Recriar e melhorar seu GetTableDataService Exerc\u00edcio : Implementar sistema completo de services com DI abstract class GetTableDataService<TResponse, TParams extends Record<string, any>> { // ... implementa\u00e7\u00e3o } Documenta\u00e7\u00e3o : Interfaces Dia 18: Error Handling Type-Safe Teoria : Result pattern, discriminated unions para errors Pr\u00e1tica : Implementar sistema de error handling sem exceptions Exerc\u00edcio : Criar Result<T, E> pattern type Result<T, E = Error> = { success: true, value: T } | { success: false, error: E }; Documenta\u00e7\u00e3o : Union Types Dia 19: Advanced Record Patterns Teoria : Record com template literals, const assertions Pr\u00e1tica : Criar sistema de internacionaliza\u00e7\u00e3o type-safe Exerc\u00edcio : Implementar dictionary pattern como seu exemplo const tooltipContent: Record<ColumnType, string> = { [ColumnType.YIELD]: 'min_fare.table.tooltips.yield', } as const; Documenta\u00e7\u00e3o : Const Assertions Dia 20: Utility Types Avan\u00e7ados Teoria : ReturnType , Parameters , ConstructorParameters , InstanceType Pr\u00e1tica : Criar meta-programming utilities Exerc\u00edcio : Implementar factory pattern type-safe type ServiceFactory<T extends new (...args: any[]) => any> = { create(...args: ConstructorParameters<T>): InstanceType<T> } Documenta\u00e7\u00e3o : Advanced Utility Types Dia 21: Project Mini #3 Pr\u00e1tica Intensiva : Sistema de HTTP client type-safe - Service layer com error handling - Function overloading para diferentes m\u00e9todos - Generic constraints para request/response - Record patterns para configura\u00e7\u00e3o SEMANA 4: Integra\u00e7\u00e3o e Refinamento Dia 22: Form Integration (React Hook Form) Teoria : Integration com bibliotecas externas, module augmentation Pr\u00e1tica : Implementar tipagens como seu exemplo RenderMinFareForm Exerc\u00edcio : Criar form handler completamente tipado export type RenderMinFareForm = { control: Control<MinFareFormValue>; errors: FieldErrors<MinFareFormValue>; setValue: UseFormSetValue<MinFareFormValue>; clearErrors: UseFormClearErrors<MinFareFormValue>; }; Documenta\u00e7\u00e3o : Module Augmentation Dia 23: State Management Type-Safe Teoria : Store patterns, action creators, selectors tipados Pr\u00e1tica : Implementar store pattern com TypeScript Exerc\u00edcio : Criar Redux-like store completamente tipado Documenta\u00e7\u00e3o : Literal Types Dia 24: Module System e Path Mapping Teoria : Barrel exports, path mapping, declaration files Pr\u00e1tica : Organizar arquitetura de m\u00f3dulos como nos seus exemplos Exerc\u00edcio : Configurar sistema de imports absolutos import { HttpStatusCode } from '@data/protocols/http'; import { UnexpectedError } from '@domain/errors'; Documenta\u00e7\u00e3o : Module Resolution Dia 25: Testing Types Teoria : Type-safe mocks, testing utilities Pr\u00e1tica : Criar mocks tipados para seus services Exerc\u00edcio : Implementar mock factory type-safe Documenta\u00e7\u00e3o : Testing Dia 26: Performance e Optimization Teoria : Type checking performance, compilation optimization Pr\u00e1tica : Otimizar tipos complexos, evitar deep recursion Exerc\u00edcio : Refatorar tipos pesados para performance Documenta\u00e7\u00e3o : Performance Dia 27: Advanced Patterns Teoria : Builder pattern, Factory pattern, Observer pattern em TS Pr\u00e1tica : Implementar patterns GOF com TypeScript Exerc\u00edcio : Criar sistema de eventos type-safe Documenta\u00e7\u00e3o : Advanced Types Dia 28: Project Final - Setup Planejamento : Arquitetura completa de uma aplica\u00e7\u00e3o - Definir estrutura de pastas - Configurar tipos base - Planejar services e repositories Dia 29: Project Final - Implementation Desenvolvimento : Implementar sistema completo - Services como GetTableDataService - Form handling type-safe - Error handling robusto - Classes e abstra\u00e7\u00f5es Dia 30: Project Final - Review e Refinamento Finaliza\u00e7\u00e3o : Code review, optimizations, documenta\u00e7\u00e3o - Revisar toda implementa\u00e7\u00e3o - Aplicar best practices aprendidas - Documentar patterns utilizados Recursos Adicionais Documenta\u00e7\u00e3o Principal TypeScript Handbook Type Challenges TypeScript Deep Dive Exerc\u00edcios Complementares Cada dia incluir\u00e1 2-3 exerc\u00edcios extras para praticar Mini-projetos semanais para consolidar conhecimento Refatora\u00e7\u00e3o de c\u00f3digo real (como seus exemplos) M\u00e9tricas de Progresso Dia 7 : Capaz de criar classes robustas com type safety Dia 14 : Domina generics e patterns arquiteturais b\u00e1sicos Dia 21 : Implementa services complexos sem any Dia 30 : Arquiteta aplica\u00e7\u00f5es TypeScript intermedi\u00e1rias Este plano foi estruturado para voc\u00ea evoluir naturalmente dos conceitos que j\u00e1 domina (interfaces, types b\u00e1sicos) para implementa\u00e7\u00f5es robustas como as dos seus exemplos, sempre priorizando tipagem segura e elimina\u00e7\u00e3o de any .","title":"Plano de Estudos TypeScript - 30 Dias"},{"location":"Ts/Plano%20de%20Estudos/#plano-de-estudos-typescript-30-dias","text":"","title":"Plano de Estudos TypeScript - 30 Dias"},{"location":"Ts/Plano%20de%20Estudos/#do-iniciante-ao-intermediario","text":"","title":"Do Iniciante ao Intermedi\u00e1rio"},{"location":"Ts/Plano%20de%20Estudos/#estrutura-do-plano","text":"Dura\u00e7\u00e3o : 30 dias (1h30 por dia) Tempo por sess\u00e3o : 35min teoria + 45min pr\u00e1tica + 10min documenta\u00e7\u00e3o Metodologia : Progress\u00e3o incremental com projetos pr\u00e1ticos Objetivo : Dominar TypeScript intermedi\u00e1rio com foco em classes, tipagens robustas e patterns arquiteturais","title":"Estrutura do Plano"},{"location":"Ts/Plano%20de%20Estudos/#semana-1-fundamentos-criticos-e-classes","text":"","title":"SEMANA 1: Fundamentos Cr\u00edticos e Classes"},{"location":"Ts/Plano%20de%20Estudos/#dia-1-classes-fundamentais","text":"Teoria : Constructor, properties, methods, access modifiers Pr\u00e1tica : Criar classe User com valida\u00e7\u00f5es Exerc\u00edcio : class DatabaseConnection { constructor(url: string); constructor(host: string, port: number, database: string); // A implementa\u00e7\u00e3o real lida com ambas as assinaturas constructor(arg1: string, arg2?: number, arg3?: string) { // ... l\u00f3gica para diferenciar os construtores } } Documenta\u00e7\u00e3o : Classes - TypeScript Handbook","title":"Dia 1: Classes Fundamentais"},{"location":"Ts/Plano%20de%20Estudos/#dia-2-context-do-this-parte-1","text":"Teoria : this binding, arrow functions vs regular functions Pr\u00e1tica : Implementar m\u00e9todo de chaining type-safe Exerc\u00edcio : Resolver problemas de this context em callbacks class QueryBuilder { private query: string = ''; where(condition: string): this { this.query += ` WHERE ${condition}`; return this; } orderBy(field: string): this { this.query += ` ORDER BY ${field}`; return this; } } Documenta\u00e7\u00e3o : This Types","title":"Dia 2: Context do this - Parte 1"},{"location":"Ts/Plano%20de%20Estudos/#dia-3-eliminando-any-parte-1","text":"Teoria : unknown vs any , type assertions seguras Pr\u00e1tica : Refatorar c\u00f3digo com any para tipagens seguras Exerc\u00edcio : Implementar fun\u00e7\u00e3o de parsing de JSON type-safe function safeJsonParse<T>(json: string): T | Error { try { return JSON.parse(json) as T; } catch (e) { return new Error('Failed to parse JSON'); } } Documenta\u00e7\u00e3o : Unknown Type","title":"Dia 3: Eliminando any - Parte 1"},{"location":"Ts/Plano%20de%20Estudos/#dia-4-type-guards-e-narrowing","text":"Teoria : typeof , instanceof , custom type guards Pr\u00e1tica : Criar type guards para valida\u00e7\u00e3o de dados da API Exerc\u00edcio : Implementar type guards para discriminated unions type SuccessResponse = { status: 'success', data: any }; type ErrorResponse = { status: 'error', message: string }; type ApiResponse = SuccessResponse | ErrorResponse; function isSuccessResponse(response: ApiResponse): response is SuccessResponse { return response.status === 'success'; } Documenta\u00e7\u00e3o : Narrowing","title":"Dia 4: Type Guards e Narrowing"},{"location":"Ts/Plano%20de%20Estudos/#dia-5-utility-types-nativos-record-e-basicos","text":"Teoria : Record<K,V> , Pick , Omit , Partial , Required Pr\u00e1tica : Criar sistema de configura\u00e7\u00e3o type-safe Exerc\u00edcio : Implementar mapeamento como seu exemplo: const tooltipContent: Record<string, string> = { [columnType.YIELD]: 'min_fare.table.tooltips.yield', }; Documenta\u00e7\u00e3o : Utility Types","title":"Dia 5: Utility Types Nativos - Record e B\u00e1sicos"},{"location":"Ts/Plano%20de%20Estudos/#dia-6-template-literal-types","text":"Teoria : Template literals, key remapping Pr\u00e1tica : Criar sistema de rotas type-safe Exerc\u00edcio : Implementar auto-complete para caminhos de API type ApiRoutes = `/api/${'users' | 'posts'}/${string}`; Documenta\u00e7\u00e3o : Template Literal Types","title":"Dia 6: Template Literal Types"},{"location":"Ts/Plano%20de%20Estudos/#dia-7-project-mini-1","text":"Pr\u00e1tica Intensiva : Implementar classe BaseRepository combinando todos os conceitos - Classes com generics - Type guards para valida\u00e7\u00e3o - Methods com this return para chaining - Utility types para opera\u00e7\u00f5es CRUD","title":"Dia 7: Project Mini #1"},{"location":"Ts/Plano%20de%20Estudos/#semana-2-classes-avancadas-e-generics","text":"","title":"SEMANA 2: Classes Avan\u00e7adas e Generics"},{"location":"Ts/Plano%20de%20Estudos/#dia-8-heranca-e-abstract-classes","text":"Teoria : extends , super , abstract methods e properties Pr\u00e1tica : Implementar hierarquia de classes para diferentes tipos de usu\u00e1rios Exerc\u00edcio : Criar abstract class similar ao seu GetTableDataService abstract class BaseService<TResponse, TParams> { abstract handle(params: TParams): Promise<TResponse>; } Documenta\u00e7\u00e3o : Abstract Classes","title":"Dia 8: Heran\u00e7a e Abstract Classes"},{"location":"Ts/Plano%20de%20Estudos/#dia-9-generics-em-classes","text":"Teoria : Generic constraints, multiple type parameters, default types Pr\u00e1tica : Criar sistema de cache gen\u00e9rico type-safe Exerc\u00edcio : Implementar DataService<T extends BaseEntity, K extends keyof T> Documenta\u00e7\u00e3o : Generics","title":"Dia 9: Generics em Classes"},{"location":"Ts/Plano%20de%20Estudos/#dia-10-context-this-parte-2-avancada","text":"Teoria : this parameters, ThisType<T> , this em generics Pr\u00e1tica : Implementar fluent API com tipagem correta do this Exerc\u00edcio : Criar builder pattern type-safe class FormBuilder<T> { private data: Partial<T> = {}; field<K extends keyof T>(name: K, value: T[K]): FormBuilder<T> { this.data[name] = value; return this; } build(): T { return this.data as T; } } Documenta\u00e7\u00e3o : This Parameters","title":"Dia 10: Context this - Parte 2 Avan\u00e7ada"},{"location":"Ts/Plano%20de%20Estudos/#dia-11-decorators","text":"Teoria : Method decorators, property decorators, metadata Pr\u00e1tica : Criar sistema de valida\u00e7\u00e3o com decorators Exerc\u00edcio : Implementar @validate , @cache , @log decorators Documenta\u00e7\u00e3o : Decorators","title":"Dia 11: Decorators"},{"location":"Ts/Plano%20de%20Estudos/#dia-12-eliminando-any-parte-2","text":"Teoria : never type, exhaustive checking, branded types Pr\u00e1tica : Refatorar APIs externas sem tipagem Exerc\u00edcio : Criar wrapper type-safe para biblioteca sem tipos // Exemplo de como um wrapper seguro seria interface SafeLibrary { featureOne(p: string): void; featureTwo(p: number): boolean; } function wrapLibrary(untyped: any): SafeLibrary { // ... implementa\u00e7\u00e3o com valida\u00e7\u00f5es return untyped as SafeLibrary; } Documenta\u00e7\u00e3o : Never Type","title":"Dia 12: Eliminando any - Parte 2"},{"location":"Ts/Plano%20de%20Estudos/#dia-13-conditional-types","text":"Teoria : T extends U ? X : Y , infer keyword Pr\u00e1tica : Criar utility types customizados Exerc\u00edcio : Implementar DeepPartial<T> , NonNullable<T> type DeepPartial<T> = T extends object ? { [P in keyof T]?: DeepPartial<T[P]>; } : T; Documenta\u00e7\u00e3o : Conditional Types","title":"Dia 13: Conditional Types"},{"location":"Ts/Plano%20de%20Estudos/#dia-14-project-mini-2","text":"Pr\u00e1tica Intensiva : Sistema de autentica\u00e7\u00e3o completo - Abstract classes para diferentes providers - Generics para diferentes tipos de usu\u00e1rio - Decorators para autoriza\u00e7\u00e3o - Conditional types para permiss\u00f5es","title":"Dia 14: Project Mini #2"},{"location":"Ts/Plano%20de%20Estudos/#semana-3-patterns-arquiteturais-e-function-types","text":"","title":"SEMANA 3: Patterns Arquiteturais e Function Types"},{"location":"Ts/Plano%20de%20Estudos/#dia-15-function-overloading","text":"Teoria : Multiple signatures, conditional returns Pr\u00e1tica : Criar API com diferentes assinaturas baseadas em par\u00e2metros Exerc\u00edcio : Implementar fun\u00e7\u00e3o que retorna tipos diferentes baseado no input function getData(id: string): Promise<User>; function getData(filter: Filter): Promise<User[]>; function getData(arg: string | Filter): Promise<User | User[]> { // ... implementa\u00e7\u00e3o } Documenta\u00e7\u00e3o : Function Overloads","title":"Dia 15: Function Overloading"},{"location":"Ts/Plano%20de%20Estudos/#dia-16-mapped-types-avancados","text":"Teoria : Key remapping, filtering, template literals em mapped types Pr\u00e1tica : Criar sistema de forms din\u00e2mico Exerc\u00edcio : Implementar FormConfig<T> que gera configura\u00e7\u00e3o baseada no tipo type FormConfig<T> = { [K in keyof T as `${string & K}Config`]: FieldConfig<T[K]> } Documenta\u00e7\u00e3o : Mapped Types","title":"Dia 16: Mapped Types Avan\u00e7ados"},{"location":"Ts/Plano%20de%20Estudos/#dia-17-service-layer-architecture","text":"Teoria : Dependency injection, interface segregation Pr\u00e1tica : Recriar e melhorar seu GetTableDataService Exerc\u00edcio : Implementar sistema completo de services com DI abstract class GetTableDataService<TResponse, TParams extends Record<string, any>> { // ... implementa\u00e7\u00e3o } Documenta\u00e7\u00e3o : Interfaces","title":"Dia 17: Service Layer Architecture"},{"location":"Ts/Plano%20de%20Estudos/#dia-18-error-handling-type-safe","text":"Teoria : Result pattern, discriminated unions para errors Pr\u00e1tica : Implementar sistema de error handling sem exceptions Exerc\u00edcio : Criar Result<T, E> pattern type Result<T, E = Error> = { success: true, value: T } | { success: false, error: E }; Documenta\u00e7\u00e3o : Union Types","title":"Dia 18: Error Handling Type-Safe"},{"location":"Ts/Plano%20de%20Estudos/#dia-19-advanced-record-patterns","text":"Teoria : Record com template literals, const assertions Pr\u00e1tica : Criar sistema de internacionaliza\u00e7\u00e3o type-safe Exerc\u00edcio : Implementar dictionary pattern como seu exemplo const tooltipContent: Record<ColumnType, string> = { [ColumnType.YIELD]: 'min_fare.table.tooltips.yield', } as const; Documenta\u00e7\u00e3o : Const Assertions","title":"Dia 19: Advanced Record Patterns"},{"location":"Ts/Plano%20de%20Estudos/#dia-20-utility-types-avancados","text":"Teoria : ReturnType , Parameters , ConstructorParameters , InstanceType Pr\u00e1tica : Criar meta-programming utilities Exerc\u00edcio : Implementar factory pattern type-safe type ServiceFactory<T extends new (...args: any[]) => any> = { create(...args: ConstructorParameters<T>): InstanceType<T> } Documenta\u00e7\u00e3o : Advanced Utility Types","title":"Dia 20: Utility Types Avan\u00e7ados"},{"location":"Ts/Plano%20de%20Estudos/#dia-21-project-mini-3","text":"Pr\u00e1tica Intensiva : Sistema de HTTP client type-safe - Service layer com error handling - Function overloading para diferentes m\u00e9todos - Generic constraints para request/response - Record patterns para configura\u00e7\u00e3o","title":"Dia 21: Project Mini #3"},{"location":"Ts/Plano%20de%20Estudos/#semana-4-integracao-e-refinamento","text":"","title":"SEMANA 4: Integra\u00e7\u00e3o e Refinamento"},{"location":"Ts/Plano%20de%20Estudos/#dia-22-form-integration-react-hook-form","text":"Teoria : Integration com bibliotecas externas, module augmentation Pr\u00e1tica : Implementar tipagens como seu exemplo RenderMinFareForm Exerc\u00edcio : Criar form handler completamente tipado export type RenderMinFareForm = { control: Control<MinFareFormValue>; errors: FieldErrors<MinFareFormValue>; setValue: UseFormSetValue<MinFareFormValue>; clearErrors: UseFormClearErrors<MinFareFormValue>; }; Documenta\u00e7\u00e3o : Module Augmentation","title":"Dia 22: Form Integration (React Hook Form)"},{"location":"Ts/Plano%20de%20Estudos/#dia-23-state-management-type-safe","text":"Teoria : Store patterns, action creators, selectors tipados Pr\u00e1tica : Implementar store pattern com TypeScript Exerc\u00edcio : Criar Redux-like store completamente tipado Documenta\u00e7\u00e3o : Literal Types","title":"Dia 23: State Management Type-Safe"},{"location":"Ts/Plano%20de%20Estudos/#dia-24-module-system-e-path-mapping","text":"Teoria : Barrel exports, path mapping, declaration files Pr\u00e1tica : Organizar arquitetura de m\u00f3dulos como nos seus exemplos Exerc\u00edcio : Configurar sistema de imports absolutos import { HttpStatusCode } from '@data/protocols/http'; import { UnexpectedError } from '@domain/errors'; Documenta\u00e7\u00e3o : Module Resolution","title":"Dia 24: Module System e Path Mapping"},{"location":"Ts/Plano%20de%20Estudos/#dia-25-testing-types","text":"Teoria : Type-safe mocks, testing utilities Pr\u00e1tica : Criar mocks tipados para seus services Exerc\u00edcio : Implementar mock factory type-safe Documenta\u00e7\u00e3o : Testing","title":"Dia 25: Testing Types"},{"location":"Ts/Plano%20de%20Estudos/#dia-26-performance-e-optimization","text":"Teoria : Type checking performance, compilation optimization Pr\u00e1tica : Otimizar tipos complexos, evitar deep recursion Exerc\u00edcio : Refatorar tipos pesados para performance Documenta\u00e7\u00e3o : Performance","title":"Dia 26: Performance e Optimization"},{"location":"Ts/Plano%20de%20Estudos/#dia-27-advanced-patterns","text":"Teoria : Builder pattern, Factory pattern, Observer pattern em TS Pr\u00e1tica : Implementar patterns GOF com TypeScript Exerc\u00edcio : Criar sistema de eventos type-safe Documenta\u00e7\u00e3o : Advanced Types","title":"Dia 27: Advanced Patterns"},{"location":"Ts/Plano%20de%20Estudos/#dia-28-project-final-setup","text":"Planejamento : Arquitetura completa de uma aplica\u00e7\u00e3o - Definir estrutura de pastas - Configurar tipos base - Planejar services e repositories","title":"Dia 28: Project Final - Setup"},{"location":"Ts/Plano%20de%20Estudos/#dia-29-project-final-implementation","text":"Desenvolvimento : Implementar sistema completo - Services como GetTableDataService - Form handling type-safe - Error handling robusto - Classes e abstra\u00e7\u00f5es","title":"Dia 29: Project Final - Implementation"},{"location":"Ts/Plano%20de%20Estudos/#dia-30-project-final-review-e-refinamento","text":"Finaliza\u00e7\u00e3o : Code review, optimizations, documenta\u00e7\u00e3o - Revisar toda implementa\u00e7\u00e3o - Aplicar best practices aprendidas - Documentar patterns utilizados","title":"Dia 30: Project Final - Review e Refinamento"},{"location":"Ts/Plano%20de%20Estudos/#recursos-adicionais","text":"","title":"Recursos Adicionais"},{"location":"Ts/Plano%20de%20Estudos/#documentacao-principal","text":"TypeScript Handbook Type Challenges TypeScript Deep Dive","title":"Documenta\u00e7\u00e3o Principal"},{"location":"Ts/Plano%20de%20Estudos/#exercicios-complementares","text":"Cada dia incluir\u00e1 2-3 exerc\u00edcios extras para praticar Mini-projetos semanais para consolidar conhecimento Refatora\u00e7\u00e3o de c\u00f3digo real (como seus exemplos)","title":"Exerc\u00edcios Complementares"},{"location":"Ts/Plano%20de%20Estudos/#metricas-de-progresso","text":"Dia 7 : Capaz de criar classes robustas com type safety Dia 14 : Domina generics e patterns arquiteturais b\u00e1sicos Dia 21 : Implementa services complexos sem any Dia 30 : Arquiteta aplica\u00e7\u00f5es TypeScript intermedi\u00e1rias Este plano foi estruturado para voc\u00ea evoluir naturalmente dos conceitos que j\u00e1 domina (interfaces, types b\u00e1sicos) para implementa\u00e7\u00f5es robustas como as dos seus exemplos, sempre priorizando tipagem segura e elimina\u00e7\u00e3o de any .","title":"M\u00e9tricas de Progresso"},{"location":"Ts/Semana1/","text":"Semana 1: Fundamentos Cr\u00edticos e Classes Vis\u00e3o Geral da Semana Nesta primeira semana, nosso objetivo \u00e9 construir uma base s\u00f3lida em TypeScript. Vamos focar em dominar o sistema de classes, entender o comportamento do this e, crucialmente, come\u00e7ar a jornada para eliminar o any do nosso c\u00f3digo, substituindo-o por padr\u00f5es de tipagem seguros e robustos como unknown e type guards. Ao final da semana, voc\u00ea ter\u00e1 as ferramentas para construir componentes encapsulados e reutiliz\u00e1veis. Dia 1: Classes Fundamentais Foco do Dia Construir e entender a estrutura de classes em TypeScript, incluindo como inicializar, controlar o acesso a propriedades e definir o comportamento atrav\u00e9s de m\u00e9todos. Leitura e Teoria (Aprofundada) Classes s\u00e3o um dos pilares da programa\u00e7\u00e3o orientada a objetos. Elas s\u00e3o \"plantas\" para criar objetos. Propriedades (Properties) : S\u00e3o as vari\u00e1veis de uma classe. Elas definem o estado de um objeto. M\u00e9todos (Methods) : S\u00e3o as fun\u00e7\u00f5es de uma classe. Eles definem o comportamento de um objeto. Construtor (Constructor) : Um m\u00e9todo especial para criar e inicializar um objeto. Ele \u00e9 chamado automaticamente quando usamos a palavra-chave new . Modificadores de Acesso (Access Modifiers) : public : (padr\u00e3o) A propriedade ou m\u00e9todo pode ser acessado de qualquer lugar. private : A propriedade ou m\u00e9todo s\u00f3 pode ser acessado de dentro da pr\u00f3pria classe . Isso \u00e9 chamado de encapsulamento e \u00e9 crucial para proteger os dados e esconder a complexidade. protected : Pode ser acessado de dentro da classe e de classes que a herdam ( extends ). Veremos mais sobre heran\u00e7a na Semana 2. readonly : Uma propriedade marcada como readonly s\u00f3 pode receber um valor durante a sua declara\u00e7\u00e3o ou dentro do construtor. Garante imutabilidade ap\u00f3s a cria\u00e7\u00e3o do objeto. Parameter Properties : Um atalho do TypeScript para declarar e inicializar propriedades diretamente nos par\u00e2metros do construtor. Documenta\u00e7\u00e3o Essencial Classes (TypeScript Handbook) Parameter Properties (TypeScript Handbook) Pr\u00e1tica Guiada (Passo a Passo) Exemplo 1: Classe B\u00e1sica class Player { // Propriedade p\u00fablica, acess\u00edvel de qualquer lugar health: number = 100; // M\u00e9todo p\u00fablico attack() { console.log(\"O jogador ataca!\"); } } const player1 = new Player(); console.log(player1.health); // 100 player1.attack(); // \"O jogador ataca!\" Exemplo 2: Encapsulamento com private e readonly class BankAccount { public readonly accountNumber: string; private balance: number; constructor(accountNumber: string, initialBalance: number) { this.accountNumber = accountNumber; this.balance = initialBalance; } // M\u00e9todo p\u00fablico para acessar um dado privado de forma controlada public getBalance(): number { // Aqui poder\u00edamos adicionar l\u00f3gica de permiss\u00e3o, por exemplo return this.balance; } // M\u00e9todo p\u00fablico para modificar um dado privado public deposit(amount: number): void { if (amount > 0) { this.balance += amount; } } } const myAccount = new BankAccount(\"12345-6\", 500); // myAccount.balance = 10000; // Erro: 'balance' \u00e9 privado. // myAccount.accountNumber = \"98765-4\"; // Erro: 'accountNumber' \u00e9 readonly. myAccount.deposit(150); console.log(myAccount.getBalance()); // 650 Exemplo 3: Atalho com Parameter Properties class Car { // Declara e inicializa as propriedades diretamente no construtor constructor( public readonly model: string, private year: number ) {} public getCarInfo(): string { return `Carro: ${this.model}, Ano: ${this.year}`; } } const myCar = new Car(\"Fusca\", 1978); console.log(myCar.model); // \"Fusca\" console.log(myCar.getCarInfo()); // \"Carro: Fusca, Ano: 1978\" Exerc\u00edcios Pr\u00e1ticos (N\u00edveis Crescentes) N\u00edvel 1: B\u00e1sico Crie uma classe Rectangle com propriedades width e height (ambas public e do tipo number ). Adicione um m\u00e9todo getArea() que retorna a \u00e1rea do ret\u00e2ngulo ( width * height ). Ver Solu\u00e7\u00e3o --- class Rectangle { public width: number; public height: number; constructor(width: number, height: number) { this.width = width; this.height = height; } public getArea(): number { return this.width * this.height; } } // Teste const rect = new Rectangle(10, 20); console.log(rect.getArea()); // 200 N\u00edvel 2: Intermedi\u00e1rio Crie uma classe Product com propriedades name (string) e price (number), ambas private . Use parameter properties . Adicione um m\u00e9todo p\u00fablico getPrice() para ler o pre\u00e7o e um m\u00e9todo setPrice(newPrice: number) que s\u00f3 permite a altera\u00e7\u00e3o se o newPrice for maior que zero. Ver Solu\u00e7\u00e3o --- class Product { constructor( private name: string, private price: number ) {} public getPrice(): number { return this.price; } public setPrice(newPrice: number): void { if (newPrice > 0) { this.price = newPrice; console.log(`O pre\u00e7o de ${this.name} foi atualizado para ${newPrice}.`); } else { console.log(\"Pre\u00e7o inv\u00e1lido. O valor deve ser maior que zero.\"); } } } // Teste const book = new Product(\"O Senhor dos An\u00e9is\", 50); console.log(book.getPrice()); // 50 book.setPrice(65); console.log(book.getPrice()); // 65 book.setPrice(-10); // \"Pre\u00e7o inv\u00e1lido...\" N\u00edvel 3: Avan\u00e7ado Implemente a classe DatabaseConnection que simula o padr\u00e3o de constructor overloading . A classe deve poder ser instanciada de duas formas: 1. new DatabaseConnection(url: string) 2. new DatabaseConnection(host: string, port: number, database: string) O construtor deve ter uma \u00fanica implementa\u00e7\u00e3o que verifica os argumentos recebidos e monta a connectionString interna de acordo. Ver Solu\u00e7\u00e3o --- class DatabaseConnection { private connectionString: string; // Assinatura de sobrecarga 1 constructor(url: string); // Assinatura de sobrecarga 2 constructor(host: string, port: number, database: string); // Implementa\u00e7\u00e3o real do construtor constructor(arg1: string, arg2?: number, arg3?: string) { // Verifica se os argumentos correspondem \u00e0 segunda assinatura if (typeof arg2 === 'number' && typeof arg3 === 'string') { const host = arg1; const port = arg2; const database = arg3; this.connectionString = `mongodb://${host}:${port}/${database}`; } else { // Caso contr\u00e1rio, trata como a primeira assinatura const url = arg1; this.connectionString = url; } } public connect(): void { console.log(`Conectando a: ${this.connectionString}`); } } // Teste const connFromUrl = new DatabaseConnection('mysql://user:pass@server/db'); connFromUrl.connect(); // \"Conectando a: mysql://user:pass@server/db\" const connFromParts = new DatabaseConnection('localhost', 5432, 'postgres'); connFromParts.connect(); // \"Conectando a: postgresql://localhost:5432/postgres\" Checklist do Dia [ ] Entendi a diferen\u00e7a entre public e private . [ ] Sei por que readonly \u00e9 \u00fatil para imutabilidade. [ ] Usei o atalho de parameter properties . [ ] Implementei o padr\u00e3o de \"overload\" de construtor em TypeScript. Dia 2: Contexto do this - Parte 1 Foco do Dia Entender como o this funciona em JavaScript/TypeScript e como garantir que ele se refira ao contexto correto, especialmente em callbacks e m\u00e9todos encadeados. Leitura e Teoria (Aprofundada) O this \u00e9 uma das fontes mais comuns de bugs em JavaScript. Seu valor \u00e9 determinado por como a fun\u00e7\u00e3o \u00e9 chamada (call-site) , n\u00e3o onde ela \u00e9 definida. Fun\u00e7\u00e3o Regular ( function() {} ou metodo() {} ) : O this \u00e9 din\u00e2mico. Se a fun\u00e7\u00e3o \u00e9 chamada como obj.metodo() , this \u00e9 obj . Se a fun\u00e7\u00e3o \u00e9 simplesmente chamada ( funcao() ), this \u00e9 undefined (em 'strict mode', o padr\u00e3o em m\u00f3dulos e classes) ou o objeto global ( window no browser). Arrow Function ( () => {} ) : O this \u00e9 est\u00e1tico (l\u00e9xico). Ela n\u00e3o possui seu pr\u00f3prio this . Ela \"herda\" o this do escopo onde foi definida . Dentro de um m\u00e9todo de classe definido como arrow function, this sempre se referir\u00e1 \u00e0 inst\u00e2ncia da classe. Documenta\u00e7\u00e3o Essencial O this em JavaScript (MDN) - Essencial para entender a base. This Types (TypeScript Handbook) Pr\u00e1tica Guiada (Passo a Passo) Exemplo 1: O Problema - Perdendo o this class Greeter { prefix = \"Hello, \"; // M\u00e9todo de classe normal greet(name: string) { console.log(this.prefix + name); } } const greeter = new Greeter(); const greetFunction = greeter.greet; // A fun\u00e7\u00e3o \u00e9 extra\u00edda do objeto // greetFunction(\"Mundo\"); // Crash! `this` \u00e9 undefined aqui. Exemplo 2: A Solu\u00e7\u00e3o - Arrow Function como M\u00e9todo class SafeGreeter { prefix = \"Hello, \"; // O m\u00e9todo \u00e9 uma propriedade que cont\u00e9m uma arrow function // A arrow function \"lembra\" do `this` de onde foi criada greet = (name: string) => { console.log(this.prefix + name); } } const safeGreeter = new SafeGreeter(); const safeGreetFunction = safeGreeter.greet; safeGreetFunction(\"Mundo\"); // Funciona! \"Hello, Mundo\" Exemplo 3: Method Chaining com o tipo this class StringBuilder { private parts: string[] = []; add(part: string): this { this.parts.push(part); return this; // Retornar `this` permite o encadeamento } build(): string { return this.parts.join(\"\"); } } const builder = new StringBuilder(); const result = builder.add(\"Hello, \").add(\"World!\").build(); console.log(result); // \"Hello, World!\" Exerc\u00edcios Pr\u00e1ticos (N\u00edveis Crescentes) N\u00edvel 1: B\u00e1sico Crie uma classe Logger com uma propriedade message . Crie um m\u00e9todo printMessage() . Chame este m\u00e9todo dentro de um setTimeout e observe o erro. Em seguida, corrija o problema para que a mensagem seja impressa corretamente ap\u00f3s 1 segundo. Ver Solu\u00e7\u00e3o --- class Logger { constructor(private message: string = \"Opera\u00e7\u00e3o conclu\u00edda!\") {} // A solu\u00e7\u00e3o \u00e9 definir o m\u00e9todo como uma arrow function printMessage = () => { console.log(this.message); } public schedulePrint(): void { console.log(\"Agendando impress\u00e3o...\"); setTimeout(this.printMessage, 1000); } } // Teste const logger = new Logger(); logger.schedulePrint(); // Ap\u00f3s 1s: \"Opera\u00e7\u00e3o conclu\u00edda!\" N\u00edvel 2: Intermedi\u00e1rio Crie uma classe Calculator com uma propriedade value (number, private, inicia em 0). Crie os m\u00e9todos add(num: number) , subtract(num: number) e multiply(num: number) . Cada um desses m\u00e9todos deve modificar o value e retornar this para permitir o encadeamento de chamadas. Ver Solu\u00e7\u00e3o --- class Calculator { private value: number = 0; constructor(initialValue: number = 0) { this.value = initialValue; } add(num: number): this { this.value += num; return this; } subtract(num: number): this { this.value -= num; return this; } multiply(num: number): this { this.value *= num; return this; } getResult(): number { return this.value; } } // Teste const calc = new Calculator(10); const result = calc.add(5).subtract(3).multiply(2).getResult(); // (10 + 5 - 3) * 2 = 24 console.log(result); // 24 N\u00edvel 3: Avan\u00e7ado Crie uma classe DOMManager . Ela deve ter um m\u00e9todo createElement(tag: string, text: string) que cria um elemento (simulado por um objeto {tag, text} ) e o armazena em um array private elements . Crie um m\u00e9todo render(containerId: string) que deveria (em um cen\u00e1rio real) adicionar os elementos a um cont\u00eainer do DOM. O m\u00e9todo render deve ser chamado por um objeto externo, simulando um event listener, ent\u00e3o voc\u00ea precisa garantir que o this dentro de render ainda se refira \u00e0 inst\u00e2ncia de DOMManager . Ver Solu\u00e7\u00e3o --- interface Element { tag: string; text: string; } class DOMManager { private elements: Element[] = []; public createElement(tag: string, text: string): this { this.elements.push({ tag, text }); return this; } // Definido como arrow function para garantir o `this` l\u00e9xico public render = (containerId: string) => { // Em um app real, far\u00edamos: const container = document.getElementById(containerId); console.log(`Renderizando ${this.elements.length} elementos em #${containerId}`); for (const el of this.elements) { console.log(` <${el.tag}>${el.text}</${el.tag}>`); } } } // Teste const manager = new DOMManager(); manager.createElement(\"h1\", \"T\u00edtulo Principal\").createElement(\"p\", \"Este \u00e9 um par\u00e1grafo.\"); // Simulando um sistema de eventos que pega a fun\u00e7\u00e3o e a chama depois const eventSystem = { listeners: {} as Record<string, () => void>, addEventListener: function(eventName: string, callback: () => void) { this.listeners[eventName] = callback; }, trigger: function(eventName: string) { this.listeners[eventName](); } }; // Passamos o m\u00e9todo `render` como callback. Gra\u00e7as \u00e0 arrow function, o `this` funciona. eventSystem.addEventListener(\"renderPage\", () => manager.render(\"app-root\")); eventSystem.trigger(\"renderPage\"); Checklist do Dia [ ] Sei explicar a diferen\u00e7a de this entre function() e () => {} . [ ] Consigo resolver um problema de this perdido em um callback. [ ] Entendi como return this; permite o encadeamento de m\u00e9todos. [ ] Implementei uma classe com uma API fluente. Dia 3: Eliminando any - Parte 1 Foco do Dia Abandonar o any e adotar unknown como a alternativa segura para tipos desconhecidos, for\u00e7ando a verifica\u00e7\u00e3o de tipos antes do uso. Leitura e Teoria (Aprofundada) any : \u00c9 a \"v\u00e1lvula de escape\" do TypeScript. Uma vari\u00e1vel do tipo any desliga completamente a verifica\u00e7\u00e3o de tipos . Voc\u00ea pode chamar qualquer m\u00e9todo, acessar qualquer propriedade, e o compilador n\u00e3o vai reclamar. Isso \u00e9 perigoso e anula o prop\u00f3sito de usar TypeScript. unknown : \u00c9 a alternativa segura. Uma vari\u00e1vel unknown tamb\u00e9m pode receber qualquer valor, mas voc\u00ea n\u00e3o pode fazer nada com ela sem antes provar ao TypeScript qual \u00e9 o seu tipo. Esse processo de prova \u00e9 chamado de narrowing (estreitamento). Caracter\u00edstica any unknown Atribui\u00e7\u00e3o Pode receber qualquer valor Pode receber qualquer valor Opera\u00e7\u00f5es Permite qualquer opera\u00e7\u00e3o N\u00e3o permite nenhuma opera\u00e7\u00e3o Seguran\u00e7a Baixa Alta Necessidade Nenhuma verifica\u00e7\u00e3o Requer verifica\u00e7\u00e3o de tipo Documenta\u00e7\u00e3o Essencial The unknown Type (Handbook) The any Type (Handbook) Pr\u00e1tica Guiada (Passo a Passo) Exemplo 1: O Perigo do any let value: any = \"isto \u00e9 uma string\"; // Nenhuma verifica\u00e7\u00e3o do compilador! value.toFixed(2); // Crash em tempo de execu\u00e7\u00e3o: value.toFixed is not a function Exemplo 2: A Seguran\u00e7a do unknown let safeValue: unknown = \"isto \u00e9 uma string\"; // Erro de compila\u00e7\u00e3o! O TS nos protege. // safeValue.toFixed(2); // Object is of type 'unknown'. Exemplo 3: Usando unknown Corretamente com Verifica\u00e7\u00e3o let anotherSafeValue: unknown = 123.456; if (typeof anotherSafeValue === 'number') { // Dentro deste bloco, o TS sabe que anotherSafeValue \u00e9 um n\u00famero console.log(anotherSafeValue.toFixed(2)); // \"123.46\" } Exerc\u00edcios Pr\u00e1ticos (N\u00edveis Crescentes) N\u00edvel 1: B\u00e1sico Crie uma fun\u00e7\u00e3o logString(value: unknown) que verifica se o valor recebido \u00e9 uma string . Se for, ela o imprime no console. Se n\u00e3o for, ela imprime a mensagem \"Valor n\u00e3o \u00e9 uma string\". Ver Solu\u00e7\u00e3o --- function logString(value: unknown): void { if (typeof value === 'string') { console.log(value); } else { console.log(\"Valor n\u00e3o \u00e9 uma string.\"); } } // Teste logString(\"Ol\u00e1, TypeScript!\"); // \"Ol\u00e1, TypeScript!\" logString(123); // \"Valor n\u00e3o \u00e9 uma string.\" logString({}); // \"Valor n\u00e3o \u00e9 uma string.\" N\u00edvel 2: Intermedi\u00e1rio Crie uma fun\u00e7\u00e3o getDouble(value: unknown): number | null que verifica se o valor \u00e9 um number . Se for, a fun\u00e7\u00e3o deve retornar o dobro do valor. Caso contr\u00e1rio, deve retornar null . Ver Solu\u00e7\u00e3o --- function getDouble(value: unknown): number | null { if (typeof value === 'number') { return value * 2; } return null; } // Teste console.log(getDouble(10)); // 20 console.log(getDouble(\"20\")); // null console.log(getDouble(null)); // null N\u00edvel 3: Avan\u00e7ado Crie uma fun\u00e7\u00e3o safeJsonParse(json: string): unknown | Error . Esta fun\u00e7\u00e3o deve receber uma string JSON, tentar fazer o parse com JSON.parse . Se for bem-sucedido, deve retornar o objeto parseado (como unknown ). Se ocorrer um erro no parse, ela deve capturar a exce\u00e7\u00e3o e retornar um objeto Error . Ver Solu\u00e7\u00e3o --- function safeJsonParse(json: string): unknown | Error { try { // JSON.parse por padr\u00e3o retorna `any`, mas n\u00f3s o atribu\u00edmos a `unknown` // para for\u00e7ar quem chama a fun\u00e7\u00e3o a verificar o tipo do resultado. const parsed: unknown = JSON.parse(json); return parsed; } catch (e) { if (e instanceof Error) { return e; } return new Error(\"Falha desconhecida ao analisar JSON.\"); } } // Teste const validJson = '{\"name\": \"Lucas\", \"id\": 1}'; const invalidJson = '{'name': \"Lucas\"}'; // JSON malformado const result1 = safeJsonParse(validJson); const result2 = safeJsonParse(invalidJson); if (result1 instanceof Error) { console.error(\"Erro no JSON v\u00e1lido:\", result1.message); } else { console.log(\"Sucesso no JSON v\u00e1lido:\", result1); } if (result2 instanceof Error) { console.error(\"Erro no JSON inv\u00e1lido:\", result2.message); } else { console.log(\"Sucesso no JSON inv\u00e1lido:\", result2); } Checklist do Dia [ ] Entendi por que any \u00e9 perigoso e deve ser evitado. [ ] Sei a diferen\u00e7a fundamental entre any e unknown . [ ] Usei typeof para fazer narrowing de um tipo unknown . [ ] Implementei uma fun\u00e7\u00e3o que lida com dados de tipo desconhecido de forma segura. Dia 4: Type Guards e Narrowing Foco do Dia Aprender as t\u00e9cnicas de narrowing (estreitamento de tipo) para que o TypeScript possa inferir um tipo mais espec\u00edfico dentro de um bloco de c\u00f3digo, e criar seus pr\u00f3prios type guards customizados. Leitura e Teoria (Aprofundada) Narrowing \u00e9 o processo pelo qual o TypeScript remove tipos de uma uni\u00e3o. Se voc\u00ea tem string | number , e o TS prova que \u00e9 string , ele \"estreita\" o tipo para apenas string naquele escopo. T\u00e9cnicas de Narrowing: 1. typeof : Para tipos primitivos ( string , number , boolean , etc.). 2. instanceof : Para verificar se um objeto \u00e9 uma inst\u00e2ncia de uma classe. 3. Truthiness : Verificar se um valor n\u00e3o \u00e9 null , undefined , false , 0 , \"\" . 4. Equality ( === ) : Verificar igualdade com um valor literal. 5. in operator : Verificar se um objeto possui uma propriedade com um certo nome. 6. Discriminated Unions : Um padr\u00e3o poderoso onde voc\u00ea usa uma propriedade literal comum ( kind , type , status ) em v\u00e1rios tipos para ajudar o TypeScript a descobrir qual tipo \u00e9. 7. Custom Type Guards (Type Predicates) : Fun\u00e7\u00f5es que retornam um booleano especial: parametro is Tipo . Se a fun\u00e7\u00e3o retornar true , o TypeScript \"confia\" que o par\u00e2metro \u00e9 daquele Tipo no resto do escopo. Documenta\u00e7\u00e3o Essencial Narrowing (Handbook) Using Type Predicates (Custom Type Guards) Pr\u00e1tica Guiada (Passo a Passo) Exemplo 1: typeof function padLeft(padding: number | string, input: string): string { if (typeof padding === \"number\") { return \" \".repeat(padding) + input; } return padding + input; } Exemplo 2: instanceof class Cat { meow() { console.log(\"Meow!\"); } } class Dog { bark() { console.log(\"Woof!\"); } } type Pet = Cat | Dog; function makeSound(pet: Pet) { if (pet instanceof Cat) { pet.meow(); // O TS sabe que `pet` \u00e9 um Cat aqui } } Exemplo 3: in operator interface Movie { title: string; duration: number; } interface TVShow { title: string; seasons: number; } type Media = Movie | TVShow; function getMediaTitle(media: Media) { if ('duration' in media) { return `Filme: ${media.title}`; } // O TS sabe que se n\u00e3o tem 'duration', deve ter 'seasons' return `S\u00e9rie: ${media.title}`; } Exerc\u00edcios Pr\u00e1ticos (N\u00edveis Crescentes) N\u00edvel 1: B\u00e1sico Crie uma fun\u00e7\u00e3o formatInput(input: string | string[]) . Se o input for uma string , retorne a pr\u00f3pria string. Se for um array de strings, retorne as strings unidas por um espa\u00e7o. Use o type guard Array.isArray() . Ver Solu\u00e7\u00e3o --- function formatInput(input: string | string[]): string { if (Array.isArray(input)) { // O TS sabe que `input` \u00e9 string[] aqui return input.join(' '); } // O TS sabe que `input` \u00e9 string aqui return input; } // Teste console.log(formatInput(\"hello\")); // \"hello\" console.log(formatInput([\"hello\", \"world\"])); // \"hello world\" N\u00edvel 2: Intermedi\u00e1rio Defina duas interfaces: Fish com um m\u00e9todo swim() e Bird com um m\u00e9todo fly() . Crie uma fun\u00e7\u00e3o makePetMove(pet: Fish | Bird) . Dentro dela, use um custom type guard isFish(pet): pet is Fish para verificar o tipo do animal e chamar o m\u00e9todo correto ( swim ou fly ). Ver Solu\u00e7\u00e3o --- interface Fish { swim: () => void; } interface Bird { fly: () => void; } type Animal = Fish | Bird; // Custom type guard function isFish(pet: Animal): pet is Fish { // Se o pet tem a propriedade 'swim', ent\u00e3o ele \u00e9 um Fish. // A asser\u00e7\u00e3o `(pet as Fish)` \u00e9 necess\u00e1ria para checar a propriedade // que pode n\u00e3o existir no tipo Animal. return (pet as Fish).swim !== undefined; } function makePetMove(pet: Animal) { if (isFish(pet)) { pet.swim(); } else { pet.fly(); } } // Teste const nemo: Fish = { swim: () => console.log(\"Nemo est\u00e1 nadando.\") }; const zazu: Bird = { fly: () => console.log(\"Zazu est\u00e1 voando.\") }; makePetMove(nemo); makePetMove(zazu); N\u00edvel 3: Avan\u00e7ado Implemente o padr\u00e3o Discriminated Union . Crie duas interfaces, SuccessResponse e ErrorResponse . Ambas devem ter uma propriedade status , mas com valores literais diferentes ( 'success' e 'error' ). Crie uma fun\u00e7\u00e3o handleApiResponse(response: ApiResponse) que usa a propriedade status para identificar o tipo da resposta e logar os dados ou a mensagem de erro apropriada. Ver Solu\u00e7\u00e3o --- interface SuccessResponse { status: 'success'; // Propriedade discriminante data: { id: number; name: string }; } interface ErrorResponse { status: 'error'; // Propriedade discriminante error: { code: number; message: string }; } type ApiResponse = SuccessResponse | ErrorResponse; function handleApiResponse(response: ApiResponse) { // Usando um switch na propriedade discriminante switch (response.status) { case 'success': // O TS sabe que `response` \u00e9 SuccessResponse aqui console.log(\"Dados recebidos:\", response.data.name); break; case 'error': // O TS sabe que `response` \u00e9 ErrorResponse aqui console.error(\"Ocorreu um erro:\", response.error.message); break; } } // Teste const success: ApiResponse = { status: 'success', data: { id: 1, name: 'Produto A' } }; const failure: ApiResponse = { status: 'error', error: { code: 404, message: 'Produto n\u00e3o encontrado' } }; handleApiResponse(success); handleApiResponse(failure); Checklist do Dia [ ] Sei usar typeof , instanceof e in para narrowing. [ ] Entendi o padr\u00e3o de Discriminated Unions . [ ] Criei e usei um custom type guard ( is Type ). [ ] Apliquei narrowing para acessar propriedades de tipos em uma uni\u00e3o de forma segura. Dia 5: Utility Types Nativos - Record e B\u00e1sicos Foco do Dia Utilizar os Utility Types nativos do TypeScript para transformar e criar novos tipos a partir de tipos existentes, com foco especial em Record<K,V> . Leitura e Teoria (Aprofundada) Utility Types s\u00e3o ferramentas que ajudam a manipular tipos sem ter que reescrev\u00ea-los. Record<Keys, Type> : Constr\u00f3i um tipo de objeto cujas chaves s\u00e3o Keys e os valores s\u00e3o Type . Perfeito para dicion\u00e1rios ou mapeamentos onde as chaves s\u00e3o de um conjunto conhecido. Partial<Type> : Constr\u00f3i um tipo com todas as propriedades de Type definidas como opcionais . \u00datil para payloads de atualiza\u00e7\u00e3o ( update ). Required<Type> : O oposto de Partial . Torna todas as propriedades obrigat\u00f3rias . Pick<Type, Keys> : Constr\u00f3i um tipo \"pegando\" um conjunto de propriedades Keys de Type . Omit<Type, Keys> : O oposto de Pick . Constr\u00f3i um tipo com todas as propriedades de Type , exceto as Keys . Readonly<Type> : Torna todas as propriedades de Type somente leitura. Documenta\u00e7\u00e3o Essencial Utility Types (Handbook) Pr\u00e1tica Guiada (Passo a Passo) Exemplo 1: Partial para atualiza\u00e7\u00f5es interface User { name: string; age: number; email: string; } function updateUser(user: User, fieldsToUpdate: Partial<User>) { return { ...user, ...fieldsToUpdate }; } const user1 = { name: 'Lucas', age: 30, email: 'lucas@test.com' }; const updatedUser = updateUser(user1, { age: 31 }); Exemplo 2: Pick para dados p\u00fablicos interface UserWithPassword { id: number; name: string; passwordHash: string; } type PublicUser = Pick<UserWithPassword, 'id' | 'name'>; const publicProfile: PublicUser = { id: 1, name: 'Ana' }; Exemplo 3: Omit para remover dados sens\u00edveis type UserWithoutPassword = Omit<UserWithPassword, 'passwordHash'>; const userToSend: UserWithoutPassword = { id: 2, name: 'Beto' }; Exemplo 4: Record para um dicion\u00e1rio de configura\u00e7\u00f5es type Theme = 'light' | 'dark'; interface ThemeSettings { color: string; background: string; } const themes: Record<Theme, ThemeSettings> = { light: { color: '#000', background: '#fff' }, dark: { color: '#fff', background: '#000' }, }; Exerc\u00edcios Pr\u00e1ticos (N\u00edveis Crescentes) N\u00edvel 1: B\u00e1sico Dada a interface Book { id: number; title: string; author: string; pages: number; } , crie um tipo BookPreview que contenha apenas as propriedades title e author usando um Utility Type. Ver Solu\u00e7\u00e3o --- interface Book { id: number; title: string; author: string; pages: number; } type BookPreview = Pick<Book, 'title' | 'author'>; // Teste const preview: BookPreview = { title: \"Duna\", author: \"Frank Herbert\" }; N\u00edvel 2: Intermedi\u00e1rio Crie uma interface AppSettings com todas as propriedades opcionais: theme: string , fontSize: number , language: string . Em seguida, crie um tipo RequiredAppSettings que tenha todas essas mesmas propriedades, mas como obrigat\u00f3rias. Por fim, crie uma fun\u00e7\u00e3o applySettings(settings: RequiredAppSettings) . Ver Solu\u00e7\u00e3o --- interface AppSettings { theme?: string; fontSize?: number; language?: string; } type RequiredAppSettings = Required<AppSettings>; function applySettings(settings: RequiredAppSettings) { console.log(\"Aplicando configura\u00e7\u00f5es:\", settings); } // Teste const mySettings: RequiredAppSettings = { theme: 'dark', fontSize: 14, language: 'pt-BR' }; applySettings(mySettings); // const invalidSettings: RequiredAppSettings = { theme: 'light' }; // Erro: fontSize e language est\u00e3o faltando N\u00edvel 3: Avan\u00e7ado Crie um enum chamado UserRole com os valores ADMIN , EDITOR , e VIEWER . Crie um tipo Permissions que define o que cada papel pode fazer (ex: { canWrite: boolean; canRead: boolean; } ). Use o Utility Type Record para criar um objeto rolePermissions que mapeia cada UserRole para seu respectivo objeto Permissions de forma type-safe. Ver Solu\u00e7\u00e3o --- enum UserRole { ADMIN = 'admin', EDITOR = 'editor', VIEWER = 'viewer' } interface Permissions { canWrite: boolean; canRead: boolean; canDelete: boolean; } const rolePermissions: Record<UserRole, Permissions> = { [UserRole.ADMIN]: { canWrite: true, canRead: true, canDelete: true }, [UserRole.EDITOR]: { canWrite: true, canRead: true, canDelete: false }, [UserRole.VIEWER]: { canWrite: false, canRead: true, canDelete: false }, }; // Teste function checkPermissions(role: UserRole) { const permissions = rolePermissions[role]; console.log(`Permiss\u00f5es para ${role.toUpperCase()}:`, permissions); } checkPermissions(UserRole.EDITOR); // checkPermissions('guest'); // Erro: Argument of type '\"guest\"' is not assignable to parameter of type 'UserRole'. Checklist do Dia [ ] Entendi o prop\u00f3sito do Record<K, V> . [ ] Usei Record para criar um dicion\u00e1rio type-safe. [ ] Sei a diferen\u00e7a entre Pick e Omit . [ ] Combinei Partial e Required para manipular tipos. Dia 6: Template Literal Types Foco do Dia Criar tipos de string altamente espec\u00edficos e din\u00e2micos usando Template Literals, permitindo valida\u00e7\u00e3o de formatos de string em tempo de compila\u00e7\u00e3o. Leitura e Teoria (Aprofundada) Template Literal Types usam a mesma sintaxe de template strings do JavaScript ( ${} ), mas no n\u00edvel dos tipos. Eles permitem construir novos tipos de string concatenando outros tipos, especialmente uni\u00f5es. Com Unions (o superpoder): type HttpMethod = 'GET' | 'POST' | 'PUT' | 'DELETE'; type ApiEndpoint = 'users' | 'products'; // Gera uma uni\u00e3o de todas as 8 combina\u00e7\u00f5es poss\u00edveis: // \"GET /api/users\" | \"POST /api/users\" | ... type ApiRequestSignature = `${HttpMethod} /api/${ApiEndpoint}`; Com Helpers de Manipula\u00e7\u00e3o de String: TypeScript inclui tipos utilit\u00e1rios para manipular strings dentro dos tipos: Uppercase<S> , Lowercase<S> , Capitalize<S> , Uncapitalize<S> . Documenta\u00e7\u00e3o Essencial Template Literal Types (Handbook) Pr\u00e1tica Guiada (Passo a Passo) Exemplo 1: Concatena\u00e7\u00e3o Simples type World = \"World\"; type Greeting = `Hello ${World}`; const g: Greeting = \"Hello World\"; // V\u00e1lido Exemplo 2: Uni\u00e3o de Tipos type MarginSide = 'top' | 'right' | 'bottom' | 'left'; type MarginProperty = `margin-${MarginSide}`; const m: MarginProperty = \"margin-left\"; // V\u00e1lido Exemplo 3: Capitalize para Nomes de Eventos type EventName = 'click' | 'scroll' | 'focus'; type HandlerName = `on${Capitalize<EventName>}`; const handler: HandlerName = \"onClick\"; // V\u00e1lido Exerc\u00edcios Pr\u00e1ticos (N\u00edveis Crescentes) N\u00edvel 1: B\u00e1sico Crie um tipo Size ( 'small' | 'medium' | 'large' ) e um tipo Color ( 'red' | 'blue' | 'green' ). Crie um terceiro tipo, TShirtSKU , que combine os dois para formar um identificador de produto, como por exemplo 'small-red' . Ver Solu\u00e7\u00e3o --- type Size = 'small' | 'medium' | 'large'; type Color = 'red' | 'blue' | 'green'; type TShirtSKU = `${Size}-${Color}`; // Teste const myShirt: TShirtSKU = \"medium-blue\"; const anotherShirt: TShirtSKU = \"large-red\"; // const invalidShirt: TShirtSKU = \"small-yellow\"; // Erro: 'yellow' n\u00e3o \u00e9 uma cor v\u00e1lida N\u00edvel 2: Intermedi\u00e1rio Crie um tipo IconName que represente nomes de \u00edcones no formato icon-[nome] , onde [nome] pode ser user , home , ou settings . Em seguida, crie um tipo IconSize que pode ser 16 , 24 , ou 32 . Finalmente, crie um tipo IconId que combine os dois, no formato icon-[nome]-[tamanho]px . Ver Solu\u00e7\u00e3o --- type IconName = `icon-${'user' | 'home' | 'settings'}`; type IconSize = 16 | 24 | 32; type IconId = `${IconName}-${IconSize}px`; // Teste const userIcon: IconId = \"icon-user-24px\"; const homeIcon: IconId = \"icon-home-32px\"; // const invalidIcon: IconId = \"icon-settings-20px\"; // Erro: 20 n\u00e3o \u00e9 um tamanho v\u00e1lido N\u00edvel 3: Avan\u00e7ado Crie um tipo ApiRoute que valide os seguintes formatos de rota para uma API RESTful: 1. Listar todos os recursos: /api/[recurso] (ex: /api/users ) 2. Obter um recurso espec\u00edfico: /api/[recurso]/[id] (ex: /api/posts/123 ) Onde [recurso] pode ser users , posts , ou products , e [id] pode ser string ou number . Ver Solu\u00e7\u00e3o --- type Resource = 'users' | 'posts' | 'products'; type ResourceId = string | number; type ApiRoute = `/api/${Resource}` | `/api/${Resource}/${ResourceId}`; // Teste const listUsers: ApiRoute = '/api/users'; const getPost: ApiRoute = '/api/posts/post-id-abc'; const getProduct: ApiRoute = '/api/products/12345'; // const invalidRoute1: ApiRoute = '/api/orders'; // Erro: 'orders' n\u00e3o \u00e9 um Resource // const invalidRoute2: ApiRoute = '/api/users/1/comments'; // Erro: formato inv\u00e1lido Checklist do Dia [ ] Criei um tipo de string simples com template literals. [ ] Usei uni\u00f5es para gerar m\u00faltiplas strings poss\u00edveis a partir de um template. [ ] Usei Capitalize e outras helpers para transformar strings em tipos. [ ] Constru\u00ed um tipo pr\u00e1tico para validar um formato de string (rotas de API). Dia 7: Projeto Mini #1 - Consolidando Conceitos Foco do Dia Consolidar todos os conceitos da semana (Classes, this , unknown , Type Guards, Utility Types) em um \u00fanico projeto pr\u00e1tico: um BaseRepository gen\u00e9rico para opera\u00e7\u00f5es CRUD em mem\u00f3ria. Leitura e Teoria (Revis\u00e3o) Classes e Generics ( <T> ) : Para criar uma \"planta\" reutiliz\u00e1vel. Constraints ( extends ) : Para garantir que o tipo T tenha as propriedades que precisamos (como id ). Record<K, V> : Para criar um armazenamento em mem\u00f3ria type-safe. Partial e Omit : Para criar um payload de atualiza\u00e7\u00e3o seguro. Type Guards : Para verificar se um item existe antes de realizar uma opera\u00e7\u00e3o. Exerc\u00edcios Pr\u00e1ticos (N\u00edveis Crescentes) N\u00edvel 1: B\u00e1sico Crie uma classe StringStore n\u00e3o gen\u00e9rica . Ela deve ter um array privado para armazenar strings. Implemente dois m\u00e9todos: add(item: string) e getAll(): string[] . Ver Solu\u00e7\u00e3o --- class StringStore { private data: string[] = []; public add(item: string): void { this.data.push(item); } public getAll(): string[] { return this.data; } } // Teste const store = new StringStore(); store.add(\"ma\u00e7\u00e3\"); store.add(\"banana\"); console.log(store.getAll()); // [\"ma\u00e7\u00e3\", \"banana\"] N\u00edvel 2: Intermedi\u00e1rio Crie uma classe KeyValueStore<V> que seja gen\u00e9rica para o valor ( V ), mas a chave seja sempre string . Use um Record<string, V> para o armazenamento privado. Implemente os m\u00e9todos set(key: string, value: V) e get(key: string): V | undefined . Ver Solu\u00e7\u00e3o --- class KeyValueStore<V> { private data: Record<string, V> = {}; public set(key: string, value: V): void { this.data[key] = value; } public get(key: string): V | undefined { return this.data[key]; } } // Teste com n\u00fameros const userAges = new KeyValueStore<number>(); userAges.set(\"Lucas\", 30); userAges.set(\"Ana\", 25); console.log(userAges.get(\"Lucas\")); // 30 // Teste com objetos interface User { id: number; name: string; } const users = new KeyValueStore<User>(); users.set(\"user-1\", { id: 1, name: \"Lucas\" }); console.log(users.get(\"user-1\")); // { id: 1, name: \"Lucas\" } N\u00edvel 3: Avan\u00e7ado Implemente a classe BaseRepository<T> . Esta classe deve ser gen\u00e9rica e funcionar para qualquer tipo T que satisfa\u00e7a a constraint BaseEntity (que possui uma propriedade id do tipo string | number ). Requisitos: 1. Crie a interface BaseEntity { id: string | number; } . 2. A classe BaseRepository<T extends BaseEntity> deve usar um Record para armazenamento privado. 3. Implemente os m\u00e9todos: create(item: T) , findById(id: T['id']) , update(id: T['id'], payload: Partial<Omit<T, 'id'>>) , e delete(id: T['id']) . Ver Solu\u00e7\u00e3o --- // A constraint que todas as entidades devem seguir interface BaseEntity { id: string | number; } class BaseRepository<T extends BaseEntity> { private data: Record<T['id'], T> = {} as Record<T['id'], T>; public create(item: T): T { this.data[item.id] = item; return item; } public findById(id: T['id']): T | undefined { return this.data[id]; } public update(id: T['id'], payload: Partial<Omit<T, 'id'>>): T | undefined { const currentItem = this.findById(id); if (!currentItem) { return undefined; } const updatedItem = { ...currentItem, ...payload } as T; this.data[id] = updatedItem; return updatedItem; } public delete(id: T['id']): boolean { if (!this.findById(id)) { return false; } delete this.data[id]; return true; } public findAll(): T[] { return Object.values(this.data); } } // Teste interface Post extends BaseEntity { id: string; title: string; content: string; } const postRepository = new BaseRepository<Post>(); postRepository.create({ id: 'post-1', title: \"Primeiro Post\", content: \"...\" }); postRepository.create({ id: 'post-2', title: \"Segundo Post\", content: \"...\" }); postRepository.update('post-1', { title: \"T\u00edtulo Atualizado\" }); postRepository.delete('post-2'); console.log(postRepository.findAll()); // [ { id: 'post-1', title: 'T\u00edtulo Atualizado', content: '...' } ] Checklist do Dia [ ] Criei uma classe gen\u00e9rica com constraints ( extends ). [ ] Usei Record como um armazenamento em mem\u00f3ria type-safe. [ ] Implementei m\u00e9todos CRUD (Create, Read, Update, Delete). [ ] Usei Partial e Omit para criar um payload de atualiza\u00e7\u00e3o seguro. [ ] Sinto-me mais confiante para aplicar os conceitos da Semana 1 em um projeto real.","title":"Semana 1"},{"location":"Ts/Semana1/#semana-1-fundamentos-criticos-e-classes","text":"","title":"Semana 1: Fundamentos Cr\u00edticos e Classes"},{"location":"Ts/Semana1/#visao-geral-da-semana","text":"Nesta primeira semana, nosso objetivo \u00e9 construir uma base s\u00f3lida em TypeScript. Vamos focar em dominar o sistema de classes, entender o comportamento do this e, crucialmente, come\u00e7ar a jornada para eliminar o any do nosso c\u00f3digo, substituindo-o por padr\u00f5es de tipagem seguros e robustos como unknown e type guards. Ao final da semana, voc\u00ea ter\u00e1 as ferramentas para construir componentes encapsulados e reutiliz\u00e1veis.","title":"Vis\u00e3o Geral da Semana"},{"location":"Ts/Semana1/#dia-1-classes-fundamentais","text":"","title":"Dia 1: Classes Fundamentais"},{"location":"Ts/Semana1/#foco-do-dia","text":"Construir e entender a estrutura de classes em TypeScript, incluindo como inicializar, controlar o acesso a propriedades e definir o comportamento atrav\u00e9s de m\u00e9todos.","title":"Foco do Dia"},{"location":"Ts/Semana1/#leitura-e-teoria-aprofundada","text":"Classes s\u00e3o um dos pilares da programa\u00e7\u00e3o orientada a objetos. Elas s\u00e3o \"plantas\" para criar objetos. Propriedades (Properties) : S\u00e3o as vari\u00e1veis de uma classe. Elas definem o estado de um objeto. M\u00e9todos (Methods) : S\u00e3o as fun\u00e7\u00f5es de uma classe. Eles definem o comportamento de um objeto. Construtor (Constructor) : Um m\u00e9todo especial para criar e inicializar um objeto. Ele \u00e9 chamado automaticamente quando usamos a palavra-chave new . Modificadores de Acesso (Access Modifiers) : public : (padr\u00e3o) A propriedade ou m\u00e9todo pode ser acessado de qualquer lugar. private : A propriedade ou m\u00e9todo s\u00f3 pode ser acessado de dentro da pr\u00f3pria classe . Isso \u00e9 chamado de encapsulamento e \u00e9 crucial para proteger os dados e esconder a complexidade. protected : Pode ser acessado de dentro da classe e de classes que a herdam ( extends ). Veremos mais sobre heran\u00e7a na Semana 2. readonly : Uma propriedade marcada como readonly s\u00f3 pode receber um valor durante a sua declara\u00e7\u00e3o ou dentro do construtor. Garante imutabilidade ap\u00f3s a cria\u00e7\u00e3o do objeto. Parameter Properties : Um atalho do TypeScript para declarar e inicializar propriedades diretamente nos par\u00e2metros do construtor.","title":"Leitura e Teoria (Aprofundada)"},{"location":"Ts/Semana1/#documentacao-essencial","text":"Classes (TypeScript Handbook) Parameter Properties (TypeScript Handbook)","title":"Documenta\u00e7\u00e3o Essencial"},{"location":"Ts/Semana1/#pratica-guiada-passo-a-passo","text":"Exemplo 1: Classe B\u00e1sica class Player { // Propriedade p\u00fablica, acess\u00edvel de qualquer lugar health: number = 100; // M\u00e9todo p\u00fablico attack() { console.log(\"O jogador ataca!\"); } } const player1 = new Player(); console.log(player1.health); // 100 player1.attack(); // \"O jogador ataca!\" Exemplo 2: Encapsulamento com private e readonly class BankAccount { public readonly accountNumber: string; private balance: number; constructor(accountNumber: string, initialBalance: number) { this.accountNumber = accountNumber; this.balance = initialBalance; } // M\u00e9todo p\u00fablico para acessar um dado privado de forma controlada public getBalance(): number { // Aqui poder\u00edamos adicionar l\u00f3gica de permiss\u00e3o, por exemplo return this.balance; } // M\u00e9todo p\u00fablico para modificar um dado privado public deposit(amount: number): void { if (amount > 0) { this.balance += amount; } } } const myAccount = new BankAccount(\"12345-6\", 500); // myAccount.balance = 10000; // Erro: 'balance' \u00e9 privado. // myAccount.accountNumber = \"98765-4\"; // Erro: 'accountNumber' \u00e9 readonly. myAccount.deposit(150); console.log(myAccount.getBalance()); // 650 Exemplo 3: Atalho com Parameter Properties class Car { // Declara e inicializa as propriedades diretamente no construtor constructor( public readonly model: string, private year: number ) {} public getCarInfo(): string { return `Carro: ${this.model}, Ano: ${this.year}`; } } const myCar = new Car(\"Fusca\", 1978); console.log(myCar.model); // \"Fusca\" console.log(myCar.getCarInfo()); // \"Carro: Fusca, Ano: 1978\"","title":"Pr\u00e1tica Guiada (Passo a Passo)"},{"location":"Ts/Semana1/#exercicios-praticos-niveis-crescentes","text":"N\u00edvel 1: B\u00e1sico Crie uma classe Rectangle com propriedades width e height (ambas public e do tipo number ). Adicione um m\u00e9todo getArea() que retorna a \u00e1rea do ret\u00e2ngulo ( width * height ). Ver Solu\u00e7\u00e3o --- class Rectangle { public width: number; public height: number; constructor(width: number, height: number) { this.width = width; this.height = height; } public getArea(): number { return this.width * this.height; } } // Teste const rect = new Rectangle(10, 20); console.log(rect.getArea()); // 200 N\u00edvel 2: Intermedi\u00e1rio Crie uma classe Product com propriedades name (string) e price (number), ambas private . Use parameter properties . Adicione um m\u00e9todo p\u00fablico getPrice() para ler o pre\u00e7o e um m\u00e9todo setPrice(newPrice: number) que s\u00f3 permite a altera\u00e7\u00e3o se o newPrice for maior que zero. Ver Solu\u00e7\u00e3o --- class Product { constructor( private name: string, private price: number ) {} public getPrice(): number { return this.price; } public setPrice(newPrice: number): void { if (newPrice > 0) { this.price = newPrice; console.log(`O pre\u00e7o de ${this.name} foi atualizado para ${newPrice}.`); } else { console.log(\"Pre\u00e7o inv\u00e1lido. O valor deve ser maior que zero.\"); } } } // Teste const book = new Product(\"O Senhor dos An\u00e9is\", 50); console.log(book.getPrice()); // 50 book.setPrice(65); console.log(book.getPrice()); // 65 book.setPrice(-10); // \"Pre\u00e7o inv\u00e1lido...\" N\u00edvel 3: Avan\u00e7ado Implemente a classe DatabaseConnection que simula o padr\u00e3o de constructor overloading . A classe deve poder ser instanciada de duas formas: 1. new DatabaseConnection(url: string) 2. new DatabaseConnection(host: string, port: number, database: string) O construtor deve ter uma \u00fanica implementa\u00e7\u00e3o que verifica os argumentos recebidos e monta a connectionString interna de acordo. Ver Solu\u00e7\u00e3o --- class DatabaseConnection { private connectionString: string; // Assinatura de sobrecarga 1 constructor(url: string); // Assinatura de sobrecarga 2 constructor(host: string, port: number, database: string); // Implementa\u00e7\u00e3o real do construtor constructor(arg1: string, arg2?: number, arg3?: string) { // Verifica se os argumentos correspondem \u00e0 segunda assinatura if (typeof arg2 === 'number' && typeof arg3 === 'string') { const host = arg1; const port = arg2; const database = arg3; this.connectionString = `mongodb://${host}:${port}/${database}`; } else { // Caso contr\u00e1rio, trata como a primeira assinatura const url = arg1; this.connectionString = url; } } public connect(): void { console.log(`Conectando a: ${this.connectionString}`); } } // Teste const connFromUrl = new DatabaseConnection('mysql://user:pass@server/db'); connFromUrl.connect(); // \"Conectando a: mysql://user:pass@server/db\" const connFromParts = new DatabaseConnection('localhost', 5432, 'postgres'); connFromParts.connect(); // \"Conectando a: postgresql://localhost:5432/postgres\"","title":"Exerc\u00edcios Pr\u00e1ticos (N\u00edveis Crescentes)"},{"location":"Ts/Semana1/#checklist-do-dia","text":"[ ] Entendi a diferen\u00e7a entre public e private . [ ] Sei por que readonly \u00e9 \u00fatil para imutabilidade. [ ] Usei o atalho de parameter properties . [ ] Implementei o padr\u00e3o de \"overload\" de construtor em TypeScript.","title":"Checklist do Dia"},{"location":"Ts/Semana1/#dia-2-contexto-do-this-parte-1","text":"","title":"Dia 2: Contexto do this - Parte 1"},{"location":"Ts/Semana1/#foco-do-dia_1","text":"Entender como o this funciona em JavaScript/TypeScript e como garantir que ele se refira ao contexto correto, especialmente em callbacks e m\u00e9todos encadeados.","title":"Foco do Dia"},{"location":"Ts/Semana1/#leitura-e-teoria-aprofundada_1","text":"O this \u00e9 uma das fontes mais comuns de bugs em JavaScript. Seu valor \u00e9 determinado por como a fun\u00e7\u00e3o \u00e9 chamada (call-site) , n\u00e3o onde ela \u00e9 definida. Fun\u00e7\u00e3o Regular ( function() {} ou metodo() {} ) : O this \u00e9 din\u00e2mico. Se a fun\u00e7\u00e3o \u00e9 chamada como obj.metodo() , this \u00e9 obj . Se a fun\u00e7\u00e3o \u00e9 simplesmente chamada ( funcao() ), this \u00e9 undefined (em 'strict mode', o padr\u00e3o em m\u00f3dulos e classes) ou o objeto global ( window no browser). Arrow Function ( () => {} ) : O this \u00e9 est\u00e1tico (l\u00e9xico). Ela n\u00e3o possui seu pr\u00f3prio this . Ela \"herda\" o this do escopo onde foi definida . Dentro de um m\u00e9todo de classe definido como arrow function, this sempre se referir\u00e1 \u00e0 inst\u00e2ncia da classe.","title":"Leitura e Teoria (Aprofundada)"},{"location":"Ts/Semana1/#documentacao-essencial_1","text":"O this em JavaScript (MDN) - Essencial para entender a base. This Types (TypeScript Handbook)","title":"Documenta\u00e7\u00e3o Essencial"},{"location":"Ts/Semana1/#pratica-guiada-passo-a-passo_1","text":"Exemplo 1: O Problema - Perdendo o this class Greeter { prefix = \"Hello, \"; // M\u00e9todo de classe normal greet(name: string) { console.log(this.prefix + name); } } const greeter = new Greeter(); const greetFunction = greeter.greet; // A fun\u00e7\u00e3o \u00e9 extra\u00edda do objeto // greetFunction(\"Mundo\"); // Crash! `this` \u00e9 undefined aqui. Exemplo 2: A Solu\u00e7\u00e3o - Arrow Function como M\u00e9todo class SafeGreeter { prefix = \"Hello, \"; // O m\u00e9todo \u00e9 uma propriedade que cont\u00e9m uma arrow function // A arrow function \"lembra\" do `this` de onde foi criada greet = (name: string) => { console.log(this.prefix + name); } } const safeGreeter = new SafeGreeter(); const safeGreetFunction = safeGreeter.greet; safeGreetFunction(\"Mundo\"); // Funciona! \"Hello, Mundo\" Exemplo 3: Method Chaining com o tipo this class StringBuilder { private parts: string[] = []; add(part: string): this { this.parts.push(part); return this; // Retornar `this` permite o encadeamento } build(): string { return this.parts.join(\"\"); } } const builder = new StringBuilder(); const result = builder.add(\"Hello, \").add(\"World!\").build(); console.log(result); // \"Hello, World!\"","title":"Pr\u00e1tica Guiada (Passo a Passo)"},{"location":"Ts/Semana1/#exercicios-praticos-niveis-crescentes_1","text":"N\u00edvel 1: B\u00e1sico Crie uma classe Logger com uma propriedade message . Crie um m\u00e9todo printMessage() . Chame este m\u00e9todo dentro de um setTimeout e observe o erro. Em seguida, corrija o problema para que a mensagem seja impressa corretamente ap\u00f3s 1 segundo. Ver Solu\u00e7\u00e3o --- class Logger { constructor(private message: string = \"Opera\u00e7\u00e3o conclu\u00edda!\") {} // A solu\u00e7\u00e3o \u00e9 definir o m\u00e9todo como uma arrow function printMessage = () => { console.log(this.message); } public schedulePrint(): void { console.log(\"Agendando impress\u00e3o...\"); setTimeout(this.printMessage, 1000); } } // Teste const logger = new Logger(); logger.schedulePrint(); // Ap\u00f3s 1s: \"Opera\u00e7\u00e3o conclu\u00edda!\" N\u00edvel 2: Intermedi\u00e1rio Crie uma classe Calculator com uma propriedade value (number, private, inicia em 0). Crie os m\u00e9todos add(num: number) , subtract(num: number) e multiply(num: number) . Cada um desses m\u00e9todos deve modificar o value e retornar this para permitir o encadeamento de chamadas. Ver Solu\u00e7\u00e3o --- class Calculator { private value: number = 0; constructor(initialValue: number = 0) { this.value = initialValue; } add(num: number): this { this.value += num; return this; } subtract(num: number): this { this.value -= num; return this; } multiply(num: number): this { this.value *= num; return this; } getResult(): number { return this.value; } } // Teste const calc = new Calculator(10); const result = calc.add(5).subtract(3).multiply(2).getResult(); // (10 + 5 - 3) * 2 = 24 console.log(result); // 24 N\u00edvel 3: Avan\u00e7ado Crie uma classe DOMManager . Ela deve ter um m\u00e9todo createElement(tag: string, text: string) que cria um elemento (simulado por um objeto {tag, text} ) e o armazena em um array private elements . Crie um m\u00e9todo render(containerId: string) que deveria (em um cen\u00e1rio real) adicionar os elementos a um cont\u00eainer do DOM. O m\u00e9todo render deve ser chamado por um objeto externo, simulando um event listener, ent\u00e3o voc\u00ea precisa garantir que o this dentro de render ainda se refira \u00e0 inst\u00e2ncia de DOMManager . Ver Solu\u00e7\u00e3o --- interface Element { tag: string; text: string; } class DOMManager { private elements: Element[] = []; public createElement(tag: string, text: string): this { this.elements.push({ tag, text }); return this; } // Definido como arrow function para garantir o `this` l\u00e9xico public render = (containerId: string) => { // Em um app real, far\u00edamos: const container = document.getElementById(containerId); console.log(`Renderizando ${this.elements.length} elementos em #${containerId}`); for (const el of this.elements) { console.log(` <${el.tag}>${el.text}</${el.tag}>`); } } } // Teste const manager = new DOMManager(); manager.createElement(\"h1\", \"T\u00edtulo Principal\").createElement(\"p\", \"Este \u00e9 um par\u00e1grafo.\"); // Simulando um sistema de eventos que pega a fun\u00e7\u00e3o e a chama depois const eventSystem = { listeners: {} as Record<string, () => void>, addEventListener: function(eventName: string, callback: () => void) { this.listeners[eventName] = callback; }, trigger: function(eventName: string) { this.listeners[eventName](); } }; // Passamos o m\u00e9todo `render` como callback. Gra\u00e7as \u00e0 arrow function, o `this` funciona. eventSystem.addEventListener(\"renderPage\", () => manager.render(\"app-root\")); eventSystem.trigger(\"renderPage\");","title":"Exerc\u00edcios Pr\u00e1ticos (N\u00edveis Crescentes)"},{"location":"Ts/Semana1/#checklist-do-dia_1","text":"[ ] Sei explicar a diferen\u00e7a de this entre function() e () => {} . [ ] Consigo resolver um problema de this perdido em um callback. [ ] Entendi como return this; permite o encadeamento de m\u00e9todos. [ ] Implementei uma classe com uma API fluente.","title":"Checklist do Dia"},{"location":"Ts/Semana1/#dia-3-eliminando-any-parte-1","text":"","title":"Dia 3: Eliminando any - Parte 1"},{"location":"Ts/Semana1/#foco-do-dia_2","text":"Abandonar o any e adotar unknown como a alternativa segura para tipos desconhecidos, for\u00e7ando a verifica\u00e7\u00e3o de tipos antes do uso.","title":"Foco do Dia"},{"location":"Ts/Semana1/#leitura-e-teoria-aprofundada_2","text":"any : \u00c9 a \"v\u00e1lvula de escape\" do TypeScript. Uma vari\u00e1vel do tipo any desliga completamente a verifica\u00e7\u00e3o de tipos . Voc\u00ea pode chamar qualquer m\u00e9todo, acessar qualquer propriedade, e o compilador n\u00e3o vai reclamar. Isso \u00e9 perigoso e anula o prop\u00f3sito de usar TypeScript. unknown : \u00c9 a alternativa segura. Uma vari\u00e1vel unknown tamb\u00e9m pode receber qualquer valor, mas voc\u00ea n\u00e3o pode fazer nada com ela sem antes provar ao TypeScript qual \u00e9 o seu tipo. Esse processo de prova \u00e9 chamado de narrowing (estreitamento). Caracter\u00edstica any unknown Atribui\u00e7\u00e3o Pode receber qualquer valor Pode receber qualquer valor Opera\u00e7\u00f5es Permite qualquer opera\u00e7\u00e3o N\u00e3o permite nenhuma opera\u00e7\u00e3o Seguran\u00e7a Baixa Alta Necessidade Nenhuma verifica\u00e7\u00e3o Requer verifica\u00e7\u00e3o de tipo","title":"Leitura e Teoria (Aprofundada)"},{"location":"Ts/Semana1/#documentacao-essencial_2","text":"The unknown Type (Handbook) The any Type (Handbook)","title":"Documenta\u00e7\u00e3o Essencial"},{"location":"Ts/Semana1/#pratica-guiada-passo-a-passo_2","text":"Exemplo 1: O Perigo do any let value: any = \"isto \u00e9 uma string\"; // Nenhuma verifica\u00e7\u00e3o do compilador! value.toFixed(2); // Crash em tempo de execu\u00e7\u00e3o: value.toFixed is not a function Exemplo 2: A Seguran\u00e7a do unknown let safeValue: unknown = \"isto \u00e9 uma string\"; // Erro de compila\u00e7\u00e3o! O TS nos protege. // safeValue.toFixed(2); // Object is of type 'unknown'. Exemplo 3: Usando unknown Corretamente com Verifica\u00e7\u00e3o let anotherSafeValue: unknown = 123.456; if (typeof anotherSafeValue === 'number') { // Dentro deste bloco, o TS sabe que anotherSafeValue \u00e9 um n\u00famero console.log(anotherSafeValue.toFixed(2)); // \"123.46\" }","title":"Pr\u00e1tica Guiada (Passo a Passo)"},{"location":"Ts/Semana1/#exercicios-praticos-niveis-crescentes_2","text":"N\u00edvel 1: B\u00e1sico Crie uma fun\u00e7\u00e3o logString(value: unknown) que verifica se o valor recebido \u00e9 uma string . Se for, ela o imprime no console. Se n\u00e3o for, ela imprime a mensagem \"Valor n\u00e3o \u00e9 uma string\". Ver Solu\u00e7\u00e3o --- function logString(value: unknown): void { if (typeof value === 'string') { console.log(value); } else { console.log(\"Valor n\u00e3o \u00e9 uma string.\"); } } // Teste logString(\"Ol\u00e1, TypeScript!\"); // \"Ol\u00e1, TypeScript!\" logString(123); // \"Valor n\u00e3o \u00e9 uma string.\" logString({}); // \"Valor n\u00e3o \u00e9 uma string.\" N\u00edvel 2: Intermedi\u00e1rio Crie uma fun\u00e7\u00e3o getDouble(value: unknown): number | null que verifica se o valor \u00e9 um number . Se for, a fun\u00e7\u00e3o deve retornar o dobro do valor. Caso contr\u00e1rio, deve retornar null . Ver Solu\u00e7\u00e3o --- function getDouble(value: unknown): number | null { if (typeof value === 'number') { return value * 2; } return null; } // Teste console.log(getDouble(10)); // 20 console.log(getDouble(\"20\")); // null console.log(getDouble(null)); // null N\u00edvel 3: Avan\u00e7ado Crie uma fun\u00e7\u00e3o safeJsonParse(json: string): unknown | Error . Esta fun\u00e7\u00e3o deve receber uma string JSON, tentar fazer o parse com JSON.parse . Se for bem-sucedido, deve retornar o objeto parseado (como unknown ). Se ocorrer um erro no parse, ela deve capturar a exce\u00e7\u00e3o e retornar um objeto Error . Ver Solu\u00e7\u00e3o --- function safeJsonParse(json: string): unknown | Error { try { // JSON.parse por padr\u00e3o retorna `any`, mas n\u00f3s o atribu\u00edmos a `unknown` // para for\u00e7ar quem chama a fun\u00e7\u00e3o a verificar o tipo do resultado. const parsed: unknown = JSON.parse(json); return parsed; } catch (e) { if (e instanceof Error) { return e; } return new Error(\"Falha desconhecida ao analisar JSON.\"); } } // Teste const validJson = '{\"name\": \"Lucas\", \"id\": 1}'; const invalidJson = '{'name': \"Lucas\"}'; // JSON malformado const result1 = safeJsonParse(validJson); const result2 = safeJsonParse(invalidJson); if (result1 instanceof Error) { console.error(\"Erro no JSON v\u00e1lido:\", result1.message); } else { console.log(\"Sucesso no JSON v\u00e1lido:\", result1); } if (result2 instanceof Error) { console.error(\"Erro no JSON inv\u00e1lido:\", result2.message); } else { console.log(\"Sucesso no JSON inv\u00e1lido:\", result2); }","title":"Exerc\u00edcios Pr\u00e1ticos (N\u00edveis Crescentes)"},{"location":"Ts/Semana1/#checklist-do-dia_2","text":"[ ] Entendi por que any \u00e9 perigoso e deve ser evitado. [ ] Sei a diferen\u00e7a fundamental entre any e unknown . [ ] Usei typeof para fazer narrowing de um tipo unknown . [ ] Implementei uma fun\u00e7\u00e3o que lida com dados de tipo desconhecido de forma segura.","title":"Checklist do Dia"},{"location":"Ts/Semana1/#dia-4-type-guards-e-narrowing","text":"","title":"Dia 4: Type Guards e Narrowing"},{"location":"Ts/Semana1/#foco-do-dia_3","text":"Aprender as t\u00e9cnicas de narrowing (estreitamento de tipo) para que o TypeScript possa inferir um tipo mais espec\u00edfico dentro de um bloco de c\u00f3digo, e criar seus pr\u00f3prios type guards customizados.","title":"Foco do Dia"},{"location":"Ts/Semana1/#leitura-e-teoria-aprofundada_3","text":"Narrowing \u00e9 o processo pelo qual o TypeScript remove tipos de uma uni\u00e3o. Se voc\u00ea tem string | number , e o TS prova que \u00e9 string , ele \"estreita\" o tipo para apenas string naquele escopo. T\u00e9cnicas de Narrowing: 1. typeof : Para tipos primitivos ( string , number , boolean , etc.). 2. instanceof : Para verificar se um objeto \u00e9 uma inst\u00e2ncia de uma classe. 3. Truthiness : Verificar se um valor n\u00e3o \u00e9 null , undefined , false , 0 , \"\" . 4. Equality ( === ) : Verificar igualdade com um valor literal. 5. in operator : Verificar se um objeto possui uma propriedade com um certo nome. 6. Discriminated Unions : Um padr\u00e3o poderoso onde voc\u00ea usa uma propriedade literal comum ( kind , type , status ) em v\u00e1rios tipos para ajudar o TypeScript a descobrir qual tipo \u00e9. 7. Custom Type Guards (Type Predicates) : Fun\u00e7\u00f5es que retornam um booleano especial: parametro is Tipo . Se a fun\u00e7\u00e3o retornar true , o TypeScript \"confia\" que o par\u00e2metro \u00e9 daquele Tipo no resto do escopo.","title":"Leitura e Teoria (Aprofundada)"},{"location":"Ts/Semana1/#documentacao-essencial_3","text":"Narrowing (Handbook) Using Type Predicates (Custom Type Guards)","title":"Documenta\u00e7\u00e3o Essencial"},{"location":"Ts/Semana1/#pratica-guiada-passo-a-passo_3","text":"Exemplo 1: typeof function padLeft(padding: number | string, input: string): string { if (typeof padding === \"number\") { return \" \".repeat(padding) + input; } return padding + input; } Exemplo 2: instanceof class Cat { meow() { console.log(\"Meow!\"); } } class Dog { bark() { console.log(\"Woof!\"); } } type Pet = Cat | Dog; function makeSound(pet: Pet) { if (pet instanceof Cat) { pet.meow(); // O TS sabe que `pet` \u00e9 um Cat aqui } } Exemplo 3: in operator interface Movie { title: string; duration: number; } interface TVShow { title: string; seasons: number; } type Media = Movie | TVShow; function getMediaTitle(media: Media) { if ('duration' in media) { return `Filme: ${media.title}`; } // O TS sabe que se n\u00e3o tem 'duration', deve ter 'seasons' return `S\u00e9rie: ${media.title}`; }","title":"Pr\u00e1tica Guiada (Passo a Passo)"},{"location":"Ts/Semana1/#exercicios-praticos-niveis-crescentes_3","text":"N\u00edvel 1: B\u00e1sico Crie uma fun\u00e7\u00e3o formatInput(input: string | string[]) . Se o input for uma string , retorne a pr\u00f3pria string. Se for um array de strings, retorne as strings unidas por um espa\u00e7o. Use o type guard Array.isArray() . Ver Solu\u00e7\u00e3o --- function formatInput(input: string | string[]): string { if (Array.isArray(input)) { // O TS sabe que `input` \u00e9 string[] aqui return input.join(' '); } // O TS sabe que `input` \u00e9 string aqui return input; } // Teste console.log(formatInput(\"hello\")); // \"hello\" console.log(formatInput([\"hello\", \"world\"])); // \"hello world\" N\u00edvel 2: Intermedi\u00e1rio Defina duas interfaces: Fish com um m\u00e9todo swim() e Bird com um m\u00e9todo fly() . Crie uma fun\u00e7\u00e3o makePetMove(pet: Fish | Bird) . Dentro dela, use um custom type guard isFish(pet): pet is Fish para verificar o tipo do animal e chamar o m\u00e9todo correto ( swim ou fly ). Ver Solu\u00e7\u00e3o --- interface Fish { swim: () => void; } interface Bird { fly: () => void; } type Animal = Fish | Bird; // Custom type guard function isFish(pet: Animal): pet is Fish { // Se o pet tem a propriedade 'swim', ent\u00e3o ele \u00e9 um Fish. // A asser\u00e7\u00e3o `(pet as Fish)` \u00e9 necess\u00e1ria para checar a propriedade // que pode n\u00e3o existir no tipo Animal. return (pet as Fish).swim !== undefined; } function makePetMove(pet: Animal) { if (isFish(pet)) { pet.swim(); } else { pet.fly(); } } // Teste const nemo: Fish = { swim: () => console.log(\"Nemo est\u00e1 nadando.\") }; const zazu: Bird = { fly: () => console.log(\"Zazu est\u00e1 voando.\") }; makePetMove(nemo); makePetMove(zazu); N\u00edvel 3: Avan\u00e7ado Implemente o padr\u00e3o Discriminated Union . Crie duas interfaces, SuccessResponse e ErrorResponse . Ambas devem ter uma propriedade status , mas com valores literais diferentes ( 'success' e 'error' ). Crie uma fun\u00e7\u00e3o handleApiResponse(response: ApiResponse) que usa a propriedade status para identificar o tipo da resposta e logar os dados ou a mensagem de erro apropriada. Ver Solu\u00e7\u00e3o --- interface SuccessResponse { status: 'success'; // Propriedade discriminante data: { id: number; name: string }; } interface ErrorResponse { status: 'error'; // Propriedade discriminante error: { code: number; message: string }; } type ApiResponse = SuccessResponse | ErrorResponse; function handleApiResponse(response: ApiResponse) { // Usando um switch na propriedade discriminante switch (response.status) { case 'success': // O TS sabe que `response` \u00e9 SuccessResponse aqui console.log(\"Dados recebidos:\", response.data.name); break; case 'error': // O TS sabe que `response` \u00e9 ErrorResponse aqui console.error(\"Ocorreu um erro:\", response.error.message); break; } } // Teste const success: ApiResponse = { status: 'success', data: { id: 1, name: 'Produto A' } }; const failure: ApiResponse = { status: 'error', error: { code: 404, message: 'Produto n\u00e3o encontrado' } }; handleApiResponse(success); handleApiResponse(failure);","title":"Exerc\u00edcios Pr\u00e1ticos (N\u00edveis Crescentes)"},{"location":"Ts/Semana1/#checklist-do-dia_3","text":"[ ] Sei usar typeof , instanceof e in para narrowing. [ ] Entendi o padr\u00e3o de Discriminated Unions . [ ] Criei e usei um custom type guard ( is Type ). [ ] Apliquei narrowing para acessar propriedades de tipos em uma uni\u00e3o de forma segura.","title":"Checklist do Dia"},{"location":"Ts/Semana1/#dia-5-utility-types-nativos-record-e-basicos","text":"","title":"Dia 5: Utility Types Nativos - Record e B\u00e1sicos"},{"location":"Ts/Semana1/#foco-do-dia_4","text":"Utilizar os Utility Types nativos do TypeScript para transformar e criar novos tipos a partir de tipos existentes, com foco especial em Record<K,V> .","title":"Foco do Dia"},{"location":"Ts/Semana1/#leitura-e-teoria-aprofundada_4","text":"Utility Types s\u00e3o ferramentas que ajudam a manipular tipos sem ter que reescrev\u00ea-los. Record<Keys, Type> : Constr\u00f3i um tipo de objeto cujas chaves s\u00e3o Keys e os valores s\u00e3o Type . Perfeito para dicion\u00e1rios ou mapeamentos onde as chaves s\u00e3o de um conjunto conhecido. Partial<Type> : Constr\u00f3i um tipo com todas as propriedades de Type definidas como opcionais . \u00datil para payloads de atualiza\u00e7\u00e3o ( update ). Required<Type> : O oposto de Partial . Torna todas as propriedades obrigat\u00f3rias . Pick<Type, Keys> : Constr\u00f3i um tipo \"pegando\" um conjunto de propriedades Keys de Type . Omit<Type, Keys> : O oposto de Pick . Constr\u00f3i um tipo com todas as propriedades de Type , exceto as Keys . Readonly<Type> : Torna todas as propriedades de Type somente leitura.","title":"Leitura e Teoria (Aprofundada)"},{"location":"Ts/Semana1/#documentacao-essencial_4","text":"Utility Types (Handbook)","title":"Documenta\u00e7\u00e3o Essencial"},{"location":"Ts/Semana1/#pratica-guiada-passo-a-passo_4","text":"Exemplo 1: Partial para atualiza\u00e7\u00f5es interface User { name: string; age: number; email: string; } function updateUser(user: User, fieldsToUpdate: Partial<User>) { return { ...user, ...fieldsToUpdate }; } const user1 = { name: 'Lucas', age: 30, email: 'lucas@test.com' }; const updatedUser = updateUser(user1, { age: 31 }); Exemplo 2: Pick para dados p\u00fablicos interface UserWithPassword { id: number; name: string; passwordHash: string; } type PublicUser = Pick<UserWithPassword, 'id' | 'name'>; const publicProfile: PublicUser = { id: 1, name: 'Ana' }; Exemplo 3: Omit para remover dados sens\u00edveis type UserWithoutPassword = Omit<UserWithPassword, 'passwordHash'>; const userToSend: UserWithoutPassword = { id: 2, name: 'Beto' }; Exemplo 4: Record para um dicion\u00e1rio de configura\u00e7\u00f5es type Theme = 'light' | 'dark'; interface ThemeSettings { color: string; background: string; } const themes: Record<Theme, ThemeSettings> = { light: { color: '#000', background: '#fff' }, dark: { color: '#fff', background: '#000' }, };","title":"Pr\u00e1tica Guiada (Passo a Passo)"},{"location":"Ts/Semana1/#exercicios-praticos-niveis-crescentes_4","text":"N\u00edvel 1: B\u00e1sico Dada a interface Book { id: number; title: string; author: string; pages: number; } , crie um tipo BookPreview que contenha apenas as propriedades title e author usando um Utility Type. Ver Solu\u00e7\u00e3o --- interface Book { id: number; title: string; author: string; pages: number; } type BookPreview = Pick<Book, 'title' | 'author'>; // Teste const preview: BookPreview = { title: \"Duna\", author: \"Frank Herbert\" }; N\u00edvel 2: Intermedi\u00e1rio Crie uma interface AppSettings com todas as propriedades opcionais: theme: string , fontSize: number , language: string . Em seguida, crie um tipo RequiredAppSettings que tenha todas essas mesmas propriedades, mas como obrigat\u00f3rias. Por fim, crie uma fun\u00e7\u00e3o applySettings(settings: RequiredAppSettings) . Ver Solu\u00e7\u00e3o --- interface AppSettings { theme?: string; fontSize?: number; language?: string; } type RequiredAppSettings = Required<AppSettings>; function applySettings(settings: RequiredAppSettings) { console.log(\"Aplicando configura\u00e7\u00f5es:\", settings); } // Teste const mySettings: RequiredAppSettings = { theme: 'dark', fontSize: 14, language: 'pt-BR' }; applySettings(mySettings); // const invalidSettings: RequiredAppSettings = { theme: 'light' }; // Erro: fontSize e language est\u00e3o faltando N\u00edvel 3: Avan\u00e7ado Crie um enum chamado UserRole com os valores ADMIN , EDITOR , e VIEWER . Crie um tipo Permissions que define o que cada papel pode fazer (ex: { canWrite: boolean; canRead: boolean; } ). Use o Utility Type Record para criar um objeto rolePermissions que mapeia cada UserRole para seu respectivo objeto Permissions de forma type-safe. Ver Solu\u00e7\u00e3o --- enum UserRole { ADMIN = 'admin', EDITOR = 'editor', VIEWER = 'viewer' } interface Permissions { canWrite: boolean; canRead: boolean; canDelete: boolean; } const rolePermissions: Record<UserRole, Permissions> = { [UserRole.ADMIN]: { canWrite: true, canRead: true, canDelete: true }, [UserRole.EDITOR]: { canWrite: true, canRead: true, canDelete: false }, [UserRole.VIEWER]: { canWrite: false, canRead: true, canDelete: false }, }; // Teste function checkPermissions(role: UserRole) { const permissions = rolePermissions[role]; console.log(`Permiss\u00f5es para ${role.toUpperCase()}:`, permissions); } checkPermissions(UserRole.EDITOR); // checkPermissions('guest'); // Erro: Argument of type '\"guest\"' is not assignable to parameter of type 'UserRole'.","title":"Exerc\u00edcios Pr\u00e1ticos (N\u00edveis Crescentes)"},{"location":"Ts/Semana1/#checklist-do-dia_4","text":"[ ] Entendi o prop\u00f3sito do Record<K, V> . [ ] Usei Record para criar um dicion\u00e1rio type-safe. [ ] Sei a diferen\u00e7a entre Pick e Omit . [ ] Combinei Partial e Required para manipular tipos.","title":"Checklist do Dia"},{"location":"Ts/Semana1/#dia-6-template-literal-types","text":"","title":"Dia 6: Template Literal Types"},{"location":"Ts/Semana1/#foco-do-dia_5","text":"Criar tipos de string altamente espec\u00edficos e din\u00e2micos usando Template Literals, permitindo valida\u00e7\u00e3o de formatos de string em tempo de compila\u00e7\u00e3o.","title":"Foco do Dia"},{"location":"Ts/Semana1/#leitura-e-teoria-aprofundada_5","text":"Template Literal Types usam a mesma sintaxe de template strings do JavaScript ( ${} ), mas no n\u00edvel dos tipos. Eles permitem construir novos tipos de string concatenando outros tipos, especialmente uni\u00f5es. Com Unions (o superpoder): type HttpMethod = 'GET' | 'POST' | 'PUT' | 'DELETE'; type ApiEndpoint = 'users' | 'products'; // Gera uma uni\u00e3o de todas as 8 combina\u00e7\u00f5es poss\u00edveis: // \"GET /api/users\" | \"POST /api/users\" | ... type ApiRequestSignature = `${HttpMethod} /api/${ApiEndpoint}`; Com Helpers de Manipula\u00e7\u00e3o de String: TypeScript inclui tipos utilit\u00e1rios para manipular strings dentro dos tipos: Uppercase<S> , Lowercase<S> , Capitalize<S> , Uncapitalize<S> .","title":"Leitura e Teoria (Aprofundada)"},{"location":"Ts/Semana1/#documentacao-essencial_5","text":"Template Literal Types (Handbook)","title":"Documenta\u00e7\u00e3o Essencial"},{"location":"Ts/Semana1/#pratica-guiada-passo-a-passo_5","text":"Exemplo 1: Concatena\u00e7\u00e3o Simples type World = \"World\"; type Greeting = `Hello ${World}`; const g: Greeting = \"Hello World\"; // V\u00e1lido Exemplo 2: Uni\u00e3o de Tipos type MarginSide = 'top' | 'right' | 'bottom' | 'left'; type MarginProperty = `margin-${MarginSide}`; const m: MarginProperty = \"margin-left\"; // V\u00e1lido Exemplo 3: Capitalize para Nomes de Eventos type EventName = 'click' | 'scroll' | 'focus'; type HandlerName = `on${Capitalize<EventName>}`; const handler: HandlerName = \"onClick\"; // V\u00e1lido","title":"Pr\u00e1tica Guiada (Passo a Passo)"},{"location":"Ts/Semana1/#exercicios-praticos-niveis-crescentes_5","text":"N\u00edvel 1: B\u00e1sico Crie um tipo Size ( 'small' | 'medium' | 'large' ) e um tipo Color ( 'red' | 'blue' | 'green' ). Crie um terceiro tipo, TShirtSKU , que combine os dois para formar um identificador de produto, como por exemplo 'small-red' . Ver Solu\u00e7\u00e3o --- type Size = 'small' | 'medium' | 'large'; type Color = 'red' | 'blue' | 'green'; type TShirtSKU = `${Size}-${Color}`; // Teste const myShirt: TShirtSKU = \"medium-blue\"; const anotherShirt: TShirtSKU = \"large-red\"; // const invalidShirt: TShirtSKU = \"small-yellow\"; // Erro: 'yellow' n\u00e3o \u00e9 uma cor v\u00e1lida N\u00edvel 2: Intermedi\u00e1rio Crie um tipo IconName que represente nomes de \u00edcones no formato icon-[nome] , onde [nome] pode ser user , home , ou settings . Em seguida, crie um tipo IconSize que pode ser 16 , 24 , ou 32 . Finalmente, crie um tipo IconId que combine os dois, no formato icon-[nome]-[tamanho]px . Ver Solu\u00e7\u00e3o --- type IconName = `icon-${'user' | 'home' | 'settings'}`; type IconSize = 16 | 24 | 32; type IconId = `${IconName}-${IconSize}px`; // Teste const userIcon: IconId = \"icon-user-24px\"; const homeIcon: IconId = \"icon-home-32px\"; // const invalidIcon: IconId = \"icon-settings-20px\"; // Erro: 20 n\u00e3o \u00e9 um tamanho v\u00e1lido N\u00edvel 3: Avan\u00e7ado Crie um tipo ApiRoute que valide os seguintes formatos de rota para uma API RESTful: 1. Listar todos os recursos: /api/[recurso] (ex: /api/users ) 2. Obter um recurso espec\u00edfico: /api/[recurso]/[id] (ex: /api/posts/123 ) Onde [recurso] pode ser users , posts , ou products , e [id] pode ser string ou number . Ver Solu\u00e7\u00e3o --- type Resource = 'users' | 'posts' | 'products'; type ResourceId = string | number; type ApiRoute = `/api/${Resource}` | `/api/${Resource}/${ResourceId}`; // Teste const listUsers: ApiRoute = '/api/users'; const getPost: ApiRoute = '/api/posts/post-id-abc'; const getProduct: ApiRoute = '/api/products/12345'; // const invalidRoute1: ApiRoute = '/api/orders'; // Erro: 'orders' n\u00e3o \u00e9 um Resource // const invalidRoute2: ApiRoute = '/api/users/1/comments'; // Erro: formato inv\u00e1lido","title":"Exerc\u00edcios Pr\u00e1ticos (N\u00edveis Crescentes)"},{"location":"Ts/Semana1/#checklist-do-dia_5","text":"[ ] Criei um tipo de string simples com template literals. [ ] Usei uni\u00f5es para gerar m\u00faltiplas strings poss\u00edveis a partir de um template. [ ] Usei Capitalize e outras helpers para transformar strings em tipos. [ ] Constru\u00ed um tipo pr\u00e1tico para validar um formato de string (rotas de API).","title":"Checklist do Dia"},{"location":"Ts/Semana1/#dia-7-projeto-mini-1-consolidando-conceitos","text":"","title":"Dia 7: Projeto Mini #1 - Consolidando Conceitos"},{"location":"Ts/Semana1/#foco-do-dia_6","text":"Consolidar todos os conceitos da semana (Classes, this , unknown , Type Guards, Utility Types) em um \u00fanico projeto pr\u00e1tico: um BaseRepository gen\u00e9rico para opera\u00e7\u00f5es CRUD em mem\u00f3ria.","title":"Foco do Dia"},{"location":"Ts/Semana1/#leitura-e-teoria-revisao","text":"Classes e Generics ( <T> ) : Para criar uma \"planta\" reutiliz\u00e1vel. Constraints ( extends ) : Para garantir que o tipo T tenha as propriedades que precisamos (como id ). Record<K, V> : Para criar um armazenamento em mem\u00f3ria type-safe. Partial e Omit : Para criar um payload de atualiza\u00e7\u00e3o seguro. Type Guards : Para verificar se um item existe antes de realizar uma opera\u00e7\u00e3o.","title":"Leitura e Teoria (Revis\u00e3o)"},{"location":"Ts/Semana1/#exercicios-praticos-niveis-crescentes_6","text":"N\u00edvel 1: B\u00e1sico Crie uma classe StringStore n\u00e3o gen\u00e9rica . Ela deve ter um array privado para armazenar strings. Implemente dois m\u00e9todos: add(item: string) e getAll(): string[] . Ver Solu\u00e7\u00e3o --- class StringStore { private data: string[] = []; public add(item: string): void { this.data.push(item); } public getAll(): string[] { return this.data; } } // Teste const store = new StringStore(); store.add(\"ma\u00e7\u00e3\"); store.add(\"banana\"); console.log(store.getAll()); // [\"ma\u00e7\u00e3\", \"banana\"] N\u00edvel 2: Intermedi\u00e1rio Crie uma classe KeyValueStore<V> que seja gen\u00e9rica para o valor ( V ), mas a chave seja sempre string . Use um Record<string, V> para o armazenamento privado. Implemente os m\u00e9todos set(key: string, value: V) e get(key: string): V | undefined . Ver Solu\u00e7\u00e3o --- class KeyValueStore<V> { private data: Record<string, V> = {}; public set(key: string, value: V): void { this.data[key] = value; } public get(key: string): V | undefined { return this.data[key]; } } // Teste com n\u00fameros const userAges = new KeyValueStore<number>(); userAges.set(\"Lucas\", 30); userAges.set(\"Ana\", 25); console.log(userAges.get(\"Lucas\")); // 30 // Teste com objetos interface User { id: number; name: string; } const users = new KeyValueStore<User>(); users.set(\"user-1\", { id: 1, name: \"Lucas\" }); console.log(users.get(\"user-1\")); // { id: 1, name: \"Lucas\" } N\u00edvel 3: Avan\u00e7ado Implemente a classe BaseRepository<T> . Esta classe deve ser gen\u00e9rica e funcionar para qualquer tipo T que satisfa\u00e7a a constraint BaseEntity (que possui uma propriedade id do tipo string | number ). Requisitos: 1. Crie a interface BaseEntity { id: string | number; } . 2. A classe BaseRepository<T extends BaseEntity> deve usar um Record para armazenamento privado. 3. Implemente os m\u00e9todos: create(item: T) , findById(id: T['id']) , update(id: T['id'], payload: Partial<Omit<T, 'id'>>) , e delete(id: T['id']) . Ver Solu\u00e7\u00e3o --- // A constraint que todas as entidades devem seguir interface BaseEntity { id: string | number; } class BaseRepository<T extends BaseEntity> { private data: Record<T['id'], T> = {} as Record<T['id'], T>; public create(item: T): T { this.data[item.id] = item; return item; } public findById(id: T['id']): T | undefined { return this.data[id]; } public update(id: T['id'], payload: Partial<Omit<T, 'id'>>): T | undefined { const currentItem = this.findById(id); if (!currentItem) { return undefined; } const updatedItem = { ...currentItem, ...payload } as T; this.data[id] = updatedItem; return updatedItem; } public delete(id: T['id']): boolean { if (!this.findById(id)) { return false; } delete this.data[id]; return true; } public findAll(): T[] { return Object.values(this.data); } } // Teste interface Post extends BaseEntity { id: string; title: string; content: string; } const postRepository = new BaseRepository<Post>(); postRepository.create({ id: 'post-1', title: \"Primeiro Post\", content: \"...\" }); postRepository.create({ id: 'post-2', title: \"Segundo Post\", content: \"...\" }); postRepository.update('post-1', { title: \"T\u00edtulo Atualizado\" }); postRepository.delete('post-2'); console.log(postRepository.findAll()); // [ { id: 'post-1', title: 'T\u00edtulo Atualizado', content: '...' } ]","title":"Exerc\u00edcios Pr\u00e1ticos (N\u00edveis Crescentes)"},{"location":"Ts/Semana1/#checklist-do-dia_6","text":"[ ] Criei uma classe gen\u00e9rica com constraints ( extends ). [ ] Usei Record como um armazenamento em mem\u00f3ria type-safe. [ ] Implementei m\u00e9todos CRUD (Create, Read, Update, Delete). [ ] Usei Partial e Omit para criar um payload de atualiza\u00e7\u00e3o seguro. [ ] Sinto-me mais confiante para aplicar os conceitos da Semana 1 em um projeto real.","title":"Checklist do Dia"},{"location":"Ts/Semana2/","text":"Semana 2: Classes Avan\u00e7adas e Generics Vis\u00e3o Geral da Semana Com os fundamentos s\u00f3lidos, a segunda semana mergulha em conceitos mais poderosos e abstratos. Vamos explorar heran\u00e7a com abstract classes , o poder da reutiliza\u00e7\u00e3o de c\u00f3digo com generics , o uso avan\u00e7ado do this , e introduzir decorators para metaprograma\u00e7\u00e3o. Continuaremos nossa miss\u00e3o de eliminar o any com tipos mais sofisticados como never e branded types , e finalizaremos com a introdu\u00e7\u00e3o aos conditional types , uma das ferramentas mais avan\u00e7adas do TypeScript. Dia 8: Heran\u00e7a e Abstract Classes Foco do Dia Entender como criar hierarquias de classes usando heran\u00e7a ( extends ) e como definir \"contratos\" de classes com abstract classes . Leitura e Teoria (Aprofundada) Heran\u00e7a ( extends ) : Permite que uma classe (subclasse ou classe filha) herde propriedades e m\u00e9todos de outra classe (superclasse ou classe pai). Isso promove a reutiliza\u00e7\u00e3o de c\u00f3digo. super() : Dentro do constructor de uma subclasse, super() \u00e9 usado para chamar o constructor da classe pai. Isso \u00e9 obrigat\u00f3rio antes de usar a palavra-chave this na subclasse. Sobrescrita de M\u00e9todos (Method Overriding) : Uma subclasse pode fornecer sua pr\u00f3pria implementa\u00e7\u00e3o de um m\u00e9todo que j\u00e1 existe na classe pai. Classes Abstratas ( abstract class ) : S\u00e3o classes que n\u00e3o podem ser instanciadas diretamente. Elas servem como um modelo base para outras classes. Podem conter m\u00e9todos abstratos , que s\u00e3o m\u00e9todos sem implementa\u00e7\u00e3o que devem ser implementados pelas subclasses. Documenta\u00e7\u00e3o Essencial Heran\u00e7a de Classes (MDN) Abstract Classes and Members (Handbook) Pr\u00e1tica Guiada (Passo a Passo) Exemplo 1: Heran\u00e7a Simples class Animal { constructor(public name: string) {} move(distanceInMeters: number = 0) { console.log(`${this.name} moveu ${distanceInMeters}m.`); } } class Dog extends Animal { // O construtor da subclasse constructor(name: string) { super(name); // Chama o construtor da classe Animal } // Sobrescrevendo o m\u00e9todo move move(distanceInMeters: number = 5) { console.log(\"Correndo...\"); super.move(distanceInMeters); } } const myDog = new Dog(\"Rex\"); myDog.move(10); Exemplo 2: Classes Abstratas abstract class Shape { // M\u00e9todo abstrato: sem implementa\u00e7\u00e3o, deve ser definido na subclasse abstract getArea(): number; // M\u00e9todo concreto: j\u00e1 tem implementa\u00e7\u00e3o e \u00e9 herdado printInfo() { console.log(`Esta \u00e9 uma forma com \u00e1rea de ${this.getArea()}`); } } class Circle extends Shape { constructor(private radius: number) { super(); } // Implementa\u00e7\u00e3o obrigat\u00f3ria do m\u00e9todo abstrato getArea(): number { return Math.PI * this.radius ** 2; } } // const shape = new Shape(); // Erro: N\u00e3o se pode criar inst\u00e2ncia de classe abstrata. const myCircle = new Circle(10); myCircle.printInfo(); Exerc\u00edcios Pr\u00e1ticos (N\u00edveis Crescentes) N\u00edvel 1: B\u00e1sico Crie uma classe base Vehicle com uma propriedade brand (marca) e um m\u00e9todo startEngine() que imprime \"Motor ligado\". Crie uma subclasse Car que herda de Vehicle e adiciona uma propriedade model . O construtor de Car deve receber brand e model . Ver Solu\u00e7\u00e3o --- class Vehicle { constructor(public brand: string) {} startEngine(): void { console.log(\"Motor ligado.\"); } } class Car extends Vehicle { constructor(brand: string, public model: string) { super(brand); // Passa a marca para o construtor da classe pai } displayInfo(): void { console.log(`Carro: ${this.brand} ${this.model}`); } } // Teste const myCar = new Car(\"Volkswagen\", \"Gol\"); myCar.displayInfo(); // \"Carro: Volkswagen Gol\" myCar.startEngine(); // \"Motor ligado.\" N\u00edvel 2: Intermedi\u00e1rio Crie uma classe abstrata LoggerBase com um m\u00e9todo abstrato log(message: string) . Crie duas classes concretas que herdam de LoggerBase : ConsoleLogger (que imprime a mensagem no console) e FileLogger (que simula a escrita da mensagem em um arquivo, imprimindo \"Escrevendo no arquivo: [mensagem]\"). Ver Solu\u00e7\u00e3o --- abstract class LoggerBase { abstract log(message: string): void; logWithTimestamp(message: string): void { const timestamp = new Date().toISOString(); this.log(`[${timestamp}] ${message}`); } } class ConsoleLogger extends LoggerBase { log(message: string): void { console.log(message); } } class FileLogger extends LoggerBase { constructor(private filePath: string) { super(); } log(message: string): void { // Simula\u00e7\u00e3o console.log(`Escrevendo em ${this.filePath}: ${message}`); } } // Teste const consoleLogger = new ConsoleLogger(); consoleLogger.logWithTimestamp(\"Esta \u00e9 uma mensagem de teste.\"); const fileLogger = new FileLogger(\"/var/log/app.log\"); fileLogger.logWithTimestamp(\"Erro cr\u00edtico no sistema.\"); N\u00edvel 3: Avan\u00e7ado Recrie a estrutura do seu GetTableDataService usando uma classe abstrata. Crie uma classe BaseService<TResponse, TParams> com um m\u00e9todo abstrato handle(params: TParams): Promise<TResponse> . Crie uma classe concreta FetchUsersService que herda de BaseService e implementa o m\u00e9todo handle para \"buscar\" uma lista de usu\u00e1rios. Ver Solu\u00e7\u00e3o --- // Defini\u00e7\u00e3o dos tipos para o servi\u00e7o concreto interface User { id: number; name: string; } interface FetchUsersParams { page: number; limit: number; } // A classe abstrata base abstract class BaseService<TResponse, TParams> { abstract handle(params: TParams): Promise<TResponse>; // Um m\u00e9todo concreto que pode ser compartilhado protected logRequest(params: TParams): void { console.log(\"Iniciando requisi\u00e7\u00e3o com os par\u00e2metros:\", params); } } // A implementa\u00e7\u00e3o concreta class FetchUsersService extends BaseService<User[], FetchUsersParams> { async handle(params: FetchUsersParams): Promise<User[]> { this.logRequest(params); console.log(`Buscando usu\u00e1rios... P\u00e1gina: ${params.page}, Limite: ${params.limit}`); // Simula uma chamada de API const fakeUsers: User[] = [ { id: 1, name: \"Lucas\" }, { id: 2, name: \"Ana\" }, ]; return Promise.resolve(fakeUsers); } } // Teste async function runService() { const userService = new FetchUsersService(); const users = await userService.handle({ page: 1, limit: 10 }); console.log(\"Usu\u00e1rios recebidos:\", users); } runService(); Checklist do Dia [ ] Entendi como extends e super() funcionam. [ ] Sei a diferen\u00e7a entre uma classe normal e uma abstrata. [ ] Implementei um m\u00e9todo abstrato em uma subclasse. [ ] Criei uma hierarquia de classes para reutilizar c\u00f3digo. Dia 9: Generics em Classes Foco do Dia Escrever classes flex\u00edveis e reutiliz\u00e1veis que podem trabalhar com diferentes tipos de dados usando Generics ( <T> ). Leitura e Teoria (Aprofundada) Generics permitem que voc\u00ea crie componentes que funcionam com qualquer tipo, em vez de um tipo espec\u00edfico. Isso aumenta drasticamente a reutiliza\u00e7\u00e3o de c\u00f3digo e a seguran\u00e7a de tipo. Par\u00e2metros de Tipo ( <T> ) : A letra T \u00e9 uma conven\u00e7\u00e3o para \"Type\". Voc\u00ea pode usar qualquer nome ( <TData> , <TValue> , etc.). Ela atua como uma vari\u00e1vel para o tipo. Constraints ( extends ) : Voc\u00ea pode restringir os tipos que podem ser usados com um generic. class MyClass<T extends SomeType> significa que T deve ser compat\u00edvel com SomeType . M\u00faltiplos Par\u00e2metros de Tipo : Uma classe pode ter v\u00e1rios par\u00e2metros de tipo, como class Pair<K, V> para um par chave-valor. Tipos Padr\u00e3o : Voc\u00ea pode fornecer um tipo padr\u00e3o para um par\u00e2metro gen\u00e9rico: class MyClass<T = string> . Documenta\u00e7\u00e3o Essencial Generics (Handbook) Pr\u00e1tica Guiada (Passo a Passo) Exemplo 1: Uma Caixa Gen\u00e9rica class Box<T> { private content: T; constructor(initialContent: T) { this.content = initialContent; } getContent(): T { return this.content; } } const stringBox = new Box<string>(\"Ol\u00e1, Generics!\"); const numberBox = new Box<number>(123); console.log(stringBox.getContent().toUpperCase()); console.log(numberBox.getContent().toFixed(2)); Exemplo 2: Generic com Constraints interface WithLength { length: number; } // T pode ser qualquer tipo, desde que tenha uma propriedade `length` class LengthReporter<T extends WithLength> { constructor(private value: T) {} report() { console.log(`O comprimento \u00e9 ${this.value.length}`); } } const stringReporter = new LengthReporter(\"uma string\"); const arrayReporter = new LengthReporter([1, 2, 3]); // const numberReporter = new LengthReporter(123); // Erro: `number` n\u00e3o tem a propriedade `length`. stringReporter.report(); arrayReporter.report(); Exerc\u00edcios Pr\u00e1ticos (N\u00edveis Crescentes) N\u00edvel 1: B\u00e1sico Crie uma classe gen\u00e9rica DataStore<T> que armazena um array de itens do tipo T . Ela deve ter os m\u00e9todos add(item: T) e getAll(): T[] . Ver Solu\u00e7\u00e3o --- class DataStore<T> { private data: T[] = []; add(item: T): void { this.data.push(item); } getAll(): T[] { return this.data; } } // Teste com strings const stringStore = new DataStore<string>(); stringStore.add(\"TypeScript\"); stringStore.add(\"Generics\"); console.log(stringStore.getAll()); // [\"TypeScript\", \"Generics\"] // Teste com n\u00fameros const numberStore = new DataStore<number>(); numberStore.add(10); numberStore.add(20); console.log(numberStore.getAll()); // [10, 20] N\u00edvel 2: Intermedi\u00e1rio Crie uma classe gen\u00e9rica Cache<T> que armazena um valor do tipo T e uma data de expira\u00e7\u00e3o. Implemente os m\u00e9todos set(value: T, ttl: number) (ttl em segundos) e get(): T | null . O m\u00e9todo get deve retornar null se o cache tiver expirado. Ver Solu\u00e7\u00e3o --- class Cache<T> { private value: T | null = null; private expiresAt: Date | null = null; set(value: T, ttlInSeconds: number): void { this.value = value; const now = new Date(); this.expiresAt = new Date(now.getTime() + ttlInSeconds * 1000); console.log(`Valor armazenado no cache. Expira em: ${this.expiresAt.toLocaleTimeString()}`); } get(): T | null { if (this.expiresAt && this.expiresAt > new Date() && this.value) { console.log(\"Valor retornado do cache.\"); return this.value; } console.log(\"Cache expirado ou vazio.\"); this.value = null; this.expiresAt = null; return null; } } // Teste async function testCache() { const userCache = new Cache<{ name: string }>(); userCache.set({ name: \"Lucas\" }, 3); // Expira em 3 segundos console.log(userCache.get()); // Retorna o objeto await new Promise(resolve => setTimeout(resolve, 4000)); // Espera 4 segundos console.log(userCache.get()); // Retorna null } testCache(); N\u00edvel 3: Avan\u00e7ado Crie uma classe DataService<T extends { id: K }, K extends string | number> . Esta classe deve gerenciar uma cole\u00e7\u00e3o de entidades T . Implemente os m\u00e9todos add(item: T) e findById(id: K): T | undefined . O uso de m\u00faltiplos generics ( T e K ) garante que o tipo do id seja consistente. Ver Solu\u00e7\u00e3o --- // A constraint gen\u00e9rica interface BaseEntity<K extends string | number> { id: K; } class DataService<T extends BaseEntity<K>, K extends string | number> { private items: Record<K, T> = {} as Record<K, T>; add(item: T): void { this.items[item.id] = item; } findById(id: K): T | undefined { return this.items[id]; } getAll(): T[] { return Object.values(this.items); } } // Teste interface Product { id: number; name: string; price: number; } // O TS infere que K \u00e9 `number` a partir de Product['id'] const productService = new DataService<Product, number>(); productService.add({ id: 101, name: \"Laptop\", price: 5000 }); productService.add({ id: 102, name: \"Mouse\", price: 150 }); console.log(productService.findById(101)); console.log(productService.findById(999)); console.log(productService.getAll()); Checklist do Dia [ ] Criei uma classe gen\u00e9rica simples. [ ] Usei constraints ( extends ) para limitar os tipos de um generic. [ ] Entendi como usar m\u00faltiplos par\u00e2metros de tipo. [ ] Apliquei generics para criar uma classe de servi\u00e7o reutiliz\u00e1vel. Dia 10: Contexto this - Parte 2 Avan\u00e7ada Foco do Dia Explorar t\u00e9cnicas avan\u00e7adas para controlar o this , incluindo this parameters para adicionar tipagem expl\u00edcita ao this em fun\u00e7\u00f5es e ThisType<T> para fornecer contexto a objetos literais. Leitura e Teoria (Aprofundada) this Parameters : TypeScript permite que voc\u00ea declare o tipo de this como o primeiro par\u00e2metro de uma fun\u00e7\u00e3o. Este par\u00e2metro \u00e9 falso (n\u00e3o existe no JavaScript compilado), mas \u00e9 usado pelo TypeScript para garantir que a fun\u00e7\u00e3o seja chamada com o contexto correto. ThisType<T> : Um tipo utilit\u00e1rio que n\u00e3o retorna um novo tipo, mas sim modifica o contexto de this dentro de um objeto literal. \u00c9 muito \u00fatil para criar APIs onde voc\u00ea define m\u00e9todos em um objeto, mas quer que this se refira a um tipo maior e mais complexo. Documenta\u00e7\u00e3o Essencial This Parameters (Handbook) ThisType (Handbook) Pr\u00e1tica Guiada (Passo a Passo) Exemplo 1: this Parameter para Seguran\u00e7a // A fun\u00e7\u00e3o espera que `this` seja um objeto com uma propriedade `name` function sayHello(this: { name: string }) { console.log(`Hello, ${this.name}!`); } const person = { name: \"Lucas\", sayHello }; const anotherPerson = { name: \"Ana\", sayHello }; person.sayHello(); // OK anotherPerson.sayHello(); // OK // sayHello(); // Erro: O `this` da fun\u00e7\u00e3o n\u00e3o \u00e9 do tipo `{ name: string }`. Exemplo 2: ThisType<T> para Objetos de Configura\u00e7\u00e3o interface ComponentOptions<T> { data: () => T; methods: Record<string, (this: T, ...args: any[]) => any>; } // O tipo `T` em `ThisType<T>` define o tipo de `this` nos m\u00e9todos function createComponent<T>(options: ComponentOptions<T> & { methods: ThisType<T> }): void { // L\u00f3gica de cria\u00e7\u00e3o do componente... console.log(\"Component created.\"); } createComponent({ data: () => ({ count: 0, message: \"Hello\" }), methods: { increment() { // Gra\u00e7as a `ThisType`, o TS sabe que `this` tem `count` e `message` this.count++; }, logMessage() { console.log(this.message); } } }); Exerc\u00edcios Pr\u00e1ticos (N\u00edveis Crescentes) N\u00edvel 1: B\u00e1sico Crie uma interface User com name: string . Crie uma fun\u00e7\u00e3o printUserName que n\u00e3o recebe argumentos, mas espera que o this seja do tipo User . Demonstre seu uso correto e incorreto. Ver Solu\u00e7\u00e3o --- interface User { name: string; } function printUserName(this: User): void { console.log(`User name: ${this.name}`); } // Teste const user1: User = { name: \"Alice\" }; const user2: User = { name: \"Bob\" }; // Para chamar a fun\u00e7\u00e3o, precisamos fornecer o contexto `this` printUserName.call(user1); // \"User name: Alice\" printUserName.apply(user2); // \"User name: Bob\" // const standaloneCall = printUserName; // Erro ao tentar chamar standaloneCall() N\u00edvel 2: Intermedi\u00e1rio Crie uma classe Configuration<T> que armazena um objeto de configura\u00e7\u00e3o. Crie um m\u00e9todo update(updater: (this: T, currentConfig: T) => T) . A fun\u00e7\u00e3o updater deve receber a configura\u00e7\u00e3o atual, mas seu this deve ser tipado como a pr\u00f3pria configura\u00e7\u00e3o T , permitindo acesso direto \u00e0s propriedades. Ver Solu\u00e7\u00e3o --- class Configuration<T> { constructor(private config: T) {} public update(updater: (this: T, currentConfig: T) => T): void { const newConfig = updater.call(this.config, this.config); this.config = newConfig; } public getConfig(): T { return this.config; } } // Teste interface AppConfig { apiUrl: string; timeout: number; } const myConfig = new Configuration<AppConfig>({ apiUrl: \"/api/v1\", timeout: 5000 }); // A fun\u00e7\u00e3o updater pode usar `this` para acessar as propriedades de AppConfig myConfig.update(function(current) { return { ...current, timeout: this.timeout + 1000 // `this` \u00e9 do tipo AppConfig }; }); console.log(myConfig.getConfig()); // { apiUrl: '/api/v1', timeout: 6000 } N\u00edvel 3: Avan\u00e7ado Implemente a classe FormBuilder<T> do plano de estudos. Ela deve ter um m\u00e9todo field<K extends keyof T>(name: K, value: T[K]): this que adiciona um campo ao formul\u00e1rio. O m\u00e9todo field deve retornar this para encadeamento. Crie um m\u00e9todo build(): T que retorna o objeto de formul\u00e1rio completo. Ver Solu\u00e7\u00e3o --- class FormBuilder<T extends object> { private formData: Partial<T> = {}; // O tipo de retorno `this` permite o encadeamento public field<K extends keyof T>(name: K, value: T[K]): this { this.formData[name] = value; return this; } // O type guard `this is { formData: T }` ajuda o TS a saber que o form est\u00e1 completo private isComplete(): this is { formData: T } { // Em um cen\u00e1rio real, verificar\u00edamos se todas as chaves de T existem em formData return true; // Simplifica\u00e7\u00e3o para o exerc\u00edcio } public build(): T | Error { if (this.isComplete()) { return this.formData; // Gra\u00e7as ao type guard, o TS sabe que formData \u00e9 T, n\u00e3o Partial<T> } return new Error(\"Formul\u00e1rio incompleto.\"); } } // Teste interface UserForm { name: string; email: string; age: number; } const userFormBuilder = new FormBuilder<UserForm>(); const newUser = userFormBuilder .field(\"name\", \"Lucas\") .field(\"email\", \"lucas@ts.com\") .field(\"age\", 30) .build(); console.log(newUser); Checklist do Dia [ ] Entendi o prop\u00f3sito de um this parameter. [ ] Usei um this parameter para adicionar seguran\u00e7a a uma fun\u00e7\u00e3o. [ ] Entendi como ThisType<T> funciona em objetos literais. [ ] Criei uma classe builder usando this para encadeamento. Dia 11: Decorators Foco do Dia Introduzir decorators , uma proposta do ECMAScript para adicionar anota\u00e7\u00f5es e modificar classes e seus membros em tempo de design. Leitura e Teoria (Aprofundada) Decorators s\u00e3o fun\u00e7\u00f5es especiais que podem ser anexadas a classes, m\u00e9todos, propriedades ou par\u00e2metros. Eles s\u00e3o executados durante a defini\u00e7\u00e3o da classe, n\u00e3o durante a instancia\u00e7\u00e3o. Para usar decorators, voc\u00ea precisa habilitar a op\u00e7\u00e3o experimentalDecorators no seu tsconfig.json . Tipos de Decorators : Class, Method, Accessor, Property, Parameter. F\u00e1brica de Decorators (Decorator Factory) : Uma fun\u00e7\u00e3o que retorna a express\u00e3o do decorator. Isso permite que voc\u00ea configure o decorator, como @log(\"INFO\") . Composi\u00e7\u00e3o : M\u00faltiplos decorators podem ser aplicados a uma declara\u00e7\u00e3o. reflect-metadata : Uma biblioteca usada para adicionar metadados a classes e propriedades, que podem ser lidos posteriormente pelos decorators. Documenta\u00e7\u00e3o Essencial Decorators (Handbook) (Nota: esta \u00e9 uma feature experimental) Pr\u00e1tica Guiada (Passo a Passo) Exemplo 1: Decorator de M\u00e9todo Simples // O decorator recebe o alvo (a classe), a chave (nome do m\u00e9todo) e o descritor da propriedade function log(target: any, propertyKey: string, descriptor: PropertyDescriptor) { const originalMethod = descriptor.value; descriptor.value = function(...args: any[]) { console.log(`Chamando o m\u00e9todo ${propertyKey} com os argumentos:`, args); const result = originalMethod.apply(this, args); console.log(`O m\u00e9todo ${propertyKey} retornou:`, result); return result; } } class Calculator { @log add(a: number, b: number): number { return a + b; } } new Calculator().add(2, 3); Exemplo 2: Decorator Factory function Enumerable(isEnumerable: boolean) { return function(target: any, propertyKey: string, descriptor: PropertyDescriptor) { descriptor.enumerable = isEnumerable; } } class Person { constructor(private name: string) {} @Enumerable(true) getName() { return this.name; } @Enumerable(false) getAge() { return 30; } } // O m\u00e9todo getName aparecer\u00e1 no loop, mas getAge n\u00e3o. for (const key in new Person(\"Lucas\")) { console.log(key); } Exerc\u00edcios Pr\u00e1ticos (N\u00edveis Crescentes) N\u00edvel 1: B\u00e1sico Crie um decorator de m\u00e9todo chamado @deprecated . Quando um m\u00e9todo decorado com ele for chamado, ele deve imprimir um aviso no console: Aviso: O m\u00e9todo [nome do m\u00e9todo] est\u00e1 obsoleto e ser\u00e1 removido em futuras vers\u00f5es. Ver Solu\u00e7\u00e3o --- function deprecated(target: any, propertyKey: string, descriptor: PropertyDescriptor) { const originalMethod = descriptor.value; descriptor.value = function(...args: any[]) { console.warn(`Aviso: O m\u00e9todo ${propertyKey} est\u00e1 obsoleto e ser\u00e1 removido em futuras vers\u00f5es.`); return originalMethod.apply(this, args); } } class OldApiService { @deprecated findUsers() { console.log(\"Buscando usu\u00e1rios...\"); return [{ name: \"Lucas\" }]; } } // Teste new OldApiService().findUsers(); N\u00edvel 2: Intermedi\u00e1rio Crie um decorator de propriedade @min(minValue: number) . Este decorator deve garantir que, sempre que a propriedade for alterada, seu novo valor n\u00e3o seja menor que minValue . Se for, um erro deve ser lan\u00e7ado. Ver Solu\u00e7\u00e3o --- function min(minValue: number) { return function(target: any, propertyKey: string) { let value = target[propertyKey]; const getter = () => value; const setter = (newValue: number) => { if (newValue < minValue) { throw new Error(`O valor de ${propertyKey} n\u00e3o pode ser menor que ${minValue}.`); } value = newValue; }; Object.defineProperty(target, propertyKey, { get: getter, set: setter, enumerable: true, configurable: true, }); } } class Product { @min(0) price: number; @min(0) stock: number; constructor(price: number, stock: number) { this.price = price; this.stock = stock; } } // Teste const product = new Product(50, 100); console.log(product.price); // 50 product.price = 75; console.log(product.price); // 75 try { product.stock = -10; } catch (e: any) { console.error(e.message); } N\u00edvel 3: Avan\u00e7ado Crie um decorator de m\u00e9todo @cache . Ele deve armazenar o resultado da primeira chamada do m\u00e9todo. Nas chamadas subsequentes com os mesmos argumentos, ele deve retornar o resultado do cache em vez de executar o m\u00e9todo novamente. Use JSON.stringify para criar uma chave de cache a partir dos argumentos. Ver Solu\u00e7\u00e3o --- function cache(target: any, propertyKey: string, descriptor: PropertyDescriptor) { const originalMethod = descriptor.value; const cache = new Map<string, any>(); descriptor.value = function(...args: any[]) { const cacheKey = JSON.stringify(args); if (cache.has(cacheKey)) { console.log(`Retornando do cache para a chave: ${cacheKey}`); return cache.get(cacheKey); } console.log(`Executando o m\u00e9todo pela primeira vez para a chave: ${cacheKey}`); const result = originalMethod.apply(this, args); cache.set(cacheKey, result); return result; } } class MathOperations { @cache heavyCalculation(a: number, b: number): number { // Simula uma opera\u00e7\u00e3o pesada const start = Date.now(); while (Date.now() - start < 1000) {} return a + b; } } // Teste const math = new MathOperations(); console.log(math.heavyCalculation(2, 3)); // Executa, demora 1s, retorna 5 console.log(math.heavyCalculation(5, 10)); // Executa, demora 1s, retorna 15 console.log(math.heavyCalculation(2, 3)); // Retorna do cache, instant\u00e2neo, retorna 5 Checklist do Dia [ ] Habilitei experimentalDecorators no tsconfig.json . [ ] Entendi a diferen\u00e7a entre um decorator e uma decorator factory. [ ] Criei um decorator de m\u00e9todo simples. [ ] Criei um decorator de propriedade que modifica seu comportamento. Dia 12: Eliminando any - Parte 2 Foco do Dia Introduzir tipos avan\u00e7ados para aumentar a seguran\u00e7a: never para c\u00f3digo inalcan\u00e7\u00e1vel e branded types para criar tipos nominais que o TypeScript n\u00e3o suporta nativamente. Leitura e Teoria (Aprofundada) never : Representa o tipo de valores que nunca ocorrem. \u00c9 usado em dois cen\u00e1rios principais: Em fun\u00e7\u00f5es que nunca retornam (ex: lan\u00e7am uma exce\u00e7\u00e3o ou entram em um loop infinito). Para fazer verifica\u00e7\u00e3o exaustiva (exhaustive checking) em switch ou if/else , garantindo que todos os casos de uma uni\u00e3o foram tratados. Branded Types (ou Opaque Types) : Uma t\u00e9cnica para criar tipos que s\u00e3o estruturalmente id\u00eanticos (ex: ambos s\u00e3o string ), mas nominalmente diferentes para o TypeScript. Isso evita que voc\u00ea passe um UserID para uma fun\u00e7\u00e3o que espera um ProductID . \u00c9 um padr\u00e3o, n\u00e3o uma feature nativa. Documenta\u00e7\u00e3o Essencial The never Type (Handbook) Exhaustiveness checking (Handbook) Pr\u00e1tica Guiada (Passo a Passo) Exemplo 1: never para Verifica\u00e7\u00e3o Exaustiva type Shape = { kind: \"circle\"; radius: number } | { kind: \"square\"; sideLength: number }; function getArea(shape: Shape) { switch (shape.kind) { case \"circle\": return Math.PI * shape.radius ** 2; case \"square\": return shape.sideLength ** 2; default: // Se adicionarmos um novo tipo a Shape (ex: triangle), o TS dar\u00e1 um erro aqui, // pois o novo tipo n\u00e3o pode ser atribu\u00eddo a `never`. const _exhaustiveCheck: never = shape; return _exhaustiveCheck; } } Exemplo 2: Branded Types // O \"brand\" que torna o tipo \u00fanico type Brand<K, T> = K & { __brand: T }; // Criando tipos nominais a partir de tipos primitivos type UserId = Brand<string, \"UserId\">; type ProductId = Brand<string, \"ProductId\">; function getUser(id: UserId) { console.log(`Buscando usu\u00e1rio com ID: ${id}`); } const userId = \"user-123\" as UserId; const productId = \"prod-456\" as ProductId; getUser(userId); // OK // getUser(productId); // Erro! O tipo `ProductId` n\u00e3o \u00e9 compat\u00edvel com `UserId`. Exerc\u00edcios Pr\u00e1ticos (N\u00edveis Crescentes) N\u00edvel 1: B\u00e1sico Crie uma fun\u00e7\u00e3o fail(message: string): never que sempre lan\u00e7a um erro com a mensagem fornecida. Use-a em uma fun\u00e7\u00e3o que processa um string | number e chama fail se o tipo n\u00e3o for nenhum dos dois. Ver Solu\u00e7\u00e3o --- function fail(message: string): never { throw new Error(message); } function processValue(value: string | number) { if (typeof value === 'string') { console.log(\"Processando string:\", value.toUpperCase()); } else if (typeof value === 'number') { console.log(\"Processando n\u00famero:\", value.toFixed(2)); } else { // O TS sabe que este c\u00f3digo \u00e9 inalcan\u00e7\u00e1vel fail(\"Valor inesperado!\"); } } // Teste processValue(\"hello\"); processValue(123); N\u00edvel 2: Intermedi\u00e1rio Crie um branded type Email a partir de string . Crie uma fun\u00e7\u00e3o sendEmail(to: Email, subject: string) que s\u00f3 aceita o tipo Email . Crie uma fun\u00e7\u00e3o createEmail(address: string): Email | null que valida se a string cont\u00e9m um @ antes de fazer a asser\u00e7\u00e3o de tipo para Email . Ver Solu\u00e7\u00e3o --- type Brand<K, T> = K & { __brand: T }; type Email = Brand<string, \"Email\">; function createEmail(address: string): Email | null { if (address.includes(\"@\")) { return address as Email; } return null; } function sendEmail(to: Email, subject: string): void { console.log(`Enviando email para ${to} com o assunto: \"${subject}\"`); } // Teste const userEmail = createEmail(\"lucas@example.com\"); const invalidEmail = createEmail(\"invalid-address\"); const plainString = \"another@test.com\"; if (userEmail) { sendEmail(userEmail, \"Ol\u00e1!\"); // OK } if (invalidEmail === null) { console.log(\"Endere\u00e7o de email inv\u00e1lido detectado.\"); } // sendEmail(plainString, \"Assunto\"); // Erro: `string` n\u00e3o \u00e9 compat\u00edvel com `Email`. N\u00edvel 3: Avan\u00e7ado Crie um wrapper type-safe para uma biblioteca externa falsa. A biblioteca tem um objeto untypedLibrary que \u00e9 any . Crie fun\u00e7\u00f5es safeGetNumber(key: string) e safeGetString(key: string) que usam o untypedLibrary , verificam o tipo do valor retornado, e o retornam com o tipo correto ou undefined se o tipo n\u00e3o corresponder. Ver Solu\u00e7\u00e3o --- // A biblioteca externa perigosa declare const untypedLibrary: any; const untypedLibrary = { appName: \"Super App\", version: 2.1, userCount: 1500, settings: { theme: \"dark\" } }; // O wrapper seguro class SafeLibraryWrapper { private lib: any; constructor(library: any) { this.lib = library; } public get(key: string): unknown { return this.lib[key]; } public getString(key: string): string | undefined { const value = this.get(key); if (typeof value === 'string') { return value; } return undefined; } public getNumber(key: string): number | undefined { const value = this.get(key); if (typeof value === 'number') { return value; } return undefined; } } // Teste const safeLib = new SafeLibraryWrapper(untypedLibrary); const appName = safeLib.getString(\"appName\"); const version = safeLib.getNumber(\"version\"); const userCount = safeLib.getNumber(\"userCount\"); const settings = safeLib.getString(\"settings\"); // Retorna undefined, pois n\u00e3o \u00e9 string console.log(`App: ${appName}, Vers\u00e3o: ${version}, Usu\u00e1rios: ${userCount}`); console.log(`Settings (string):`, settings); Checklist do Dia [ ] Entendi o prop\u00f3sito do tipo never . [ ] Usei never para fazer verifica\u00e7\u00e3o exaustiva. [ ] Entendi o padr\u00e3o de Branded Types e por que ele \u00e9 \u00fatil. [ ] Criei e usei um branded type para aumentar a seguran\u00e7a de tipo. Dia 13: Conditional Types Foco do Dia Entender Conditional Types , que permitem que um tipo seja escolhido com base em uma condi\u00e7\u00e3o, e a palavra-chave infer para extrair tipos de dentro de outros tipos. Leitura e Teoria (Aprofundada) Conditional Types t\u00eam a forma T extends U ? X : Y , que se l\u00ea como: \"Se T for compat\u00edvel com U , ent\u00e3o o tipo \u00e9 X , sen\u00e3o o tipo \u00e9 Y \". infer : A palavra-chave infer pode ser usada dentro da cl\u00e1usula extends para declarar uma nova vari\u00e1vel de tipo gen\u00e9rico. Ela \"captura\" o tipo que est\u00e1 naquela posi\u00e7\u00e3o para que voc\u00ea possa us\u00e1-lo. Exemplo com infer : type UnpackPromise<T> = T extends Promise<infer U> ? U : T; Aqui, infer U captura o tipo que est\u00e1 dentro do Promise (ex: string em Promise<string> ) e o retorna. Se T n\u00e3o for uma Promise , ele retorna T . Documenta\u00e7\u00e3o Essencial Conditional Types (Handbook) Inferring with infer (Handbook) Pr\u00e1tica Guiada (Passo a Passo) Exemplo 1: Tipo Condicional Simples type IsString<T> = T extends string ? true : false; type A = IsString<string>; // true type B = IsString<number>; // false Exemplo 2: infer para Obter o Tipo de Retorno de uma Fun\u00e7\u00e3o type GetReturnType<T> = T extends (...args: any[]) => infer R ? R : T; type Fn = () => number; type Num = GetReturnType<Fn>; // number type Str = GetReturnType<string>; // string (cai no caso `Y`) Exerc\u00edcios Pr\u00e1ticos (N\u00edveis Crescentes) N\u00edvel 1: B\u00e1sico Crie um tipo utilit\u00e1rio ElementTypeOf<T> que obt\u00e9m o tipo dos elementos de um array. Se T n\u00e3o for um array, ele deve retornar never . Ex: ElementTypeOf<string[]> deve ser string . Ver Solu\u00e7\u00e3o --- type ElementTypeOf<T> = T extends (infer E)[] ? E : never; // Teste type A = ElementTypeOf<string[]>; // string type B = ElementTypeOf<number[]>; // number type C = ElementTypeOf<{ name: string }[]>; // { name: string } type D = ElementTypeOf<string>; // never N\u00edvel 2: Intermedi\u00e1rio Implemente seu pr\u00f3prio NonNullable<T> . Este tipo utilit\u00e1rio deve remover null e undefined de um tipo T . Ver Solu\u00e7\u00e3o --- type MyNonNullable<T> = T extends null | undefined ? never : T; // Teste type A = MyNonNullable<string | null>; // string type B = MyNonNullable<string | number | undefined>; // string | number type C = MyNonNullable<null | undefined>; // never N\u00edvel 3: Avan\u00e7ado Implemente o tipo DeepPartial<T> do plano de estudos. Ele deve tornar todas as propriedades de um objeto e de seus sub-objetos aninhados opcionais. Dica: voc\u00ea precisar\u00e1 de recurs\u00e3o e mapped types. Ver Solu\u00e7\u00e3o --- type DeepPartial<T> = T extends object ? { // Para cada propriedade P no objeto T [P in keyof T]?: DeepPartial<T[P]>; // Torna a propriedade opcional e aplica DeepPartial recursivamente } : T; // Se T n\u00e3o for um objeto, retorna o pr\u00f3prio tipo // Teste interface UserProfile { id: number; details: { name: string; address: { street: string; city: string; } } } type PartialUserProfile = DeepPartial<UserProfile>; const partialProfile: PartialUserProfile = { id: 1, details: { address: { city: \"S\u00e3o Paulo\" } } }; Checklist do Dia [ ] Entendi a sintaxe T extends U ? X : Y . [ ] Usei infer para extrair um tipo de dentro de outro. [ ] Criei um tipo utilit\u00e1rio condicional simples. [ ] Implementei um tipo utilit\u00e1rio recursivo ( DeepPartial ). Dia 14: Projeto Mini #2 - Sistema de Autentica\u00e7\u00e3o Foco do Dia Consolidar os conceitos da semana (Heran\u00e7a, Generics, Decorators, Conditional Types) para construir um mini-sistema de autentica\u00e7\u00e3o type-safe. Leitura e Teoria (Revis\u00e3o) Abstract Classes : Para definir um contrato para provedores de autentica\u00e7\u00e3o. Generics : Para lidar com diferentes tipos de dados de usu\u00e1rio (ex: User , Admin ). Decorators : Para adicionar verifica\u00e7\u00e3o de permiss\u00f5es de forma declarativa. Conditional Types : Para criar tipos de permiss\u00e3o din\u00e2micos. Exerc\u00edcios Pr\u00e1ticos (N\u00edveis Crescentes) N\u00edvel 1: B\u00e1sico Crie uma classe abstrata AuthProvider com um m\u00e9todo abstrato authenticate(credentials: any): Promise<boolean> . Crie duas classes concretas: EmailProvider e GoogleProvider , que herdam de AuthProvider e implementam o m\u00e9todo authenticate (pode apenas simular a l\u00f3gica e retornar true ). Ver Solu\u00e7\u00e3o --- abstract class AuthProvider { abstract authenticate(credentials: any): Promise<boolean>; } class EmailProvider extends AuthProvider { async authenticate(credentials: { email: string, pass: string }): Promise<boolean> { console.log(`Autenticando com email: ${credentials.email}`); return true; // Simula\u00e7\u00e3o } } class GoogleProvider extends AuthProvider { async authenticate(credentials: { token: string }): Promise<boolean> { console.log(`Autenticando com token do Google: ${credentials.token.substring(0, 10)}...`); return true; // Simula\u00e7\u00e3o } } // Teste const emailAuth = new EmailProvider(); emailAuth.authenticate({ email: \"test@test.com\", pass: \"123\" }); const googleAuth = new GoogleProvider(); googleAuth.authenticate({ token: \"abc123xyz\" }); N\u00edvel 2: Intermedi\u00e1rio Melhore o sistema do N\u00edvel 1. Torne a classe AuthProvider gen\u00e9rica: AuthProvider<TUser, TCreds> . O m\u00e9todo authenticate deve agora retornar Promise<TUser | null> . Adapte as classes EmailProvider e GoogleProvider para usar tipos espec\u00edficos de usu\u00e1rio e credenciais. Ver Solu\u00e7\u00e3o --- interface BaseUser { id: number; name: string; } abstract class AuthProvider<TUser extends BaseUser, TCreds> { abstract authenticate(credentials: TCreds): Promise<TUser | null>; } // Tipos para Email interface EmailUser extends BaseUser { email: string; } interface EmailCreds { email: string; pass: string; } class EmailProvider extends AuthProvider<EmailUser, EmailCreds> { async authenticate(credentials: EmailCreds): Promise<EmailUser | null> { console.log(`Autenticando com email: ${credentials.email}`); if (credentials.pass === \"123\") { return { id: 1, name: \"Usu\u00e1rio de Email\", email: credentials.email }; } return null; } } // Tipos para Google interface GoogleUser extends BaseUser { googleId: string; } interface GoogleCreds { token: string; } class GoogleProvider extends AuthProvider<GoogleUser, GoogleCreds> { async authenticate(credentials: GoogleCreds): Promise<GoogleUser | null> { console.log(`Autenticando com token do Google...`); return { id: 2, name: \"Usu\u00e1rio do Google\", googleId: \"g-123\" }; } } // Teste async function testAuth() { const emailAuth = new EmailProvider(); const user1 = await emailAuth.authenticate({ email: \"test@test.com\", pass: \"123\" }); console.log(\"Usu\u00e1rio 1:\", user1); const googleAuth = new GoogleProvider(); const user2 = await googleAuth.authenticate({ token: \"abc123xyz\" }); console.log(\"Usu\u00e1rio 2:\", user2); } testAuth(); N\u00edvel 3: Avan\u00e7ado Crie um decorator de m\u00e9todo @permission(requiredRole: Role) . Crie um enum Role { USER, ADMIN } . Crie uma classe ProtectedService com um usu\u00e1rio logado (que tem uma propriedade role ). Adicione um m\u00e9todo sensitiveData() decorado com @permission('ADMIN') . O decorator deve verificar se o role do usu\u00e1rio na inst\u00e2ncia do servi\u00e7o corresponde ao requiredRole antes de executar o m\u00e9todo. Se n\u00e3o, deve lan\u00e7ar um erro. Ver Solu\u00e7\u00e3o --- enum Role { USER, ADMIN } interface UserSession { name: string; role: Role; } // Decorator Factory function permission(requiredRole: Role) { return function(target: any, propertyKey: string, descriptor: PropertyDescriptor) { const originalMethod = descriptor.value; descriptor.value = function(...args: any[]) { // `this` aqui se refere \u00e0 inst\u00e2ncia de ProtectedService const user = (this as any).currentUser as UserSession; if (user && user.role === requiredRole) { console.log(`Permiss\u00e3o concedida para ${user.name} (${user.role}).`); return originalMethod.apply(this, args); } else { throw new Error(\"Acesso negado: permiss\u00e3o insuficiente.\"); } } } } class ProtectedService { currentUser: UserSession; constructor(user: UserSession) { this.currentUser = user; } @permission(Role.ADMIN) deleteEverything(): void { console.log(\"Todos os dados foram deletados com sucesso!\"); } @permission(Role.USER) viewDashboard(): void { console.log(\"Bem-vindo ao seu dashboard!\"); } } // Teste const adminService = new ProtectedService({ name: \"Admin\", role: Role.ADMIN }); const userService = new ProtectedService({ name: \"User\", role: Role.USER }); adminService.deleteEverything(); // OK userService.viewDashboard(); // OK try { userService.deleteEverything(); // Lan\u00e7a erro } catch (e: any) { console.error(e.message); } Checklist do Dia [ ] Usei uma classe abstrata para definir um contrato. [ ] Apliquei generics para tornar o sistema de autentica\u00e7\u00e3o flex\u00edvel. [ ] Criei um decorator para lidar com permiss\u00f5es de forma declarativa. [ ] Combinei m\u00faltiplos conceitos da semana em um \u00fanico projeto.","title":"Semana 2"},{"location":"Ts/Semana2/#semana-2-classes-avancadas-e-generics","text":"","title":"Semana 2: Classes Avan\u00e7adas e Generics"},{"location":"Ts/Semana2/#visao-geral-da-semana","text":"Com os fundamentos s\u00f3lidos, a segunda semana mergulha em conceitos mais poderosos e abstratos. Vamos explorar heran\u00e7a com abstract classes , o poder da reutiliza\u00e7\u00e3o de c\u00f3digo com generics , o uso avan\u00e7ado do this , e introduzir decorators para metaprograma\u00e7\u00e3o. Continuaremos nossa miss\u00e3o de eliminar o any com tipos mais sofisticados como never e branded types , e finalizaremos com a introdu\u00e7\u00e3o aos conditional types , uma das ferramentas mais avan\u00e7adas do TypeScript.","title":"Vis\u00e3o Geral da Semana"},{"location":"Ts/Semana2/#dia-8-heranca-e-abstract-classes","text":"","title":"Dia 8: Heran\u00e7a e Abstract Classes"},{"location":"Ts/Semana2/#foco-do-dia","text":"Entender como criar hierarquias de classes usando heran\u00e7a ( extends ) e como definir \"contratos\" de classes com abstract classes .","title":"Foco do Dia"},{"location":"Ts/Semana2/#leitura-e-teoria-aprofundada","text":"Heran\u00e7a ( extends ) : Permite que uma classe (subclasse ou classe filha) herde propriedades e m\u00e9todos de outra classe (superclasse ou classe pai). Isso promove a reutiliza\u00e7\u00e3o de c\u00f3digo. super() : Dentro do constructor de uma subclasse, super() \u00e9 usado para chamar o constructor da classe pai. Isso \u00e9 obrigat\u00f3rio antes de usar a palavra-chave this na subclasse. Sobrescrita de M\u00e9todos (Method Overriding) : Uma subclasse pode fornecer sua pr\u00f3pria implementa\u00e7\u00e3o de um m\u00e9todo que j\u00e1 existe na classe pai. Classes Abstratas ( abstract class ) : S\u00e3o classes que n\u00e3o podem ser instanciadas diretamente. Elas servem como um modelo base para outras classes. Podem conter m\u00e9todos abstratos , que s\u00e3o m\u00e9todos sem implementa\u00e7\u00e3o que devem ser implementados pelas subclasses.","title":"Leitura e Teoria (Aprofundada)"},{"location":"Ts/Semana2/#documentacao-essencial","text":"Heran\u00e7a de Classes (MDN) Abstract Classes and Members (Handbook)","title":"Documenta\u00e7\u00e3o Essencial"},{"location":"Ts/Semana2/#pratica-guiada-passo-a-passo","text":"Exemplo 1: Heran\u00e7a Simples class Animal { constructor(public name: string) {} move(distanceInMeters: number = 0) { console.log(`${this.name} moveu ${distanceInMeters}m.`); } } class Dog extends Animal { // O construtor da subclasse constructor(name: string) { super(name); // Chama o construtor da classe Animal } // Sobrescrevendo o m\u00e9todo move move(distanceInMeters: number = 5) { console.log(\"Correndo...\"); super.move(distanceInMeters); } } const myDog = new Dog(\"Rex\"); myDog.move(10); Exemplo 2: Classes Abstratas abstract class Shape { // M\u00e9todo abstrato: sem implementa\u00e7\u00e3o, deve ser definido na subclasse abstract getArea(): number; // M\u00e9todo concreto: j\u00e1 tem implementa\u00e7\u00e3o e \u00e9 herdado printInfo() { console.log(`Esta \u00e9 uma forma com \u00e1rea de ${this.getArea()}`); } } class Circle extends Shape { constructor(private radius: number) { super(); } // Implementa\u00e7\u00e3o obrigat\u00f3ria do m\u00e9todo abstrato getArea(): number { return Math.PI * this.radius ** 2; } } // const shape = new Shape(); // Erro: N\u00e3o se pode criar inst\u00e2ncia de classe abstrata. const myCircle = new Circle(10); myCircle.printInfo();","title":"Pr\u00e1tica Guiada (Passo a Passo)"},{"location":"Ts/Semana2/#exercicios-praticos-niveis-crescentes","text":"N\u00edvel 1: B\u00e1sico Crie uma classe base Vehicle com uma propriedade brand (marca) e um m\u00e9todo startEngine() que imprime \"Motor ligado\". Crie uma subclasse Car que herda de Vehicle e adiciona uma propriedade model . O construtor de Car deve receber brand e model . Ver Solu\u00e7\u00e3o --- class Vehicle { constructor(public brand: string) {} startEngine(): void { console.log(\"Motor ligado.\"); } } class Car extends Vehicle { constructor(brand: string, public model: string) { super(brand); // Passa a marca para o construtor da classe pai } displayInfo(): void { console.log(`Carro: ${this.brand} ${this.model}`); } } // Teste const myCar = new Car(\"Volkswagen\", \"Gol\"); myCar.displayInfo(); // \"Carro: Volkswagen Gol\" myCar.startEngine(); // \"Motor ligado.\" N\u00edvel 2: Intermedi\u00e1rio Crie uma classe abstrata LoggerBase com um m\u00e9todo abstrato log(message: string) . Crie duas classes concretas que herdam de LoggerBase : ConsoleLogger (que imprime a mensagem no console) e FileLogger (que simula a escrita da mensagem em um arquivo, imprimindo \"Escrevendo no arquivo: [mensagem]\"). Ver Solu\u00e7\u00e3o --- abstract class LoggerBase { abstract log(message: string): void; logWithTimestamp(message: string): void { const timestamp = new Date().toISOString(); this.log(`[${timestamp}] ${message}`); } } class ConsoleLogger extends LoggerBase { log(message: string): void { console.log(message); } } class FileLogger extends LoggerBase { constructor(private filePath: string) { super(); } log(message: string): void { // Simula\u00e7\u00e3o console.log(`Escrevendo em ${this.filePath}: ${message}`); } } // Teste const consoleLogger = new ConsoleLogger(); consoleLogger.logWithTimestamp(\"Esta \u00e9 uma mensagem de teste.\"); const fileLogger = new FileLogger(\"/var/log/app.log\"); fileLogger.logWithTimestamp(\"Erro cr\u00edtico no sistema.\"); N\u00edvel 3: Avan\u00e7ado Recrie a estrutura do seu GetTableDataService usando uma classe abstrata. Crie uma classe BaseService<TResponse, TParams> com um m\u00e9todo abstrato handle(params: TParams): Promise<TResponse> . Crie uma classe concreta FetchUsersService que herda de BaseService e implementa o m\u00e9todo handle para \"buscar\" uma lista de usu\u00e1rios. Ver Solu\u00e7\u00e3o --- // Defini\u00e7\u00e3o dos tipos para o servi\u00e7o concreto interface User { id: number; name: string; } interface FetchUsersParams { page: number; limit: number; } // A classe abstrata base abstract class BaseService<TResponse, TParams> { abstract handle(params: TParams): Promise<TResponse>; // Um m\u00e9todo concreto que pode ser compartilhado protected logRequest(params: TParams): void { console.log(\"Iniciando requisi\u00e7\u00e3o com os par\u00e2metros:\", params); } } // A implementa\u00e7\u00e3o concreta class FetchUsersService extends BaseService<User[], FetchUsersParams> { async handle(params: FetchUsersParams): Promise<User[]> { this.logRequest(params); console.log(`Buscando usu\u00e1rios... P\u00e1gina: ${params.page}, Limite: ${params.limit}`); // Simula uma chamada de API const fakeUsers: User[] = [ { id: 1, name: \"Lucas\" }, { id: 2, name: \"Ana\" }, ]; return Promise.resolve(fakeUsers); } } // Teste async function runService() { const userService = new FetchUsersService(); const users = await userService.handle({ page: 1, limit: 10 }); console.log(\"Usu\u00e1rios recebidos:\", users); } runService();","title":"Exerc\u00edcios Pr\u00e1ticos (N\u00edveis Crescentes)"},{"location":"Ts/Semana2/#checklist-do-dia","text":"[ ] Entendi como extends e super() funcionam. [ ] Sei a diferen\u00e7a entre uma classe normal e uma abstrata. [ ] Implementei um m\u00e9todo abstrato em uma subclasse. [ ] Criei uma hierarquia de classes para reutilizar c\u00f3digo.","title":"Checklist do Dia"},{"location":"Ts/Semana2/#dia-9-generics-em-classes","text":"","title":"Dia 9: Generics em Classes"},{"location":"Ts/Semana2/#foco-do-dia_1","text":"Escrever classes flex\u00edveis e reutiliz\u00e1veis que podem trabalhar com diferentes tipos de dados usando Generics ( <T> ).","title":"Foco do Dia"},{"location":"Ts/Semana2/#leitura-e-teoria-aprofundada_1","text":"Generics permitem que voc\u00ea crie componentes que funcionam com qualquer tipo, em vez de um tipo espec\u00edfico. Isso aumenta drasticamente a reutiliza\u00e7\u00e3o de c\u00f3digo e a seguran\u00e7a de tipo. Par\u00e2metros de Tipo ( <T> ) : A letra T \u00e9 uma conven\u00e7\u00e3o para \"Type\". Voc\u00ea pode usar qualquer nome ( <TData> , <TValue> , etc.). Ela atua como uma vari\u00e1vel para o tipo. Constraints ( extends ) : Voc\u00ea pode restringir os tipos que podem ser usados com um generic. class MyClass<T extends SomeType> significa que T deve ser compat\u00edvel com SomeType . M\u00faltiplos Par\u00e2metros de Tipo : Uma classe pode ter v\u00e1rios par\u00e2metros de tipo, como class Pair<K, V> para um par chave-valor. Tipos Padr\u00e3o : Voc\u00ea pode fornecer um tipo padr\u00e3o para um par\u00e2metro gen\u00e9rico: class MyClass<T = string> .","title":"Leitura e Teoria (Aprofundada)"},{"location":"Ts/Semana2/#documentacao-essencial_1","text":"Generics (Handbook)","title":"Documenta\u00e7\u00e3o Essencial"},{"location":"Ts/Semana2/#pratica-guiada-passo-a-passo_1","text":"Exemplo 1: Uma Caixa Gen\u00e9rica class Box<T> { private content: T; constructor(initialContent: T) { this.content = initialContent; } getContent(): T { return this.content; } } const stringBox = new Box<string>(\"Ol\u00e1, Generics!\"); const numberBox = new Box<number>(123); console.log(stringBox.getContent().toUpperCase()); console.log(numberBox.getContent().toFixed(2)); Exemplo 2: Generic com Constraints interface WithLength { length: number; } // T pode ser qualquer tipo, desde que tenha uma propriedade `length` class LengthReporter<T extends WithLength> { constructor(private value: T) {} report() { console.log(`O comprimento \u00e9 ${this.value.length}`); } } const stringReporter = new LengthReporter(\"uma string\"); const arrayReporter = new LengthReporter([1, 2, 3]); // const numberReporter = new LengthReporter(123); // Erro: `number` n\u00e3o tem a propriedade `length`. stringReporter.report(); arrayReporter.report();","title":"Pr\u00e1tica Guiada (Passo a Passo)"},{"location":"Ts/Semana2/#exercicios-praticos-niveis-crescentes_1","text":"N\u00edvel 1: B\u00e1sico Crie uma classe gen\u00e9rica DataStore<T> que armazena um array de itens do tipo T . Ela deve ter os m\u00e9todos add(item: T) e getAll(): T[] . Ver Solu\u00e7\u00e3o --- class DataStore<T> { private data: T[] = []; add(item: T): void { this.data.push(item); } getAll(): T[] { return this.data; } } // Teste com strings const stringStore = new DataStore<string>(); stringStore.add(\"TypeScript\"); stringStore.add(\"Generics\"); console.log(stringStore.getAll()); // [\"TypeScript\", \"Generics\"] // Teste com n\u00fameros const numberStore = new DataStore<number>(); numberStore.add(10); numberStore.add(20); console.log(numberStore.getAll()); // [10, 20] N\u00edvel 2: Intermedi\u00e1rio Crie uma classe gen\u00e9rica Cache<T> que armazena um valor do tipo T e uma data de expira\u00e7\u00e3o. Implemente os m\u00e9todos set(value: T, ttl: number) (ttl em segundos) e get(): T | null . O m\u00e9todo get deve retornar null se o cache tiver expirado. Ver Solu\u00e7\u00e3o --- class Cache<T> { private value: T | null = null; private expiresAt: Date | null = null; set(value: T, ttlInSeconds: number): void { this.value = value; const now = new Date(); this.expiresAt = new Date(now.getTime() + ttlInSeconds * 1000); console.log(`Valor armazenado no cache. Expira em: ${this.expiresAt.toLocaleTimeString()}`); } get(): T | null { if (this.expiresAt && this.expiresAt > new Date() && this.value) { console.log(\"Valor retornado do cache.\"); return this.value; } console.log(\"Cache expirado ou vazio.\"); this.value = null; this.expiresAt = null; return null; } } // Teste async function testCache() { const userCache = new Cache<{ name: string }>(); userCache.set({ name: \"Lucas\" }, 3); // Expira em 3 segundos console.log(userCache.get()); // Retorna o objeto await new Promise(resolve => setTimeout(resolve, 4000)); // Espera 4 segundos console.log(userCache.get()); // Retorna null } testCache(); N\u00edvel 3: Avan\u00e7ado Crie uma classe DataService<T extends { id: K }, K extends string | number> . Esta classe deve gerenciar uma cole\u00e7\u00e3o de entidades T . Implemente os m\u00e9todos add(item: T) e findById(id: K): T | undefined . O uso de m\u00faltiplos generics ( T e K ) garante que o tipo do id seja consistente. Ver Solu\u00e7\u00e3o --- // A constraint gen\u00e9rica interface BaseEntity<K extends string | number> { id: K; } class DataService<T extends BaseEntity<K>, K extends string | number> { private items: Record<K, T> = {} as Record<K, T>; add(item: T): void { this.items[item.id] = item; } findById(id: K): T | undefined { return this.items[id]; } getAll(): T[] { return Object.values(this.items); } } // Teste interface Product { id: number; name: string; price: number; } // O TS infere que K \u00e9 `number` a partir de Product['id'] const productService = new DataService<Product, number>(); productService.add({ id: 101, name: \"Laptop\", price: 5000 }); productService.add({ id: 102, name: \"Mouse\", price: 150 }); console.log(productService.findById(101)); console.log(productService.findById(999)); console.log(productService.getAll());","title":"Exerc\u00edcios Pr\u00e1ticos (N\u00edveis Crescentes)"},{"location":"Ts/Semana2/#checklist-do-dia_1","text":"[ ] Criei uma classe gen\u00e9rica simples. [ ] Usei constraints ( extends ) para limitar os tipos de um generic. [ ] Entendi como usar m\u00faltiplos par\u00e2metros de tipo. [ ] Apliquei generics para criar uma classe de servi\u00e7o reutiliz\u00e1vel.","title":"Checklist do Dia"},{"location":"Ts/Semana2/#dia-10-contexto-this-parte-2-avancada","text":"","title":"Dia 10: Contexto this - Parte 2 Avan\u00e7ada"},{"location":"Ts/Semana2/#foco-do-dia_2","text":"Explorar t\u00e9cnicas avan\u00e7adas para controlar o this , incluindo this parameters para adicionar tipagem expl\u00edcita ao this em fun\u00e7\u00f5es e ThisType<T> para fornecer contexto a objetos literais.","title":"Foco do Dia"},{"location":"Ts/Semana2/#leitura-e-teoria-aprofundada_2","text":"this Parameters : TypeScript permite que voc\u00ea declare o tipo de this como o primeiro par\u00e2metro de uma fun\u00e7\u00e3o. Este par\u00e2metro \u00e9 falso (n\u00e3o existe no JavaScript compilado), mas \u00e9 usado pelo TypeScript para garantir que a fun\u00e7\u00e3o seja chamada com o contexto correto. ThisType<T> : Um tipo utilit\u00e1rio que n\u00e3o retorna um novo tipo, mas sim modifica o contexto de this dentro de um objeto literal. \u00c9 muito \u00fatil para criar APIs onde voc\u00ea define m\u00e9todos em um objeto, mas quer que this se refira a um tipo maior e mais complexo.","title":"Leitura e Teoria (Aprofundada)"},{"location":"Ts/Semana2/#documentacao-essencial_2","text":"This Parameters (Handbook) ThisType (Handbook)","title":"Documenta\u00e7\u00e3o Essencial"},{"location":"Ts/Semana2/#pratica-guiada-passo-a-passo_2","text":"Exemplo 1: this Parameter para Seguran\u00e7a // A fun\u00e7\u00e3o espera que `this` seja um objeto com uma propriedade `name` function sayHello(this: { name: string }) { console.log(`Hello, ${this.name}!`); } const person = { name: \"Lucas\", sayHello }; const anotherPerson = { name: \"Ana\", sayHello }; person.sayHello(); // OK anotherPerson.sayHello(); // OK // sayHello(); // Erro: O `this` da fun\u00e7\u00e3o n\u00e3o \u00e9 do tipo `{ name: string }`. Exemplo 2: ThisType<T> para Objetos de Configura\u00e7\u00e3o interface ComponentOptions<T> { data: () => T; methods: Record<string, (this: T, ...args: any[]) => any>; } // O tipo `T` em `ThisType<T>` define o tipo de `this` nos m\u00e9todos function createComponent<T>(options: ComponentOptions<T> & { methods: ThisType<T> }): void { // L\u00f3gica de cria\u00e7\u00e3o do componente... console.log(\"Component created.\"); } createComponent({ data: () => ({ count: 0, message: \"Hello\" }), methods: { increment() { // Gra\u00e7as a `ThisType`, o TS sabe que `this` tem `count` e `message` this.count++; }, logMessage() { console.log(this.message); } } });","title":"Pr\u00e1tica Guiada (Passo a Passo)"},{"location":"Ts/Semana2/#exercicios-praticos-niveis-crescentes_2","text":"N\u00edvel 1: B\u00e1sico Crie uma interface User com name: string . Crie uma fun\u00e7\u00e3o printUserName que n\u00e3o recebe argumentos, mas espera que o this seja do tipo User . Demonstre seu uso correto e incorreto. Ver Solu\u00e7\u00e3o --- interface User { name: string; } function printUserName(this: User): void { console.log(`User name: ${this.name}`); } // Teste const user1: User = { name: \"Alice\" }; const user2: User = { name: \"Bob\" }; // Para chamar a fun\u00e7\u00e3o, precisamos fornecer o contexto `this` printUserName.call(user1); // \"User name: Alice\" printUserName.apply(user2); // \"User name: Bob\" // const standaloneCall = printUserName; // Erro ao tentar chamar standaloneCall() N\u00edvel 2: Intermedi\u00e1rio Crie uma classe Configuration<T> que armazena um objeto de configura\u00e7\u00e3o. Crie um m\u00e9todo update(updater: (this: T, currentConfig: T) => T) . A fun\u00e7\u00e3o updater deve receber a configura\u00e7\u00e3o atual, mas seu this deve ser tipado como a pr\u00f3pria configura\u00e7\u00e3o T , permitindo acesso direto \u00e0s propriedades. Ver Solu\u00e7\u00e3o --- class Configuration<T> { constructor(private config: T) {} public update(updater: (this: T, currentConfig: T) => T): void { const newConfig = updater.call(this.config, this.config); this.config = newConfig; } public getConfig(): T { return this.config; } } // Teste interface AppConfig { apiUrl: string; timeout: number; } const myConfig = new Configuration<AppConfig>({ apiUrl: \"/api/v1\", timeout: 5000 }); // A fun\u00e7\u00e3o updater pode usar `this` para acessar as propriedades de AppConfig myConfig.update(function(current) { return { ...current, timeout: this.timeout + 1000 // `this` \u00e9 do tipo AppConfig }; }); console.log(myConfig.getConfig()); // { apiUrl: '/api/v1', timeout: 6000 } N\u00edvel 3: Avan\u00e7ado Implemente a classe FormBuilder<T> do plano de estudos. Ela deve ter um m\u00e9todo field<K extends keyof T>(name: K, value: T[K]): this que adiciona um campo ao formul\u00e1rio. O m\u00e9todo field deve retornar this para encadeamento. Crie um m\u00e9todo build(): T que retorna o objeto de formul\u00e1rio completo. Ver Solu\u00e7\u00e3o --- class FormBuilder<T extends object> { private formData: Partial<T> = {}; // O tipo de retorno `this` permite o encadeamento public field<K extends keyof T>(name: K, value: T[K]): this { this.formData[name] = value; return this; } // O type guard `this is { formData: T }` ajuda o TS a saber que o form est\u00e1 completo private isComplete(): this is { formData: T } { // Em um cen\u00e1rio real, verificar\u00edamos se todas as chaves de T existem em formData return true; // Simplifica\u00e7\u00e3o para o exerc\u00edcio } public build(): T | Error { if (this.isComplete()) { return this.formData; // Gra\u00e7as ao type guard, o TS sabe que formData \u00e9 T, n\u00e3o Partial<T> } return new Error(\"Formul\u00e1rio incompleto.\"); } } // Teste interface UserForm { name: string; email: string; age: number; } const userFormBuilder = new FormBuilder<UserForm>(); const newUser = userFormBuilder .field(\"name\", \"Lucas\") .field(\"email\", \"lucas@ts.com\") .field(\"age\", 30) .build(); console.log(newUser);","title":"Exerc\u00edcios Pr\u00e1ticos (N\u00edveis Crescentes)"},{"location":"Ts/Semana2/#checklist-do-dia_2","text":"[ ] Entendi o prop\u00f3sito de um this parameter. [ ] Usei um this parameter para adicionar seguran\u00e7a a uma fun\u00e7\u00e3o. [ ] Entendi como ThisType<T> funciona em objetos literais. [ ] Criei uma classe builder usando this para encadeamento.","title":"Checklist do Dia"},{"location":"Ts/Semana2/#dia-11-decorators","text":"","title":"Dia 11: Decorators"},{"location":"Ts/Semana2/#foco-do-dia_3","text":"Introduzir decorators , uma proposta do ECMAScript para adicionar anota\u00e7\u00f5es e modificar classes e seus membros em tempo de design.","title":"Foco do Dia"},{"location":"Ts/Semana2/#leitura-e-teoria-aprofundada_3","text":"Decorators s\u00e3o fun\u00e7\u00f5es especiais que podem ser anexadas a classes, m\u00e9todos, propriedades ou par\u00e2metros. Eles s\u00e3o executados durante a defini\u00e7\u00e3o da classe, n\u00e3o durante a instancia\u00e7\u00e3o. Para usar decorators, voc\u00ea precisa habilitar a op\u00e7\u00e3o experimentalDecorators no seu tsconfig.json . Tipos de Decorators : Class, Method, Accessor, Property, Parameter. F\u00e1brica de Decorators (Decorator Factory) : Uma fun\u00e7\u00e3o que retorna a express\u00e3o do decorator. Isso permite que voc\u00ea configure o decorator, como @log(\"INFO\") . Composi\u00e7\u00e3o : M\u00faltiplos decorators podem ser aplicados a uma declara\u00e7\u00e3o. reflect-metadata : Uma biblioteca usada para adicionar metadados a classes e propriedades, que podem ser lidos posteriormente pelos decorators.","title":"Leitura e Teoria (Aprofundada)"},{"location":"Ts/Semana2/#documentacao-essencial_3","text":"Decorators (Handbook) (Nota: esta \u00e9 uma feature experimental)","title":"Documenta\u00e7\u00e3o Essencial"},{"location":"Ts/Semana2/#pratica-guiada-passo-a-passo_3","text":"Exemplo 1: Decorator de M\u00e9todo Simples // O decorator recebe o alvo (a classe), a chave (nome do m\u00e9todo) e o descritor da propriedade function log(target: any, propertyKey: string, descriptor: PropertyDescriptor) { const originalMethod = descriptor.value; descriptor.value = function(...args: any[]) { console.log(`Chamando o m\u00e9todo ${propertyKey} com os argumentos:`, args); const result = originalMethod.apply(this, args); console.log(`O m\u00e9todo ${propertyKey} retornou:`, result); return result; } } class Calculator { @log add(a: number, b: number): number { return a + b; } } new Calculator().add(2, 3); Exemplo 2: Decorator Factory function Enumerable(isEnumerable: boolean) { return function(target: any, propertyKey: string, descriptor: PropertyDescriptor) { descriptor.enumerable = isEnumerable; } } class Person { constructor(private name: string) {} @Enumerable(true) getName() { return this.name; } @Enumerable(false) getAge() { return 30; } } // O m\u00e9todo getName aparecer\u00e1 no loop, mas getAge n\u00e3o. for (const key in new Person(\"Lucas\")) { console.log(key); }","title":"Pr\u00e1tica Guiada (Passo a Passo)"},{"location":"Ts/Semana2/#exercicios-praticos-niveis-crescentes_3","text":"N\u00edvel 1: B\u00e1sico Crie um decorator de m\u00e9todo chamado @deprecated . Quando um m\u00e9todo decorado com ele for chamado, ele deve imprimir um aviso no console: Aviso: O m\u00e9todo [nome do m\u00e9todo] est\u00e1 obsoleto e ser\u00e1 removido em futuras vers\u00f5es. Ver Solu\u00e7\u00e3o --- function deprecated(target: any, propertyKey: string, descriptor: PropertyDescriptor) { const originalMethod = descriptor.value; descriptor.value = function(...args: any[]) { console.warn(`Aviso: O m\u00e9todo ${propertyKey} est\u00e1 obsoleto e ser\u00e1 removido em futuras vers\u00f5es.`); return originalMethod.apply(this, args); } } class OldApiService { @deprecated findUsers() { console.log(\"Buscando usu\u00e1rios...\"); return [{ name: \"Lucas\" }]; } } // Teste new OldApiService().findUsers(); N\u00edvel 2: Intermedi\u00e1rio Crie um decorator de propriedade @min(minValue: number) . Este decorator deve garantir que, sempre que a propriedade for alterada, seu novo valor n\u00e3o seja menor que minValue . Se for, um erro deve ser lan\u00e7ado. Ver Solu\u00e7\u00e3o --- function min(minValue: number) { return function(target: any, propertyKey: string) { let value = target[propertyKey]; const getter = () => value; const setter = (newValue: number) => { if (newValue < minValue) { throw new Error(`O valor de ${propertyKey} n\u00e3o pode ser menor que ${minValue}.`); } value = newValue; }; Object.defineProperty(target, propertyKey, { get: getter, set: setter, enumerable: true, configurable: true, }); } } class Product { @min(0) price: number; @min(0) stock: number; constructor(price: number, stock: number) { this.price = price; this.stock = stock; } } // Teste const product = new Product(50, 100); console.log(product.price); // 50 product.price = 75; console.log(product.price); // 75 try { product.stock = -10; } catch (e: any) { console.error(e.message); } N\u00edvel 3: Avan\u00e7ado Crie um decorator de m\u00e9todo @cache . Ele deve armazenar o resultado da primeira chamada do m\u00e9todo. Nas chamadas subsequentes com os mesmos argumentos, ele deve retornar o resultado do cache em vez de executar o m\u00e9todo novamente. Use JSON.stringify para criar uma chave de cache a partir dos argumentos. Ver Solu\u00e7\u00e3o --- function cache(target: any, propertyKey: string, descriptor: PropertyDescriptor) { const originalMethod = descriptor.value; const cache = new Map<string, any>(); descriptor.value = function(...args: any[]) { const cacheKey = JSON.stringify(args); if (cache.has(cacheKey)) { console.log(`Retornando do cache para a chave: ${cacheKey}`); return cache.get(cacheKey); } console.log(`Executando o m\u00e9todo pela primeira vez para a chave: ${cacheKey}`); const result = originalMethod.apply(this, args); cache.set(cacheKey, result); return result; } } class MathOperations { @cache heavyCalculation(a: number, b: number): number { // Simula uma opera\u00e7\u00e3o pesada const start = Date.now(); while (Date.now() - start < 1000) {} return a + b; } } // Teste const math = new MathOperations(); console.log(math.heavyCalculation(2, 3)); // Executa, demora 1s, retorna 5 console.log(math.heavyCalculation(5, 10)); // Executa, demora 1s, retorna 15 console.log(math.heavyCalculation(2, 3)); // Retorna do cache, instant\u00e2neo, retorna 5","title":"Exerc\u00edcios Pr\u00e1ticos (N\u00edveis Crescentes)"},{"location":"Ts/Semana2/#checklist-do-dia_3","text":"[ ] Habilitei experimentalDecorators no tsconfig.json . [ ] Entendi a diferen\u00e7a entre um decorator e uma decorator factory. [ ] Criei um decorator de m\u00e9todo simples. [ ] Criei um decorator de propriedade que modifica seu comportamento.","title":"Checklist do Dia"},{"location":"Ts/Semana2/#dia-12-eliminando-any-parte-2","text":"","title":"Dia 12: Eliminando any - Parte 2"},{"location":"Ts/Semana2/#foco-do-dia_4","text":"Introduzir tipos avan\u00e7ados para aumentar a seguran\u00e7a: never para c\u00f3digo inalcan\u00e7\u00e1vel e branded types para criar tipos nominais que o TypeScript n\u00e3o suporta nativamente.","title":"Foco do Dia"},{"location":"Ts/Semana2/#leitura-e-teoria-aprofundada_4","text":"never : Representa o tipo de valores que nunca ocorrem. \u00c9 usado em dois cen\u00e1rios principais: Em fun\u00e7\u00f5es que nunca retornam (ex: lan\u00e7am uma exce\u00e7\u00e3o ou entram em um loop infinito). Para fazer verifica\u00e7\u00e3o exaustiva (exhaustive checking) em switch ou if/else , garantindo que todos os casos de uma uni\u00e3o foram tratados. Branded Types (ou Opaque Types) : Uma t\u00e9cnica para criar tipos que s\u00e3o estruturalmente id\u00eanticos (ex: ambos s\u00e3o string ), mas nominalmente diferentes para o TypeScript. Isso evita que voc\u00ea passe um UserID para uma fun\u00e7\u00e3o que espera um ProductID . \u00c9 um padr\u00e3o, n\u00e3o uma feature nativa.","title":"Leitura e Teoria (Aprofundada)"},{"location":"Ts/Semana2/#documentacao-essencial_4","text":"The never Type (Handbook) Exhaustiveness checking (Handbook)","title":"Documenta\u00e7\u00e3o Essencial"},{"location":"Ts/Semana2/#pratica-guiada-passo-a-passo_4","text":"Exemplo 1: never para Verifica\u00e7\u00e3o Exaustiva type Shape = { kind: \"circle\"; radius: number } | { kind: \"square\"; sideLength: number }; function getArea(shape: Shape) { switch (shape.kind) { case \"circle\": return Math.PI * shape.radius ** 2; case \"square\": return shape.sideLength ** 2; default: // Se adicionarmos um novo tipo a Shape (ex: triangle), o TS dar\u00e1 um erro aqui, // pois o novo tipo n\u00e3o pode ser atribu\u00eddo a `never`. const _exhaustiveCheck: never = shape; return _exhaustiveCheck; } } Exemplo 2: Branded Types // O \"brand\" que torna o tipo \u00fanico type Brand<K, T> = K & { __brand: T }; // Criando tipos nominais a partir de tipos primitivos type UserId = Brand<string, \"UserId\">; type ProductId = Brand<string, \"ProductId\">; function getUser(id: UserId) { console.log(`Buscando usu\u00e1rio com ID: ${id}`); } const userId = \"user-123\" as UserId; const productId = \"prod-456\" as ProductId; getUser(userId); // OK // getUser(productId); // Erro! O tipo `ProductId` n\u00e3o \u00e9 compat\u00edvel com `UserId`.","title":"Pr\u00e1tica Guiada (Passo a Passo)"},{"location":"Ts/Semana2/#exercicios-praticos-niveis-crescentes_4","text":"N\u00edvel 1: B\u00e1sico Crie uma fun\u00e7\u00e3o fail(message: string): never que sempre lan\u00e7a um erro com a mensagem fornecida. Use-a em uma fun\u00e7\u00e3o que processa um string | number e chama fail se o tipo n\u00e3o for nenhum dos dois. Ver Solu\u00e7\u00e3o --- function fail(message: string): never { throw new Error(message); } function processValue(value: string | number) { if (typeof value === 'string') { console.log(\"Processando string:\", value.toUpperCase()); } else if (typeof value === 'number') { console.log(\"Processando n\u00famero:\", value.toFixed(2)); } else { // O TS sabe que este c\u00f3digo \u00e9 inalcan\u00e7\u00e1vel fail(\"Valor inesperado!\"); } } // Teste processValue(\"hello\"); processValue(123); N\u00edvel 2: Intermedi\u00e1rio Crie um branded type Email a partir de string . Crie uma fun\u00e7\u00e3o sendEmail(to: Email, subject: string) que s\u00f3 aceita o tipo Email . Crie uma fun\u00e7\u00e3o createEmail(address: string): Email | null que valida se a string cont\u00e9m um @ antes de fazer a asser\u00e7\u00e3o de tipo para Email . Ver Solu\u00e7\u00e3o --- type Brand<K, T> = K & { __brand: T }; type Email = Brand<string, \"Email\">; function createEmail(address: string): Email | null { if (address.includes(\"@\")) { return address as Email; } return null; } function sendEmail(to: Email, subject: string): void { console.log(`Enviando email para ${to} com o assunto: \"${subject}\"`); } // Teste const userEmail = createEmail(\"lucas@example.com\"); const invalidEmail = createEmail(\"invalid-address\"); const plainString = \"another@test.com\"; if (userEmail) { sendEmail(userEmail, \"Ol\u00e1!\"); // OK } if (invalidEmail === null) { console.log(\"Endere\u00e7o de email inv\u00e1lido detectado.\"); } // sendEmail(plainString, \"Assunto\"); // Erro: `string` n\u00e3o \u00e9 compat\u00edvel com `Email`. N\u00edvel 3: Avan\u00e7ado Crie um wrapper type-safe para uma biblioteca externa falsa. A biblioteca tem um objeto untypedLibrary que \u00e9 any . Crie fun\u00e7\u00f5es safeGetNumber(key: string) e safeGetString(key: string) que usam o untypedLibrary , verificam o tipo do valor retornado, e o retornam com o tipo correto ou undefined se o tipo n\u00e3o corresponder. Ver Solu\u00e7\u00e3o --- // A biblioteca externa perigosa declare const untypedLibrary: any; const untypedLibrary = { appName: \"Super App\", version: 2.1, userCount: 1500, settings: { theme: \"dark\" } }; // O wrapper seguro class SafeLibraryWrapper { private lib: any; constructor(library: any) { this.lib = library; } public get(key: string): unknown { return this.lib[key]; } public getString(key: string): string | undefined { const value = this.get(key); if (typeof value === 'string') { return value; } return undefined; } public getNumber(key: string): number | undefined { const value = this.get(key); if (typeof value === 'number') { return value; } return undefined; } } // Teste const safeLib = new SafeLibraryWrapper(untypedLibrary); const appName = safeLib.getString(\"appName\"); const version = safeLib.getNumber(\"version\"); const userCount = safeLib.getNumber(\"userCount\"); const settings = safeLib.getString(\"settings\"); // Retorna undefined, pois n\u00e3o \u00e9 string console.log(`App: ${appName}, Vers\u00e3o: ${version}, Usu\u00e1rios: ${userCount}`); console.log(`Settings (string):`, settings);","title":"Exerc\u00edcios Pr\u00e1ticos (N\u00edveis Crescentes)"},{"location":"Ts/Semana2/#checklist-do-dia_4","text":"[ ] Entendi o prop\u00f3sito do tipo never . [ ] Usei never para fazer verifica\u00e7\u00e3o exaustiva. [ ] Entendi o padr\u00e3o de Branded Types e por que ele \u00e9 \u00fatil. [ ] Criei e usei um branded type para aumentar a seguran\u00e7a de tipo.","title":"Checklist do Dia"},{"location":"Ts/Semana2/#dia-13-conditional-types","text":"","title":"Dia 13: Conditional Types"},{"location":"Ts/Semana2/#foco-do-dia_5","text":"Entender Conditional Types , que permitem que um tipo seja escolhido com base em uma condi\u00e7\u00e3o, e a palavra-chave infer para extrair tipos de dentro de outros tipos.","title":"Foco do Dia"},{"location":"Ts/Semana2/#leitura-e-teoria-aprofundada_5","text":"Conditional Types t\u00eam a forma T extends U ? X : Y , que se l\u00ea como: \"Se T for compat\u00edvel com U , ent\u00e3o o tipo \u00e9 X , sen\u00e3o o tipo \u00e9 Y \". infer : A palavra-chave infer pode ser usada dentro da cl\u00e1usula extends para declarar uma nova vari\u00e1vel de tipo gen\u00e9rico. Ela \"captura\" o tipo que est\u00e1 naquela posi\u00e7\u00e3o para que voc\u00ea possa us\u00e1-lo. Exemplo com infer : type UnpackPromise<T> = T extends Promise<infer U> ? U : T; Aqui, infer U captura o tipo que est\u00e1 dentro do Promise (ex: string em Promise<string> ) e o retorna. Se T n\u00e3o for uma Promise , ele retorna T .","title":"Leitura e Teoria (Aprofundada)"},{"location":"Ts/Semana2/#documentacao-essencial_5","text":"Conditional Types (Handbook) Inferring with infer (Handbook)","title":"Documenta\u00e7\u00e3o Essencial"},{"location":"Ts/Semana2/#pratica-guiada-passo-a-passo_5","text":"Exemplo 1: Tipo Condicional Simples type IsString<T> = T extends string ? true : false; type A = IsString<string>; // true type B = IsString<number>; // false Exemplo 2: infer para Obter o Tipo de Retorno de uma Fun\u00e7\u00e3o type GetReturnType<T> = T extends (...args: any[]) => infer R ? R : T; type Fn = () => number; type Num = GetReturnType<Fn>; // number type Str = GetReturnType<string>; // string (cai no caso `Y`)","title":"Pr\u00e1tica Guiada (Passo a Passo)"},{"location":"Ts/Semana2/#exercicios-praticos-niveis-crescentes_5","text":"N\u00edvel 1: B\u00e1sico Crie um tipo utilit\u00e1rio ElementTypeOf<T> que obt\u00e9m o tipo dos elementos de um array. Se T n\u00e3o for um array, ele deve retornar never . Ex: ElementTypeOf<string[]> deve ser string . Ver Solu\u00e7\u00e3o --- type ElementTypeOf<T> = T extends (infer E)[] ? E : never; // Teste type A = ElementTypeOf<string[]>; // string type B = ElementTypeOf<number[]>; // number type C = ElementTypeOf<{ name: string }[]>; // { name: string } type D = ElementTypeOf<string>; // never N\u00edvel 2: Intermedi\u00e1rio Implemente seu pr\u00f3prio NonNullable<T> . Este tipo utilit\u00e1rio deve remover null e undefined de um tipo T . Ver Solu\u00e7\u00e3o --- type MyNonNullable<T> = T extends null | undefined ? never : T; // Teste type A = MyNonNullable<string | null>; // string type B = MyNonNullable<string | number | undefined>; // string | number type C = MyNonNullable<null | undefined>; // never N\u00edvel 3: Avan\u00e7ado Implemente o tipo DeepPartial<T> do plano de estudos. Ele deve tornar todas as propriedades de um objeto e de seus sub-objetos aninhados opcionais. Dica: voc\u00ea precisar\u00e1 de recurs\u00e3o e mapped types. Ver Solu\u00e7\u00e3o --- type DeepPartial<T> = T extends object ? { // Para cada propriedade P no objeto T [P in keyof T]?: DeepPartial<T[P]>; // Torna a propriedade opcional e aplica DeepPartial recursivamente } : T; // Se T n\u00e3o for um objeto, retorna o pr\u00f3prio tipo // Teste interface UserProfile { id: number; details: { name: string; address: { street: string; city: string; } } } type PartialUserProfile = DeepPartial<UserProfile>; const partialProfile: PartialUserProfile = { id: 1, details: { address: { city: \"S\u00e3o Paulo\" } } };","title":"Exerc\u00edcios Pr\u00e1ticos (N\u00edveis Crescentes)"},{"location":"Ts/Semana2/#checklist-do-dia_5","text":"[ ] Entendi a sintaxe T extends U ? X : Y . [ ] Usei infer para extrair um tipo de dentro de outro. [ ] Criei um tipo utilit\u00e1rio condicional simples. [ ] Implementei um tipo utilit\u00e1rio recursivo ( DeepPartial ).","title":"Checklist do Dia"},{"location":"Ts/Semana2/#dia-14-projeto-mini-2-sistema-de-autenticacao","text":"","title":"Dia 14: Projeto Mini #2 - Sistema de Autentica\u00e7\u00e3o"},{"location":"Ts/Semana2/#foco-do-dia_6","text":"Consolidar os conceitos da semana (Heran\u00e7a, Generics, Decorators, Conditional Types) para construir um mini-sistema de autentica\u00e7\u00e3o type-safe.","title":"Foco do Dia"},{"location":"Ts/Semana2/#leitura-e-teoria-revisao","text":"Abstract Classes : Para definir um contrato para provedores de autentica\u00e7\u00e3o. Generics : Para lidar com diferentes tipos de dados de usu\u00e1rio (ex: User , Admin ). Decorators : Para adicionar verifica\u00e7\u00e3o de permiss\u00f5es de forma declarativa. Conditional Types : Para criar tipos de permiss\u00e3o din\u00e2micos.","title":"Leitura e Teoria (Revis\u00e3o)"},{"location":"Ts/Semana2/#exercicios-praticos-niveis-crescentes_6","text":"N\u00edvel 1: B\u00e1sico Crie uma classe abstrata AuthProvider com um m\u00e9todo abstrato authenticate(credentials: any): Promise<boolean> . Crie duas classes concretas: EmailProvider e GoogleProvider , que herdam de AuthProvider e implementam o m\u00e9todo authenticate (pode apenas simular a l\u00f3gica e retornar true ). Ver Solu\u00e7\u00e3o --- abstract class AuthProvider { abstract authenticate(credentials: any): Promise<boolean>; } class EmailProvider extends AuthProvider { async authenticate(credentials: { email: string, pass: string }): Promise<boolean> { console.log(`Autenticando com email: ${credentials.email}`); return true; // Simula\u00e7\u00e3o } } class GoogleProvider extends AuthProvider { async authenticate(credentials: { token: string }): Promise<boolean> { console.log(`Autenticando com token do Google: ${credentials.token.substring(0, 10)}...`); return true; // Simula\u00e7\u00e3o } } // Teste const emailAuth = new EmailProvider(); emailAuth.authenticate({ email: \"test@test.com\", pass: \"123\" }); const googleAuth = new GoogleProvider(); googleAuth.authenticate({ token: \"abc123xyz\" }); N\u00edvel 2: Intermedi\u00e1rio Melhore o sistema do N\u00edvel 1. Torne a classe AuthProvider gen\u00e9rica: AuthProvider<TUser, TCreds> . O m\u00e9todo authenticate deve agora retornar Promise<TUser | null> . Adapte as classes EmailProvider e GoogleProvider para usar tipos espec\u00edficos de usu\u00e1rio e credenciais. Ver Solu\u00e7\u00e3o --- interface BaseUser { id: number; name: string; } abstract class AuthProvider<TUser extends BaseUser, TCreds> { abstract authenticate(credentials: TCreds): Promise<TUser | null>; } // Tipos para Email interface EmailUser extends BaseUser { email: string; } interface EmailCreds { email: string; pass: string; } class EmailProvider extends AuthProvider<EmailUser, EmailCreds> { async authenticate(credentials: EmailCreds): Promise<EmailUser | null> { console.log(`Autenticando com email: ${credentials.email}`); if (credentials.pass === \"123\") { return { id: 1, name: \"Usu\u00e1rio de Email\", email: credentials.email }; } return null; } } // Tipos para Google interface GoogleUser extends BaseUser { googleId: string; } interface GoogleCreds { token: string; } class GoogleProvider extends AuthProvider<GoogleUser, GoogleCreds> { async authenticate(credentials: GoogleCreds): Promise<GoogleUser | null> { console.log(`Autenticando com token do Google...`); return { id: 2, name: \"Usu\u00e1rio do Google\", googleId: \"g-123\" }; } } // Teste async function testAuth() { const emailAuth = new EmailProvider(); const user1 = await emailAuth.authenticate({ email: \"test@test.com\", pass: \"123\" }); console.log(\"Usu\u00e1rio 1:\", user1); const googleAuth = new GoogleProvider(); const user2 = await googleAuth.authenticate({ token: \"abc123xyz\" }); console.log(\"Usu\u00e1rio 2:\", user2); } testAuth(); N\u00edvel 3: Avan\u00e7ado Crie um decorator de m\u00e9todo @permission(requiredRole: Role) . Crie um enum Role { USER, ADMIN } . Crie uma classe ProtectedService com um usu\u00e1rio logado (que tem uma propriedade role ). Adicione um m\u00e9todo sensitiveData() decorado com @permission('ADMIN') . O decorator deve verificar se o role do usu\u00e1rio na inst\u00e2ncia do servi\u00e7o corresponde ao requiredRole antes de executar o m\u00e9todo. Se n\u00e3o, deve lan\u00e7ar um erro. Ver Solu\u00e7\u00e3o --- enum Role { USER, ADMIN } interface UserSession { name: string; role: Role; } // Decorator Factory function permission(requiredRole: Role) { return function(target: any, propertyKey: string, descriptor: PropertyDescriptor) { const originalMethod = descriptor.value; descriptor.value = function(...args: any[]) { // `this` aqui se refere \u00e0 inst\u00e2ncia de ProtectedService const user = (this as any).currentUser as UserSession; if (user && user.role === requiredRole) { console.log(`Permiss\u00e3o concedida para ${user.name} (${user.role}).`); return originalMethod.apply(this, args); } else { throw new Error(\"Acesso negado: permiss\u00e3o insuficiente.\"); } } } } class ProtectedService { currentUser: UserSession; constructor(user: UserSession) { this.currentUser = user; } @permission(Role.ADMIN) deleteEverything(): void { console.log(\"Todos os dados foram deletados com sucesso!\"); } @permission(Role.USER) viewDashboard(): void { console.log(\"Bem-vindo ao seu dashboard!\"); } } // Teste const adminService = new ProtectedService({ name: \"Admin\", role: Role.ADMIN }); const userService = new ProtectedService({ name: \"User\", role: Role.USER }); adminService.deleteEverything(); // OK userService.viewDashboard(); // OK try { userService.deleteEverything(); // Lan\u00e7a erro } catch (e: any) { console.error(e.message); }","title":"Exerc\u00edcios Pr\u00e1ticos (N\u00edveis Crescentes)"},{"location":"Ts/Semana2/#checklist-do-dia_6","text":"[ ] Usei uma classe abstrata para definir um contrato. [ ] Apliquei generics para tornar o sistema de autentica\u00e7\u00e3o flex\u00edvel. [ ] Criei um decorator para lidar com permiss\u00f5es de forma declarativa. [ ] Combinei m\u00faltiplos conceitos da semana em um \u00fanico projeto.","title":"Checklist do Dia"},{"location":"Ts/Semana3/","text":"Semana 3: Patterns Arquiteturais e Function Types Vis\u00e3o Geral da Semana Na terceira semana, mudamos o foco para padr\u00f5es de c\u00f3digo e arquitetura de software em TypeScript. Come\u00e7aremos com t\u00e9cnicas avan\u00e7adas de tipagem de fun\u00e7\u00f5es, como function overloading , e mergulharemos fundo nos mapped types para transforma\u00e7\u00f5es de tipos complexas. Em seguida, aplicaremos esses conceitos para construir uma camada de servi\u00e7o robusta, implementar um sistema de tratamento de erros type-safe (Result Pattern) e dominar padr\u00f5es avan\u00e7ados com Record . A semana culmina na constru\u00e7\u00e3o de um cliente HTTP type-safe, consolidando tudo o que aprendemos. Dia 15: Function Overloading Foco do Dia Definir m\u00faltiplas assinaturas de tipo para uma \u00fanica fun\u00e7\u00e3o, permitindo que ela se comporte de maneira diferente e retorne tipos diferentes com base nos argumentos fornecidos. Leitura e Teoria (Aprofundada) Function Overloading em TypeScript consiste em duas partes: 1. Assinaturas de Sobrecarga (Overload Signatures) : Uma ou mais declara\u00e7\u00f5es do tipo da fun\u00e7\u00e3o, sem corpo. Elas definem as maneiras p\u00fablicas como a fun\u00e7\u00e3o pode ser chamada. 2. Assinatura de Implementa\u00e7\u00e3o (Implementation Signature) : Uma \u00fanica declara\u00e7\u00e3o de fun\u00e7\u00e3o com um corpo. Sua assinatura de tipo deve ser geral o suficiente para ser compat\u00edvel com todas as assinaturas de sobrecarga. O corpo da fun\u00e7\u00e3o geralmente precisa verificar os tipos dos argumentos para executar a l\u00f3gica correta. O TypeScript s\u00f3 verifica a compatibilidade com as assinaturas de sobrecarga ao chamar a fun\u00e7\u00e3o, n\u00e3o com a assinatura de implementa\u00e7\u00e3o. Documenta\u00e7\u00e3o Essencial Function Overloads (Handbook) Pr\u00e1tica Guiada (Passo a Passo) Exemplo 1: Sobrecarga Simples // Assinatura 1: recebe n\u00famero, retorna n\u00famero function reverse(x: number): number; // Assinatura 2: recebe string, retorna string function reverse(x: string): string; // Assinatura de Implementa\u00e7\u00e3o function reverse(x: number | string): number | string { if (typeof x === 'string') { return x.split('').reverse().join(''); } return Number(x.toString().split('').reverse().join('')); } const reversedString = reverse(\"hello\"); // O TS sabe que o tipo \u00e9 string const reversedNumber = reverse(12345); // O TS sabe que o tipo \u00e9 number Exemplo 2: Sobrecarga com N\u00famero de Argumentos Diferente // Assinatura 1 function makeDate(timestamp: number): Date; // Assinatura 2 function makeDate(year: number, month: number, day: number): Date; // Assinatura de Implementa\u00e7\u00e3o function makeDate(arg1: number, arg2?: number, arg3?: number): Date { if (arg2 !== undefined && arg3 !== undefined) { return new Date(arg1, arg2, arg3); } return new Date(arg1); } const d1 = makeDate(1234567890); const d2 = makeDate(2023, 11, 24); // const d3 = makeDate(2023, 11); // Erro: Nenhuma sobrecarga corresponde a esta chamada. Exerc\u00edcios Pr\u00e1ticos (N\u00edveis Crescentes) N\u00edvel 1: B\u00e1sico Crie uma fun\u00e7\u00e3o doubleMe que tem duas sobrecargas: se receber um number , retorna um number (o dobro). Se receber um string , retorna uma string (a string concatenada com ela mesma). Ver Solu\u00e7\u00e3o --- function doubleMe(x: number): number; function doubleMe(x: string): string; function doubleMe(x: any): any { if (typeof x === 'number') { return x * 2; } if (typeof x === 'string') { return x + x; } } // Teste const numResult = doubleMe(10); // 20 (tipo number) const strResult = doubleMe(\"hi\"); // \"hihi\" (tipo string) console.log(typeof numResult, numResult); console.log(typeof strResult, strResult); N\u00edvel 2: Intermedi\u00e1rio Crie uma fun\u00e7\u00e3o createElement . Se ela receber um \u00fanico argumento ( 'div' ), ela deve retornar um HTMLDivElement . Se receber 'input' , deve retornar um HTMLInputElement . Use sobrecargas para tipar o retorno corretamente. Ver Solu\u00e7\u00e3o --- // Tipos de retorno simulados, j\u00e1 que n\u00e3o estamos no DOM interface HTMLDivElement { type: 'div'; } interface HTMLInputElement { type: 'input'; } // Sobrecargas function createElement(tag: 'div'): HTMLDivElement; function createElement(tag: 'input'): HTMLInputElement; // Implementa\u00e7\u00e3o function createElement(tag: 'div' | 'input'): HTMLDivElement | HTMLInputElement { if (tag === 'div') { return { type: 'div' }; } // Se n\u00e3o for 'div', deve ser 'input' return { type: 'input' }; } // Teste const div = createElement('div'); // O tipo de `div` \u00e9 HTMLDivElement const input = createElement('input'); // O tipo de `input` \u00e9 HTMLInputElement console.log(div.type); console.log(input.type); N\u00edvel 3: Avan\u00e7ado Implemente a fun\u00e7\u00e3o getData do plano de estudos. Ela deve ter duas sobrecargas: 1. getData(id: string): Promise<User> : Busca um \u00fanico usu\u00e1rio. 2. getData(filter: Filter): Promise<User[]> : Busca uma lista de usu\u00e1rios. Simule a l\u00f3gica de busca e os tipos User e Filter . Ver Solu\u00e7\u00e3o --- interface User { id: string; name: string; } interface Filter { status: 'active' | 'inactive'; } // Sobrecarga 1 function getData(id: string): Promise<User>; // Sobrecarga 2 function getData(filter: Filter): Promise<User[]>; // Implementa\u00e7\u00e3o async function getData(arg: string | Filter): Promise<User | User[]> { if (typeof arg === 'string') { console.log(`Buscando usu\u00e1rio com id: ${arg}`); return { id: arg, name: 'Lucas' }; // Simula\u00e7\u00e3o } console.log(`Buscando usu\u00e1rios com filtro:`, arg); return [ { id: '1', name: 'Ana' }, { id: '2', name: 'Beto' }, ]; // Simula\u00e7\u00e3o } // Teste async function testGetData() { const singleUser = await getData('user-1'); console.log('Usu\u00e1rio \u00fanico:', singleUser.name); const userList = await getData({ status: 'active' }); console.log('Lista de usu\u00e1rios:', userList.length); } testGetData(); Checklist do Dia [ ] Entendi a diferen\u00e7a entre assinatura de sobrecarga e de implementa\u00e7\u00e3o. [ ] Criei uma fun\u00e7\u00e3o com m\u00faltiplas assinaturas de tipo. [ ] Usei sobrecargas para retornar tipos diferentes com base nos argumentos. [ ] Implementei uma fun\u00e7\u00e3o ass\u00edncrona com sobrecargas. Dia 16: Mapped Types Avan\u00e7ados Foco do Dia Dominar Mapped Types para criar novos tipos transformando as propriedades de tipos existentes, incluindo key remapping com as para renomear chaves. Leitura e Teoria (Aprofundada) Mapped Types iteram sobre as chaves de um tipo para criar um novo tipo. A sintaxe \u00e9 [P in keyof T]: ... . Modificadores : Voc\u00ea pode adicionar ou remover modificadores como readonly e ? (opcional) durante o mapeamento. -readonly remove, +readonly (ou apenas readonly ) adiciona. Key Remapping com as : Permite transformar os nomes das chaves. [P in keyof T as NewKeyType] . Template Literal Types em Mapped Types : A combina\u00e7\u00e3o mais poderosa. Permite criar novas chaves baseadas em um padr\u00e3o, como adicionar get ou set como prefixo. Documenta\u00e7\u00e3o Essencial Mapped Types (Handbook) Key Remapping via as (Handbook) Pr\u00e1tica Guiada (Passo a Passo) Exemplo 1: Criando um tipo de Getters interface Person { name: string; age: number; } // Para cada chave P em Person, cria uma chave `getName`, `getAge` // que \u00e9 uma fun\u00e7\u00e3o retornando o tipo da propriedade original. type Getters<T> = { [P in keyof T as `get${Capitalize<string & P>}`]: () => T[P] }; type PersonGetters = Getters<Person>; // Equivale a: { getName: () => string; getAge: () => number; } Exemplo 2: Removendo readonly interface LockedConfig { readonly apiUrl: string; readonly apiKey: string; } type Mutable<T> = { -readonly [P in keyof T]: T[P] }; type UnlockedConfig = Mutable<LockedConfig>; // Equivale a: { apiUrl: string; apiKey: string; } Exemplo 3: Filtrando Chaves interface User { id: number; name: string; email: string; passwordHash: string; } // Filtra chaves cujo valor n\u00e3o \u00e9 do tipo `string` type StringPropertiesOnly<T> = { [K in keyof T as T[K] extends string ? K : never]: T[K] }; type UserStringProps = StringPropertiesOnly<User>; // Equivale a: { name: string; email: string; passwordHash: string; } Exerc\u00edcios Pr\u00e1ticos (N\u00edveis Crescentes) N\u00edvel 1: B\u00e1sico Crie um Mapped Type ObjectWithSetters<T> que pega um objeto T e cria um novo tipo onde cada propriedade prop se torna um m\u00e9todo setProp(value: T[prop]): void . Ver Solu\u00e7\u00e3o --- type ObjectWithSetters<T> = { [P in keyof T as `set${Capitalize<string & P>}`]: (value: T[P]) => void; }; // Teste interface Settings { theme: string; fontSize: number; } type SettingsSetters = ObjectWithSetters<Settings>; // Esperado: { setTheme: (value: string) => void; setFontSize: (value: number) => void; } const setters: SettingsSetters = { setTheme: (s) => console.log(s), setFontSize: (n) => console.log(n), }; N\u00edvel 2: Intermedi\u00e1rio Crie um Mapped Type FilterByType<T, U> que pega um tipo T e remove todas as propriedades que n\u00e3o s\u00e3o do tipo U . Ver Solu\u00e7\u00e3o --- type FilterByType<T, U> = { [P in keyof T as T[P] extends U ? P : never]: T[P]; }; // Teste interface MixedBag { name: string; count: number; active: boolean; value: number; } type NumberOnlyBag = FilterByType<MixedBag, number>; // Esperado: { count: number; value: number; } const numbers: NumberOnlyBag = { count: 5, value: 10 }; N\u00edvel 3: Avan\u00e7ado Implemente o FormConfig<T> do plano de estudos. Ele deve pegar um tipo T e gerar um novo tipo onde cada chave K \u00e9 transformada em ${string & K}Config e o valor \u00e9 um objeto de configura\u00e7\u00e3o FieldConfig<T[K]> . Ver Solu\u00e7\u00e3o --- // Tipo auxiliar para a configura\u00e7\u00e3o do campo interface FieldConfig<T> { label: string; type: T extends string ? 'text' : T extends number ? 'number' : 'checkbox'; defaultValue: T; } // O Mapped Type avan\u00e7ado type FormConfig<T> = { [K in keyof T as `${string & K}Config`]: FieldConfig<T[K]>; }; // Teste interface UserForm { name: string; age: number; isAdmin: boolean; } type GeneratedFormConfig = FormConfig<UserForm>; /* Esperado: { nameConfig: FieldConfig<string>; ageConfig: FieldConfig<number>; isAdminConfig: FieldConfig<boolean>; } */ const userFormConfig: GeneratedFormConfig = { nameConfig: { label: 'Nome', type: 'text', defaultValue: '' }, ageConfig: { label: 'Idade', type: 'number', defaultValue: 0 }, isAdminConfig: { label: '\u00c9 Admin?', type: 'checkbox', defaultValue: false }, }; Checklist do Dia [ ] Criei um mapped type simples. [ ] Usei as para renomear chaves (key remapping). [ ] Combinei mapped types com template literals. [ ] Usei um tipo condicional para filtrar chaves em um mapped type. Dia 17: Service Layer Architecture Foco do Dia Aplicar os conceitos de classes abstratas e interfaces para projetar uma camada de servi\u00e7o (Service Layer) desacoplada e test\u00e1vel. Leitura e Teoria (Aprofundada) Service Layer : Uma camada na arquitetura de uma aplica\u00e7\u00e3o que encapsula a l\u00f3gica de neg\u00f3cio. Ela coordena o trabalho entre a camada de apresenta\u00e7\u00e3o (ex: controllers) e a camada de acesso a dados (ex: repositories). Dependency Injection (DI) : Um padr\u00e3o onde as depend\u00eancias de uma classe (outros objetos que ela precisa para funcionar) s\u00e3o \"injetadas\" de fora (geralmente no construtor), em vez de serem criadas dentro da pr\u00f3pria classe. Isso torna as classes mais desacopladas e f\u00e1ceis de testar, pois voc\u00ea pode injetar \"mocks\" (depend\u00eancias falsas) durante os testes. Interface Segregation Principle : Um dos princ\u00edpios SOLID. Diz que \u00e9 melhor ter muitas interfaces pequenas e espec\u00edficas do que uma \u00fanica interface grande e gen\u00e9rica. Em TypeScript, usamos interface ou type para definir os \"contratos\" que as classes devem seguir. Documenta\u00e7\u00e3o Essencial Interfaces (Handbook) Pr\u00e1tica Guiada (Passo a Passo) Exemplo: Injetando um Reposit\u00f3rio em um Servi\u00e7o // Contrato para o reposit\u00f3rio de usu\u00e1rios interface IUserRepository { findById(id: string): Promise<{ id: string, name: string } | null>; } // Servi\u00e7o que depende do reposit\u00f3rio class UserService { // A depend\u00eancia \u00e9 injetada no construtor constructor(private userRepository: IUserRepository) {} async getUserName(id: string): Promise<string> { const user = await this.userRepository.findById(id); if (!user) { return \"Usu\u00e1rio n\u00e3o encontrado\"; } return user.name; } } // Implementa\u00e7\u00e3o real do reposit\u00f3rio class UserRepository implements IUserRepository { async findById(id: string) { return { id, name: \"Lucas da Silva\" }; // Simula\u00e7\u00e3o } } // Implementa\u00e7\u00e3o falsa (mock) para testes class MockUserRepository implements IUserRepository { async findById(id: string) { if (id === '1') return { id: '1', name: 'Mock User' }; return null; } } // Uso em produ\u00e7\u00e3o const realService = new UserService(new UserRepository()); // Uso em testes const testService = new UserService(new MockUserRepository()); Exerc\u00edcios Pr\u00e1ticos (N\u00edveis Crescentes) N\u00edvel 1: B\u00e1sico Defina uma interface INotifier com um m\u00e9todo notify(message: string): void . Crie uma classe OrderService que recebe um INotifier no construtor. Crie um m\u00e9todo placeOrder() na OrderService que, ap\u00f3s simular a cria\u00e7\u00e3o de um pedido, chama notifier.notify(\"Pedido realizado com sucesso!\") . Ver Solu\u00e7\u00e3o --- interface INotifier { notify(message: string): void; } class EmailNotifier implements INotifier { notify(message: string): void { console.log(`Enviando email: ${message}`); } } class OrderService { constructor(private notifier: INotifier) {} placeOrder(): void { console.log(\"Processando pedido...\"); // L\u00f3gica do pedido... console.log(\"Pedido processado.\"); this.notifier.notify(\"Seu pedido foi realizado com sucesso!\"); } } // Teste const emailNotifier = new EmailNotifier(); const orderService = new OrderService(emailNotifier); orderService.placeOrder(); N\u00edvel 2: Intermedi\u00e1rio Crie uma interface IProductRepository com um m\u00e9todo getProductPrice(productId: number): Promise<number> . Crie uma classe PricingService que depende de IProductRepository . O servi\u00e7o deve ter um m\u00e9todo calculateDiscount(productId: number, discountPercentage: number) que busca o pre\u00e7o do produto e retorna o valor do desconto. Ver Solu\u00e7\u00e3o --- interface IProductRepository { getProductPrice(productId: number): Promise<number>; } // Implementa\u00e7\u00e3o real class ProductRepository implements IProductRepository { async getProductPrice(productId: number): Promise<number> { // Simula busca no banco de dados const prices: Record<number, number> = { 101: 50, 102: 120 }; return prices[productId] || 0; } } class PricingService { constructor(private productRepo: IProductRepository) {} async calculateDiscount(productId: number, discountPercentage: number): Promise<number> { const price = await this.productRepo.getProductPrice(productId); if (price === 0) { console.log(\"Produto n\u00e3o encontrado.\"); return 0; } const discount = price * (discountPercentage / 100); return discount; } } // Teste async function testPricing() { const repo = new ProductRepository(); const service = new PricingService(repo); const discountValue = await service.calculateDiscount(101, 10); // 10% de 50 console.log(`Valor do desconto: R$${discountValue}`); // 5 } testPricing(); N\u00edvel 3: Avan\u00e7ado Recrie e melhore seu GetTableDataService . Defina uma classe abstrata GetTableDataService<TResponse, TParams> com um m\u00e9todo abstrato handle(params: TParams): Promise<TResponse> . Crie uma implementa\u00e7\u00e3o concreta UserTableService que depende de um IUserRepository (com um m\u00e9todo find(params: TParams) ) injetado no construtor. Ver Solu\u00e7\u00e3o --- // Contratos e Tipos interface User { id: number; name: string; status: string; } interface UserFindParams { page: number; filterByStatus?: string; } interface IUserRepository { find(params: UserFindParams): Promise<User[]>; } // Classe Abstrata do Servi\u00e7o abstract class GetTableDataService<TResponse, TParams> { abstract handle(params: TParams): Promise<TResponse>; } // Implementa\u00e7\u00e3o do Reposit\u00f3rio class UserRepository implements IUserRepository { private allUsers: User[] = [ { id: 1, name: 'Alice', status: 'active' }, { id: 2, name: 'Bob', status: 'inactive' }, { id: 3, name: 'Charlie', status: 'active' }, ]; async find(params: UserFindParams): Promise<User[]> { if (params.filterByStatus) { return this.allUsers.filter(u => u.status === params.filterByStatus); } return this.allUsers; } } // Implementa\u00e7\u00e3o Concreta do Servi\u00e7o class UserTableService extends GetTableDataService<User[], UserFindParams> { constructor(private userRepository: IUserRepository) { super(); } handle(params: UserFindParams): Promise<User[]> { console.log(\"Service: buscando dados da tabela de usu\u00e1rios...\"); return this.userRepository.find(params); } } // Teste async function testTableService() { const repo = new UserRepository(); const tableService = new UserTableService(repo); const activeUsers = await tableService.handle({ page: 1, filterByStatus: 'active' }); console.log(\"Usu\u00e1rios ativos:\", activeUsers); } testTableService(); Checklist do Dia [ ] Entendi o que \u00e9 uma camada de servi\u00e7o. [ ] Usei inje\u00e7\u00e3o de depend\u00eancia para desacoplar uma classe. [ ] Defini um contrato com interface para uma depend\u00eancia. [ ] Implementei um servi\u00e7o que depende de um reposit\u00f3rio. Dia 18: Error Handling Type-Safe Foco do Dia Implementar um sistema de tratamento de erros sem usar try/catch em toda parte, utilizando o padr\u00e3o Result (tamb\u00e9m conhecido como Either ) com discriminated unions. Leitura e Teoria (Aprofundada) Lan\u00e7ar exce\u00e7\u00f5es \u00e9 \u00fatil, mas pode tornar o fluxo de controle dif\u00edcil de seguir. Uma alternativa comum em programa\u00e7\u00e3o funcional \u00e9 fazer com que as fun\u00e7\u00f5es retornem um tipo que representa tanto o sucesso quanto o fracasso. Result Pattern : Uma fun\u00e7\u00e3o, em vez de retornar um valor T ou lan\u00e7ar um Error , retorna um objeto Result<T, E> . Este objeto \u00e9 uma uni\u00e3o discriminada de dois tipos: Success<T> : Cont\u00e9m o valor de sucesso. Failure<E> : Cont\u00e9m o valor do erro. Isso for\u00e7a quem chama a fun\u00e7\u00e3o a verificar explicitamente se a opera\u00e7\u00e3o foi bem-sucedida ou n\u00e3o, tornando o c\u00f3digo mais previs\u00edvel e seguro. Documenta\u00e7\u00e3o Essencial Discriminated Unions (Revis\u00e3o) Pr\u00e1tica Guiada (Passo a Passo) Exemplo: Definindo e usando o tipo Result // 1. Definir os tipos Success, Failure e Result type Success<T> = { success: true; value: T }; type Failure<E> = { success: false; error: E }; type Result<T, E> = Success<T> | Failure<E>; // 2. Criar uma fun\u00e7\u00e3o que retorna um Result function safeDivide(a: number, b: number): Result<number, string> { if (b === 0) { return { success: false, error: \"Divis\u00e3o por zero!\" }; } return { success: true, value: a / b }; } // 3. Consumir a fun\u00e7\u00e3o de forma segura const result = safeDivide(10, 2); if (result.success) { // O TS sabe que `result` \u00e9 Success<number> aqui console.log(\"Resultado:\", result.value); } else { // O TS sabe que `result` \u00e9 Failure<string> aqui console.error(\"Erro:\", result.error); } Exerc\u00edcios Pr\u00e1ticos (N\u00edveis Crescentes) N\u00edvel 1: B\u00e1sico Crie uma fun\u00e7\u00e3o parseNumber(s: string): Result<number, string> que tenta converter uma string para um n\u00famero. Se isNaN(result) for verdadeiro, retorne um Failure . Caso contr\u00e1rio, retorne um Success . Ver Solu\u00e7\u00e3o --- type Success<T> = { success: true; value: T }; type Failure<E> = { success: false; error: E }; type Result<T, E> = Success<T> | Failure<E>; function parseNumber(s: string): Result<number, string> { const num = Number(s); if (isNaN(num)) { return { success: false, error: `\\'${s}\\' n\u00e3o \u00e9 um n\u00famero v\u00e1lido.` }; } return { success: true, value: num }; } // Teste const res1 = parseNumber(\"123\"); if (res1.success) console.log(res1.value); const res2 = parseNumber(\"abc\"); if (!res2.success) console.error(res2.error); N\u00edvel 2: Intermedi\u00e1rio Crie uma classe Result com m\u00e9todos est\u00e1ticos ok<T>(value: T) e fail<E>(error: E) para facilitar a cria\u00e7\u00e3o. Refatore o exerc\u00edcio anterior para usar Result.ok(...) e Result.fail(...) . Ver Solu\u00e7\u00e3o --- // Tipos auxiliares class Success<T> { readonly value: T; readonly success = true; constructor(value: T) { this.value = value; } } class Failure<E> { readonly error: E; readonly success = false; constructor(error: E) { this.error = error; } } // A classe Result com m\u00e9todos est\u00e1ticos class Result<T, E> { static ok<T, E>(value: T): Result<T, E> { return new Success(value); } static fail<T, E>(error: E): Result<T, E> { return new Failure(error); } } function parseNumber(s: string): Success<number> | Failure<string> { const num = Number(s); if (isNaN(num)) { return new Failure(`\\'${s}\\' n\u00e3o \u00e9 um n\u00famero v\u00e1lido.`); } return new Success(num); } // Teste const res = parseNumber(\"456\"); if (res.success) { console.log(\"Valor parseado:\", res.value); } N\u00edvel 3: Avan\u00e7ado Crie uma fun\u00e7\u00e3o fetchUserProfile(userId: string): Promise<Result<User, Error>> . Esta fun\u00e7\u00e3o deve simular uma chamada de API. Se o userId for '1' , retorne um Success com um objeto User . Se for qualquer outro valor, retorne um Failure com um new Error(\"Usu\u00e1rio n\u00e3o encontrado\") . Ver Solu\u00e7\u00e3o --- // Reutilizando os tipos do N\u00edvel 1 type Success<T> = { success: true; value: T }; type Failure<E> = { success: false; error: E }; type Result<T, E> = Success<T> | Failure<E>; interface User { id: string; name: string; } async function fetchUserProfile(userId: string): Promise<Result<User, Error>> { console.log(`Buscando perfil para o usu\u00e1rio ${userId}...`); // Simula\u00e7\u00e3o de chamada de API if (userId === '1') { const user: User = { id: '1', name: 'Admin User' }; return { success: true, value: user }; } return { success: false, error: new Error(\"Usu\u00e1rio n\u00e3o encontrado\") }; } // Teste async function testFetch() { const result1 = await fetchUserProfile('1'); if (result1.success) { console.log(\"Bem-vindo,\", result1.value.name); } else { console.error(result1.error.message); } const result2 = await fetchUserProfile('2'); if (result2.success) { console.log(\"Bem-vindo,\", result2.value.name); } else { console.error(result2.error.message); } } testFetch(); Checklist do Dia [ ] Entendi o Result Pattern e suas vantagens. [ ] Criei um tipo Result usando discriminated unions. [ ] Implementei uma fun\u00e7\u00e3o que retorna Success ou Failure . [ ] Consumi uma fun\u00e7\u00e3o que retorna Result de forma type-safe. Dia 19: Advanced Record Patterns Foco do Dia Explorar usos avan\u00e7ados do tipo Record<K, V> , combinando-o com const assertions para imutabilidade e template literal types para criar dicion\u00e1rios mais seguros e expressivos. Leitura e Teoria (Aprofundada) Record<Keys, Type> : Cria um tipo de objeto com um conjunto espec\u00edfico de chaves ( Keys ) e um tipo de valor ( Type ). const Assertions ( as const ) : Quando usado em um objeto literal, diz ao TypeScript para tratar o objeto como profundamente readonly . As propriedades se tornam readonly e os literais (strings, n\u00fameros) se tornam tipos literais, n\u00e3o tipos gerais ( 'myString' se torna tipo 'myString' , n\u00e3o string ). Combina\u00e7\u00e3o : Usar Record para definir a estrutura e as const para garantir imutabilidade e tipos literais precisos \u00e9 um padr\u00e3o poderoso para configura\u00e7\u00f5es, dicion\u00e1rios de tradu\u00e7\u00e3o, etc. Documenta\u00e7\u00e3o Essencial Utility Types (Revis\u00e3o) Const Assertions (Handbook) Pr\u00e1tica Guiada (Passo a Passo) Exemplo: Dicion\u00e1rio de Configura\u00e7\u00e3o com as const const AppConfig = { API_URL: \"/api\", TIMEOUT: 5000, THEME: \"dark\", } as const; // AppConfig.API_URL = \"/api/v2\"; // Erro: Cannot assign to 'API_URL' because it is a read-only property. // O tipo de THEME \u00e9 'dark', n\u00e3o string! type Theme = typeof AppConfig[\"THEME\"]; // 'dark' Exemplo: Record com Template Literals type IconName = 'user' | 'cart' | 'home'; type IconPath = `/icons/${IconName}.svg`; const iconMap: Record<IconName, IconPath> = { user: '/icons/user.svg', cart: '/icons/cart.svg', home: '/icons/home.svg', }; Exerc\u00edcios Pr\u00e1ticos (N\u00edveis Crescentes) N\u00edvel 1: B\u00e1sico Crie um objeto HttpStatusCodes que mapeia nomes de status ( OK , NOT_FOUND , SERVER_ERROR ) para seus c\u00f3digos num\u00e9ricos (200, 404, 500). Use as const para garantir que os valores n\u00e3o possam ser alterados. Ver Solu\u00e7\u00e3o --- const HttpStatusCodes = { OK: 200, NOT_FOUND: 404, SERVER_ERROR: 500, } as const; // Teste console.log(HttpStatusCodes.OK); // 200 // HttpStatusCodes.OK = 201; // Erro: Cannot assign to 'OK' because it is a read-only property. // O tipo de HttpStatusCodes.OK \u00e9 200, n\u00e3o number. type OkStatus = typeof HttpStatusCodes.OK; // 200 N\u00edvel 2: Intermedi\u00e1rio Crie um tipo UserAction ( 'create' | 'edit' | 'delete' ). Crie um objeto actionPermissions que mapeia cada UserAction para um n\u00edvel de permiss\u00e3o ( 'admin' | 'editor' | 'guest' ). Use Record para garantir que todas as a\u00e7\u00f5es sejam mapeadas. Ver Solu\u00e7\u00e3o --- type UserAction = 'create' | 'edit' | 'delete'; type PermissionLevel = 'admin' | 'editor' | 'guest'; const actionPermissions: Record<UserAction, PermissionLevel> = { create: 'admin', edit: 'editor', delete: 'admin', }; // Teste function checkPermission(action: UserAction) { console.log(`A\u00e7\u00e3o '${action}' requer n\u00edvel '${actionPermissions[action]}'.`); } checkPermission('edit'); // const p: Record<UserAction, PermissionLevel> = { create: 'admin' }; // Erro: Faltam 'edit' e 'delete' N\u00edvel 3: Avan\u00e7ado Implemente o tooltipContent do plano de estudos. Crie um enum ColumnType . Crie um tipo DictionaryPath usando template literals. Crie o objeto tooltipContent usando Record para o mapeamento e as const para imutabilidade total. Ver Solu\u00e7\u00e3o --- enum ColumnType { YIELD = 'yield', PRICE = 'price', } type DictionaryPath = `min_fare.table.tooltips.${string}`; // O tipo garante que todas as chaves de ColumnType existam e que os valores sigam o padr\u00e3o. const tooltipContent: Record<ColumnType, DictionaryPath> = { [ColumnType.YIELD]: 'min_fare.table.tooltips.yield', [ColumnType.PRICE]: 'min_fare.table.tooltips.price', }; // Adicionando `as const` para imutabilidade e tipos literais precisos const immutableTooltipContent = { [ColumnType.YIELD]: 'min_fare.table.tooltips.yield', [ColumnType.PRICE]: 'min_fare.table.tooltips.price', } as const; // immutableTooltipContent.yield = '...'; // Erro: readonly // O tipo do valor \u00e9 literal, n\u00e3o string type YieldTooltipPath = typeof immutableTooltipContent[ColumnType.YIELD]; Checklist do Dia [ ] Usei as const para criar um objeto imut\u00e1vel. [ ] Entendi como as const afeta a infer\u00eancia de tipo. [ ] Combinei Record com enum para criar um dicion\u00e1rio seguro. [ ] Combinei Record , template literals e as const . Dia 20: Utility Types Avan\u00e7ados Foco do Dia Dominar os utility types que operam sobre fun\u00e7\u00f5es: Parameters , ReturnType , ConstructorParameters , e InstanceType . Leitura e Teoria (Aprofundada) Estes tipos permitem extrair \"partes\" de tipos de fun\u00e7\u00e3o, o que \u00e9 extremamente \u00fatil para metaprograma\u00e7\u00e3o e para manter a consist\u00eancia de tipos sem repeti\u00e7\u00e3o. Parameters<T> : Extrai os tipos dos par\u00e2metros de uma fun\u00e7\u00e3o T como uma tupla. ReturnType<T> : Extrai o tipo de retorno de uma fun\u00e7\u00e3o T . ConstructorParameters<T> : Extrai os tipos dos par\u00e2metros do construtor de uma classe T como uma tupla. InstanceType<T> : Extrai o tipo da inst\u00e2ncia de uma classe T . Documenta\u00e7\u00e3o Essencial Advanced Utility Types (Handbook) Pr\u00e1tica Guiada (Passo a Passo) Exemplo 1: Parameters e ReturnType function greet(name: string, age: number): string { return `Hello ${name}, you are ${age} years old.`; } type GreetParams = Parameters<typeof greet>; // [string, number] type GreetReturn = ReturnType<typeof greet>; // string Exemplo 2: ConstructorParameters e InstanceType class Person { constructor(public name: string, public age: number) {} } type PersonConstructorParams = ConstructorParameters<typeof Person>; // [string, number] type PersonInstance = InstanceType<typeof Person>; // Person Exerc\u00edcios Pr\u00e1ticos (N\u00edveis Crescentes) N\u00edvel 1: B\u00e1sico Crie uma fun\u00e7\u00e3o log(message: string, level: 'info' | 'warn' | 'error') . Use Parameters<T> para criar um tipo LogParams que represente os par\u00e2metros da fun\u00e7\u00e3o log . Ver Solu\u00e7\u00e3o --- function log(message: string, level: 'info' | 'warn' | 'error'): void { console.log(`[${level.toUpperCase()}] ${message}`); } type LogParams = Parameters<typeof log>; // [string, 'info' | 'warn' | 'error'] // Teste const params: LogParams = [\"Usu\u00e1rio logado com sucesso\", \"info\"]; log(...params); N\u00edvel 2: Intermedi\u00e1rio Crie uma fun\u00e7\u00e3o fetchData(): Promise<{ data: string[] }> que simula uma chamada de API. Use ReturnType<T> para extrair o tipo de retorno. Em seguida, use Awaited<T> (um tipo nativo) para extrair o tipo resolvido da Promise. Ver Solu\u00e7\u00e3o --- async function fetchData(): Promise<{ data: string[] }> { return { data: ['a', 'b', 'c'] }; } // O tipo de retorno da fun\u00e7\u00e3o em si type FetchDataReturn = ReturnType<typeof fetchData>; // Promise<{ data: string[] }> // O tipo que a Promise resolve type FetchedData = Awaited<FetchDataReturn>; // { data: string[] } // Teste async function processData() { const data: FetchedData = await fetchData(); console.log(data.data.join(', ')); } processData(); N\u00edvel 3: Avan\u00e7ado Implemente o ServiceFactory<T> do plano de estudos. Deve ser um tipo que representa um objeto com um m\u00e9todo create . Este m\u00e9todo create deve aceitar os mesmos par\u00e2metros que o construtor da classe T e retornar uma inst\u00e2ncia de T . Ver Solu\u00e7\u00e3o --- // O tipo gen\u00e9rico da f\u00e1brica type ServiceFactory<T extends new (...args: any[]) => any> = { create(...args: ConstructorParameters<T>): InstanceType<T>; }; // Classe de exemplo class ProductService { constructor(private apiVersion: string) { console.log(`ProductService inicializado com API v${apiVersion}`); } getProducts() { /* ... */ } } // Implementa\u00e7\u00e3o da f\u00e1brica const ProductServiceFactory: ServiceFactory<typeof ProductService> = { create(...args) { return new ProductService(...args); }, }; // Teste const productServiceInstance = ProductServiceFactory.create(\"2.0\"); console.log(productServiceInstance instanceof ProductService); // true Checklist do Dia [ ] Usei Parameters para extrair os tipos dos par\u00e2metros de uma fun\u00e7\u00e3o. [ ] Usei ReturnType para extrair o tipo de retorno. [ ] Usei ConstructorParameters e InstanceType em uma classe. [ ] Criei um tipo de f\u00e1brica gen\u00e9rico usando utility types de fun\u00e7\u00e3o. Dia 21: Projeto Mini #3 - HTTP Client Type-Safe Foco do Dia Consolidar os conceitos da semana (Function Overloading, Mapped Types, Service Layer, Result Pattern) para construir um cliente HTTP type-safe. Leitura e Teoria (Revis\u00e3o) Function Overloading : Para criar m\u00e9todos como client.get(...) que podem ter assinaturas diferentes. Result Pattern : Para tratar erros de rede (ex: 404, 500) de forma expl\u00edcita. Generics : Para tipar a resposta esperada da API ( TResponse ). Record Patterns : Para configurar headers e par\u00e2metros. Exerc\u00edcios Pr\u00e1ticos (N\u00edveis Crescentes) N\u00edvel 1: B\u00e1sico Crie uma classe HttpClient com um \u00fanico m\u00e9todo get<T>(url: string): Promise<T> . Este m\u00e9todo deve simular uma chamada de rede e retornar um objeto T . N\u00e3o se preocupe com erros ainda. Ver Solu\u00e7\u00e3o --- class HttpClient { async get<T>(url: string): Promise<T> { console.log(`Fazendo GET para: ${url}`); // Simula\u00e7\u00e3o const response = { data: { id: 1, name: \"Item Falso\" } }; return response as T; } } // Teste interface UserResponse { data: { id: number; name: string; } } async function testClient() { const client = new HttpClient(); const response = await client.get<UserResponse>(\"/api/users/1\"); console.log(response.data.name); } testClient(); N\u00edvel 2: Intermedi\u00e1rio Melhore o HttpClient do N\u00edvel 1 para usar o Result pattern. O m\u00e9todo get<T>(url: string) deve agora retornar Promise<Result<T, Error>> . Se a URL contiver a palavra 'fail' , simule um erro e retorne um Failure . Caso contr\u00e1rio, retorne um Success . Ver Solu\u00e7\u00e3o --- // Reutilizando o tipo Result type Success<T> = { success: true; value: T }; type Failure<E> = { success: false; error: E }; type Result<T, E> = Success<T> | Failure<E>; class HttpClient { async get<T>(url: string): Promise<Result<T, Error>> { console.log(`Fazendo GET para: ${url}`); // Simula\u00e7\u00e3o de erro if (url.includes('fail')) { return { success: false, error: new Error(\"Erro de Rede 404\") }; } // Simula\u00e7\u00e3o de sucesso const response = { data: { id: 1, name: \"Item Falso\" } }; return { success: true, value: response as T }; } } // Teste interface UserResponse { data: { id: number; name: string; } } async function testClient() { const client = new HttpClient(); const successResult = await client.get<UserResponse>(\"/api/users/1\"); if (successResult.success) { console.log(\"Sucesso:\", successResult.value.data.name); } const errorResult = await client.get<UserResponse>(\"/api/fail/users/1\"); if (!errorResult.success) { console.error(\"Erro:\", errorResult.error.message); } } testClient(); N\u00edvel 3: Avan\u00e7ado Adicione sobrecarga de fun\u00e7\u00e3o ao HttpClient . Crie um m\u00e9todo request com duas sobrecargas: 1. request<T>(method: 'GET', url: string): Promise<Result<T, Error>> 2. request<T>(method: 'POST', url: string, body: any): Promise<Result<T, Error>> Implemente a l\u00f3gica na assinatura de implementa\u00e7\u00e3o para lidar com ambos os casos. Ver Solu\u00e7\u00e3o --- // Reutilizando o tipo Result type Success<T> = { success: true; value: T }; type Failure<E> = { success: false; error: E }; type Result<T, E> = Success<T> | Failure<E>; class HttpClient { // Sobrecarga para GET request<T>(method: 'GET', url: string): Promise<Result<T, Error>>; // Sobrecarga para POST request<T>(method: 'POST', url: string, body: any): Promise<Result<T, Error>>; // Implementa\u00e7\u00e3o async request< T >( method: 'GET' | 'POST', url: string, body?: any ): Promise<Result<T, Error>> { console.log(`Fazendo ${method} para: ${url}`); if (method === 'POST') { console.log(\"Corpo da requisi\u00e7\u00e3o:\", body); } // Simula\u00e7\u00e3o de erro if (url.includes('fail')) { return { success: false, error: new Error(`Erro de Rede ${method === 'GET' ? 404 : 500}`) }; } // Simula\u00e7\u00e3o de sucesso const response = { data: { id: 1, name: \"Item Falso\" } }; return { success: true, value: response as T }; } } // Teste interface UserResponse { data: { id: number; name: string; } } async function testClient() { const client = new HttpClient(); const getResult = await client.request<UserResponse>('GET', \"/api/users/1\"); if (getResult.success) console.log(\"GET Sucesso:\", getResult.value.data.name); const postResult = await client.request<UserResponse>('POST', \"/api/users\", { name: 'Novo Usu\u00e1rio' }); if (postResult.success) console.log(\"POST Sucesso:\", postResult.value.data.name); } testClient(); Checklist do Dia [ ] Usei sobrecarga de fun\u00e7\u00e3o para um m\u00e9todo de cliente HTTP. [ ] Integrei o Result Pattern no tratamento de erros de rede. [ ] Usei generics para tipar a resposta da API. [ ] Combinei m\u00faltiplos conceitos da semana em um \u00fanico projeto.","title":"Semana 3"},{"location":"Ts/Semana3/#semana-3-patterns-arquiteturais-e-function-types","text":"","title":"Semana 3: Patterns Arquiteturais e Function Types"},{"location":"Ts/Semana3/#visao-geral-da-semana","text":"Na terceira semana, mudamos o foco para padr\u00f5es de c\u00f3digo e arquitetura de software em TypeScript. Come\u00e7aremos com t\u00e9cnicas avan\u00e7adas de tipagem de fun\u00e7\u00f5es, como function overloading , e mergulharemos fundo nos mapped types para transforma\u00e7\u00f5es de tipos complexas. Em seguida, aplicaremos esses conceitos para construir uma camada de servi\u00e7o robusta, implementar um sistema de tratamento de erros type-safe (Result Pattern) e dominar padr\u00f5es avan\u00e7ados com Record . A semana culmina na constru\u00e7\u00e3o de um cliente HTTP type-safe, consolidando tudo o que aprendemos.","title":"Vis\u00e3o Geral da Semana"},{"location":"Ts/Semana3/#dia-15-function-overloading","text":"","title":"Dia 15: Function Overloading"},{"location":"Ts/Semana3/#foco-do-dia","text":"Definir m\u00faltiplas assinaturas de tipo para uma \u00fanica fun\u00e7\u00e3o, permitindo que ela se comporte de maneira diferente e retorne tipos diferentes com base nos argumentos fornecidos.","title":"Foco do Dia"},{"location":"Ts/Semana3/#leitura-e-teoria-aprofundada","text":"Function Overloading em TypeScript consiste em duas partes: 1. Assinaturas de Sobrecarga (Overload Signatures) : Uma ou mais declara\u00e7\u00f5es do tipo da fun\u00e7\u00e3o, sem corpo. Elas definem as maneiras p\u00fablicas como a fun\u00e7\u00e3o pode ser chamada. 2. Assinatura de Implementa\u00e7\u00e3o (Implementation Signature) : Uma \u00fanica declara\u00e7\u00e3o de fun\u00e7\u00e3o com um corpo. Sua assinatura de tipo deve ser geral o suficiente para ser compat\u00edvel com todas as assinaturas de sobrecarga. O corpo da fun\u00e7\u00e3o geralmente precisa verificar os tipos dos argumentos para executar a l\u00f3gica correta. O TypeScript s\u00f3 verifica a compatibilidade com as assinaturas de sobrecarga ao chamar a fun\u00e7\u00e3o, n\u00e3o com a assinatura de implementa\u00e7\u00e3o.","title":"Leitura e Teoria (Aprofundada)"},{"location":"Ts/Semana3/#documentacao-essencial","text":"Function Overloads (Handbook)","title":"Documenta\u00e7\u00e3o Essencial"},{"location":"Ts/Semana3/#pratica-guiada-passo-a-passo","text":"Exemplo 1: Sobrecarga Simples // Assinatura 1: recebe n\u00famero, retorna n\u00famero function reverse(x: number): number; // Assinatura 2: recebe string, retorna string function reverse(x: string): string; // Assinatura de Implementa\u00e7\u00e3o function reverse(x: number | string): number | string { if (typeof x === 'string') { return x.split('').reverse().join(''); } return Number(x.toString().split('').reverse().join('')); } const reversedString = reverse(\"hello\"); // O TS sabe que o tipo \u00e9 string const reversedNumber = reverse(12345); // O TS sabe que o tipo \u00e9 number Exemplo 2: Sobrecarga com N\u00famero de Argumentos Diferente // Assinatura 1 function makeDate(timestamp: number): Date; // Assinatura 2 function makeDate(year: number, month: number, day: number): Date; // Assinatura de Implementa\u00e7\u00e3o function makeDate(arg1: number, arg2?: number, arg3?: number): Date { if (arg2 !== undefined && arg3 !== undefined) { return new Date(arg1, arg2, arg3); } return new Date(arg1); } const d1 = makeDate(1234567890); const d2 = makeDate(2023, 11, 24); // const d3 = makeDate(2023, 11); // Erro: Nenhuma sobrecarga corresponde a esta chamada.","title":"Pr\u00e1tica Guiada (Passo a Passo)"},{"location":"Ts/Semana3/#exercicios-praticos-niveis-crescentes","text":"N\u00edvel 1: B\u00e1sico Crie uma fun\u00e7\u00e3o doubleMe que tem duas sobrecargas: se receber um number , retorna um number (o dobro). Se receber um string , retorna uma string (a string concatenada com ela mesma). Ver Solu\u00e7\u00e3o --- function doubleMe(x: number): number; function doubleMe(x: string): string; function doubleMe(x: any): any { if (typeof x === 'number') { return x * 2; } if (typeof x === 'string') { return x + x; } } // Teste const numResult = doubleMe(10); // 20 (tipo number) const strResult = doubleMe(\"hi\"); // \"hihi\" (tipo string) console.log(typeof numResult, numResult); console.log(typeof strResult, strResult); N\u00edvel 2: Intermedi\u00e1rio Crie uma fun\u00e7\u00e3o createElement . Se ela receber um \u00fanico argumento ( 'div' ), ela deve retornar um HTMLDivElement . Se receber 'input' , deve retornar um HTMLInputElement . Use sobrecargas para tipar o retorno corretamente. Ver Solu\u00e7\u00e3o --- // Tipos de retorno simulados, j\u00e1 que n\u00e3o estamos no DOM interface HTMLDivElement { type: 'div'; } interface HTMLInputElement { type: 'input'; } // Sobrecargas function createElement(tag: 'div'): HTMLDivElement; function createElement(tag: 'input'): HTMLInputElement; // Implementa\u00e7\u00e3o function createElement(tag: 'div' | 'input'): HTMLDivElement | HTMLInputElement { if (tag === 'div') { return { type: 'div' }; } // Se n\u00e3o for 'div', deve ser 'input' return { type: 'input' }; } // Teste const div = createElement('div'); // O tipo de `div` \u00e9 HTMLDivElement const input = createElement('input'); // O tipo de `input` \u00e9 HTMLInputElement console.log(div.type); console.log(input.type); N\u00edvel 3: Avan\u00e7ado Implemente a fun\u00e7\u00e3o getData do plano de estudos. Ela deve ter duas sobrecargas: 1. getData(id: string): Promise<User> : Busca um \u00fanico usu\u00e1rio. 2. getData(filter: Filter): Promise<User[]> : Busca uma lista de usu\u00e1rios. Simule a l\u00f3gica de busca e os tipos User e Filter . Ver Solu\u00e7\u00e3o --- interface User { id: string; name: string; } interface Filter { status: 'active' | 'inactive'; } // Sobrecarga 1 function getData(id: string): Promise<User>; // Sobrecarga 2 function getData(filter: Filter): Promise<User[]>; // Implementa\u00e7\u00e3o async function getData(arg: string | Filter): Promise<User | User[]> { if (typeof arg === 'string') { console.log(`Buscando usu\u00e1rio com id: ${arg}`); return { id: arg, name: 'Lucas' }; // Simula\u00e7\u00e3o } console.log(`Buscando usu\u00e1rios com filtro:`, arg); return [ { id: '1', name: 'Ana' }, { id: '2', name: 'Beto' }, ]; // Simula\u00e7\u00e3o } // Teste async function testGetData() { const singleUser = await getData('user-1'); console.log('Usu\u00e1rio \u00fanico:', singleUser.name); const userList = await getData({ status: 'active' }); console.log('Lista de usu\u00e1rios:', userList.length); } testGetData();","title":"Exerc\u00edcios Pr\u00e1ticos (N\u00edveis Crescentes)"},{"location":"Ts/Semana3/#checklist-do-dia","text":"[ ] Entendi a diferen\u00e7a entre assinatura de sobrecarga e de implementa\u00e7\u00e3o. [ ] Criei uma fun\u00e7\u00e3o com m\u00faltiplas assinaturas de tipo. [ ] Usei sobrecargas para retornar tipos diferentes com base nos argumentos. [ ] Implementei uma fun\u00e7\u00e3o ass\u00edncrona com sobrecargas.","title":"Checklist do Dia"},{"location":"Ts/Semana3/#dia-16-mapped-types-avancados","text":"","title":"Dia 16: Mapped Types Avan\u00e7ados"},{"location":"Ts/Semana3/#foco-do-dia_1","text":"Dominar Mapped Types para criar novos tipos transformando as propriedades de tipos existentes, incluindo key remapping com as para renomear chaves.","title":"Foco do Dia"},{"location":"Ts/Semana3/#leitura-e-teoria-aprofundada_1","text":"Mapped Types iteram sobre as chaves de um tipo para criar um novo tipo. A sintaxe \u00e9 [P in keyof T]: ... . Modificadores : Voc\u00ea pode adicionar ou remover modificadores como readonly e ? (opcional) durante o mapeamento. -readonly remove, +readonly (ou apenas readonly ) adiciona. Key Remapping com as : Permite transformar os nomes das chaves. [P in keyof T as NewKeyType] . Template Literal Types em Mapped Types : A combina\u00e7\u00e3o mais poderosa. Permite criar novas chaves baseadas em um padr\u00e3o, como adicionar get ou set como prefixo.","title":"Leitura e Teoria (Aprofundada)"},{"location":"Ts/Semana3/#documentacao-essencial_1","text":"Mapped Types (Handbook) Key Remapping via as (Handbook)","title":"Documenta\u00e7\u00e3o Essencial"},{"location":"Ts/Semana3/#pratica-guiada-passo-a-passo_1","text":"Exemplo 1: Criando um tipo de Getters interface Person { name: string; age: number; } // Para cada chave P em Person, cria uma chave `getName`, `getAge` // que \u00e9 uma fun\u00e7\u00e3o retornando o tipo da propriedade original. type Getters<T> = { [P in keyof T as `get${Capitalize<string & P>}`]: () => T[P] }; type PersonGetters = Getters<Person>; // Equivale a: { getName: () => string; getAge: () => number; } Exemplo 2: Removendo readonly interface LockedConfig { readonly apiUrl: string; readonly apiKey: string; } type Mutable<T> = { -readonly [P in keyof T]: T[P] }; type UnlockedConfig = Mutable<LockedConfig>; // Equivale a: { apiUrl: string; apiKey: string; } Exemplo 3: Filtrando Chaves interface User { id: number; name: string; email: string; passwordHash: string; } // Filtra chaves cujo valor n\u00e3o \u00e9 do tipo `string` type StringPropertiesOnly<T> = { [K in keyof T as T[K] extends string ? K : never]: T[K] }; type UserStringProps = StringPropertiesOnly<User>; // Equivale a: { name: string; email: string; passwordHash: string; }","title":"Pr\u00e1tica Guiada (Passo a Passo)"},{"location":"Ts/Semana3/#exercicios-praticos-niveis-crescentes_1","text":"N\u00edvel 1: B\u00e1sico Crie um Mapped Type ObjectWithSetters<T> que pega um objeto T e cria um novo tipo onde cada propriedade prop se torna um m\u00e9todo setProp(value: T[prop]): void . Ver Solu\u00e7\u00e3o --- type ObjectWithSetters<T> = { [P in keyof T as `set${Capitalize<string & P>}`]: (value: T[P]) => void; }; // Teste interface Settings { theme: string; fontSize: number; } type SettingsSetters = ObjectWithSetters<Settings>; // Esperado: { setTheme: (value: string) => void; setFontSize: (value: number) => void; } const setters: SettingsSetters = { setTheme: (s) => console.log(s), setFontSize: (n) => console.log(n), }; N\u00edvel 2: Intermedi\u00e1rio Crie um Mapped Type FilterByType<T, U> que pega um tipo T e remove todas as propriedades que n\u00e3o s\u00e3o do tipo U . Ver Solu\u00e7\u00e3o --- type FilterByType<T, U> = { [P in keyof T as T[P] extends U ? P : never]: T[P]; }; // Teste interface MixedBag { name: string; count: number; active: boolean; value: number; } type NumberOnlyBag = FilterByType<MixedBag, number>; // Esperado: { count: number; value: number; } const numbers: NumberOnlyBag = { count: 5, value: 10 }; N\u00edvel 3: Avan\u00e7ado Implemente o FormConfig<T> do plano de estudos. Ele deve pegar um tipo T e gerar um novo tipo onde cada chave K \u00e9 transformada em ${string & K}Config e o valor \u00e9 um objeto de configura\u00e7\u00e3o FieldConfig<T[K]> . Ver Solu\u00e7\u00e3o --- // Tipo auxiliar para a configura\u00e7\u00e3o do campo interface FieldConfig<T> { label: string; type: T extends string ? 'text' : T extends number ? 'number' : 'checkbox'; defaultValue: T; } // O Mapped Type avan\u00e7ado type FormConfig<T> = { [K in keyof T as `${string & K}Config`]: FieldConfig<T[K]>; }; // Teste interface UserForm { name: string; age: number; isAdmin: boolean; } type GeneratedFormConfig = FormConfig<UserForm>; /* Esperado: { nameConfig: FieldConfig<string>; ageConfig: FieldConfig<number>; isAdminConfig: FieldConfig<boolean>; } */ const userFormConfig: GeneratedFormConfig = { nameConfig: { label: 'Nome', type: 'text', defaultValue: '' }, ageConfig: { label: 'Idade', type: 'number', defaultValue: 0 }, isAdminConfig: { label: '\u00c9 Admin?', type: 'checkbox', defaultValue: false }, };","title":"Exerc\u00edcios Pr\u00e1ticos (N\u00edveis Crescentes)"},{"location":"Ts/Semana3/#checklist-do-dia_1","text":"[ ] Criei um mapped type simples. [ ] Usei as para renomear chaves (key remapping). [ ] Combinei mapped types com template literals. [ ] Usei um tipo condicional para filtrar chaves em um mapped type.","title":"Checklist do Dia"},{"location":"Ts/Semana3/#dia-17-service-layer-architecture","text":"","title":"Dia 17: Service Layer Architecture"},{"location":"Ts/Semana3/#foco-do-dia_2","text":"Aplicar os conceitos de classes abstratas e interfaces para projetar uma camada de servi\u00e7o (Service Layer) desacoplada e test\u00e1vel.","title":"Foco do Dia"},{"location":"Ts/Semana3/#leitura-e-teoria-aprofundada_2","text":"Service Layer : Uma camada na arquitetura de uma aplica\u00e7\u00e3o que encapsula a l\u00f3gica de neg\u00f3cio. Ela coordena o trabalho entre a camada de apresenta\u00e7\u00e3o (ex: controllers) e a camada de acesso a dados (ex: repositories). Dependency Injection (DI) : Um padr\u00e3o onde as depend\u00eancias de uma classe (outros objetos que ela precisa para funcionar) s\u00e3o \"injetadas\" de fora (geralmente no construtor), em vez de serem criadas dentro da pr\u00f3pria classe. Isso torna as classes mais desacopladas e f\u00e1ceis de testar, pois voc\u00ea pode injetar \"mocks\" (depend\u00eancias falsas) durante os testes. Interface Segregation Principle : Um dos princ\u00edpios SOLID. Diz que \u00e9 melhor ter muitas interfaces pequenas e espec\u00edficas do que uma \u00fanica interface grande e gen\u00e9rica. Em TypeScript, usamos interface ou type para definir os \"contratos\" que as classes devem seguir.","title":"Leitura e Teoria (Aprofundada)"},{"location":"Ts/Semana3/#documentacao-essencial_2","text":"Interfaces (Handbook)","title":"Documenta\u00e7\u00e3o Essencial"},{"location":"Ts/Semana3/#pratica-guiada-passo-a-passo_2","text":"Exemplo: Injetando um Reposit\u00f3rio em um Servi\u00e7o // Contrato para o reposit\u00f3rio de usu\u00e1rios interface IUserRepository { findById(id: string): Promise<{ id: string, name: string } | null>; } // Servi\u00e7o que depende do reposit\u00f3rio class UserService { // A depend\u00eancia \u00e9 injetada no construtor constructor(private userRepository: IUserRepository) {} async getUserName(id: string): Promise<string> { const user = await this.userRepository.findById(id); if (!user) { return \"Usu\u00e1rio n\u00e3o encontrado\"; } return user.name; } } // Implementa\u00e7\u00e3o real do reposit\u00f3rio class UserRepository implements IUserRepository { async findById(id: string) { return { id, name: \"Lucas da Silva\" }; // Simula\u00e7\u00e3o } } // Implementa\u00e7\u00e3o falsa (mock) para testes class MockUserRepository implements IUserRepository { async findById(id: string) { if (id === '1') return { id: '1', name: 'Mock User' }; return null; } } // Uso em produ\u00e7\u00e3o const realService = new UserService(new UserRepository()); // Uso em testes const testService = new UserService(new MockUserRepository());","title":"Pr\u00e1tica Guiada (Passo a Passo)"},{"location":"Ts/Semana3/#exercicios-praticos-niveis-crescentes_2","text":"N\u00edvel 1: B\u00e1sico Defina uma interface INotifier com um m\u00e9todo notify(message: string): void . Crie uma classe OrderService que recebe um INotifier no construtor. Crie um m\u00e9todo placeOrder() na OrderService que, ap\u00f3s simular a cria\u00e7\u00e3o de um pedido, chama notifier.notify(\"Pedido realizado com sucesso!\") . Ver Solu\u00e7\u00e3o --- interface INotifier { notify(message: string): void; } class EmailNotifier implements INotifier { notify(message: string): void { console.log(`Enviando email: ${message}`); } } class OrderService { constructor(private notifier: INotifier) {} placeOrder(): void { console.log(\"Processando pedido...\"); // L\u00f3gica do pedido... console.log(\"Pedido processado.\"); this.notifier.notify(\"Seu pedido foi realizado com sucesso!\"); } } // Teste const emailNotifier = new EmailNotifier(); const orderService = new OrderService(emailNotifier); orderService.placeOrder(); N\u00edvel 2: Intermedi\u00e1rio Crie uma interface IProductRepository com um m\u00e9todo getProductPrice(productId: number): Promise<number> . Crie uma classe PricingService que depende de IProductRepository . O servi\u00e7o deve ter um m\u00e9todo calculateDiscount(productId: number, discountPercentage: number) que busca o pre\u00e7o do produto e retorna o valor do desconto. Ver Solu\u00e7\u00e3o --- interface IProductRepository { getProductPrice(productId: number): Promise<number>; } // Implementa\u00e7\u00e3o real class ProductRepository implements IProductRepository { async getProductPrice(productId: number): Promise<number> { // Simula busca no banco de dados const prices: Record<number, number> = { 101: 50, 102: 120 }; return prices[productId] || 0; } } class PricingService { constructor(private productRepo: IProductRepository) {} async calculateDiscount(productId: number, discountPercentage: number): Promise<number> { const price = await this.productRepo.getProductPrice(productId); if (price === 0) { console.log(\"Produto n\u00e3o encontrado.\"); return 0; } const discount = price * (discountPercentage / 100); return discount; } } // Teste async function testPricing() { const repo = new ProductRepository(); const service = new PricingService(repo); const discountValue = await service.calculateDiscount(101, 10); // 10% de 50 console.log(`Valor do desconto: R$${discountValue}`); // 5 } testPricing(); N\u00edvel 3: Avan\u00e7ado Recrie e melhore seu GetTableDataService . Defina uma classe abstrata GetTableDataService<TResponse, TParams> com um m\u00e9todo abstrato handle(params: TParams): Promise<TResponse> . Crie uma implementa\u00e7\u00e3o concreta UserTableService que depende de um IUserRepository (com um m\u00e9todo find(params: TParams) ) injetado no construtor. Ver Solu\u00e7\u00e3o --- // Contratos e Tipos interface User { id: number; name: string; status: string; } interface UserFindParams { page: number; filterByStatus?: string; } interface IUserRepository { find(params: UserFindParams): Promise<User[]>; } // Classe Abstrata do Servi\u00e7o abstract class GetTableDataService<TResponse, TParams> { abstract handle(params: TParams): Promise<TResponse>; } // Implementa\u00e7\u00e3o do Reposit\u00f3rio class UserRepository implements IUserRepository { private allUsers: User[] = [ { id: 1, name: 'Alice', status: 'active' }, { id: 2, name: 'Bob', status: 'inactive' }, { id: 3, name: 'Charlie', status: 'active' }, ]; async find(params: UserFindParams): Promise<User[]> { if (params.filterByStatus) { return this.allUsers.filter(u => u.status === params.filterByStatus); } return this.allUsers; } } // Implementa\u00e7\u00e3o Concreta do Servi\u00e7o class UserTableService extends GetTableDataService<User[], UserFindParams> { constructor(private userRepository: IUserRepository) { super(); } handle(params: UserFindParams): Promise<User[]> { console.log(\"Service: buscando dados da tabela de usu\u00e1rios...\"); return this.userRepository.find(params); } } // Teste async function testTableService() { const repo = new UserRepository(); const tableService = new UserTableService(repo); const activeUsers = await tableService.handle({ page: 1, filterByStatus: 'active' }); console.log(\"Usu\u00e1rios ativos:\", activeUsers); } testTableService();","title":"Exerc\u00edcios Pr\u00e1ticos (N\u00edveis Crescentes)"},{"location":"Ts/Semana3/#checklist-do-dia_2","text":"[ ] Entendi o que \u00e9 uma camada de servi\u00e7o. [ ] Usei inje\u00e7\u00e3o de depend\u00eancia para desacoplar uma classe. [ ] Defini um contrato com interface para uma depend\u00eancia. [ ] Implementei um servi\u00e7o que depende de um reposit\u00f3rio.","title":"Checklist do Dia"},{"location":"Ts/Semana3/#dia-18-error-handling-type-safe","text":"","title":"Dia 18: Error Handling Type-Safe"},{"location":"Ts/Semana3/#foco-do-dia_3","text":"Implementar um sistema de tratamento de erros sem usar try/catch em toda parte, utilizando o padr\u00e3o Result (tamb\u00e9m conhecido como Either ) com discriminated unions.","title":"Foco do Dia"},{"location":"Ts/Semana3/#leitura-e-teoria-aprofundada_3","text":"Lan\u00e7ar exce\u00e7\u00f5es \u00e9 \u00fatil, mas pode tornar o fluxo de controle dif\u00edcil de seguir. Uma alternativa comum em programa\u00e7\u00e3o funcional \u00e9 fazer com que as fun\u00e7\u00f5es retornem um tipo que representa tanto o sucesso quanto o fracasso. Result Pattern : Uma fun\u00e7\u00e3o, em vez de retornar um valor T ou lan\u00e7ar um Error , retorna um objeto Result<T, E> . Este objeto \u00e9 uma uni\u00e3o discriminada de dois tipos: Success<T> : Cont\u00e9m o valor de sucesso. Failure<E> : Cont\u00e9m o valor do erro. Isso for\u00e7a quem chama a fun\u00e7\u00e3o a verificar explicitamente se a opera\u00e7\u00e3o foi bem-sucedida ou n\u00e3o, tornando o c\u00f3digo mais previs\u00edvel e seguro.","title":"Leitura e Teoria (Aprofundada)"},{"location":"Ts/Semana3/#documentacao-essencial_3","text":"Discriminated Unions (Revis\u00e3o)","title":"Documenta\u00e7\u00e3o Essencial"},{"location":"Ts/Semana3/#pratica-guiada-passo-a-passo_3","text":"Exemplo: Definindo e usando o tipo Result // 1. Definir os tipos Success, Failure e Result type Success<T> = { success: true; value: T }; type Failure<E> = { success: false; error: E }; type Result<T, E> = Success<T> | Failure<E>; // 2. Criar uma fun\u00e7\u00e3o que retorna um Result function safeDivide(a: number, b: number): Result<number, string> { if (b === 0) { return { success: false, error: \"Divis\u00e3o por zero!\" }; } return { success: true, value: a / b }; } // 3. Consumir a fun\u00e7\u00e3o de forma segura const result = safeDivide(10, 2); if (result.success) { // O TS sabe que `result` \u00e9 Success<number> aqui console.log(\"Resultado:\", result.value); } else { // O TS sabe que `result` \u00e9 Failure<string> aqui console.error(\"Erro:\", result.error); }","title":"Pr\u00e1tica Guiada (Passo a Passo)"},{"location":"Ts/Semana3/#exercicios-praticos-niveis-crescentes_3","text":"N\u00edvel 1: B\u00e1sico Crie uma fun\u00e7\u00e3o parseNumber(s: string): Result<number, string> que tenta converter uma string para um n\u00famero. Se isNaN(result) for verdadeiro, retorne um Failure . Caso contr\u00e1rio, retorne um Success . Ver Solu\u00e7\u00e3o --- type Success<T> = { success: true; value: T }; type Failure<E> = { success: false; error: E }; type Result<T, E> = Success<T> | Failure<E>; function parseNumber(s: string): Result<number, string> { const num = Number(s); if (isNaN(num)) { return { success: false, error: `\\'${s}\\' n\u00e3o \u00e9 um n\u00famero v\u00e1lido.` }; } return { success: true, value: num }; } // Teste const res1 = parseNumber(\"123\"); if (res1.success) console.log(res1.value); const res2 = parseNumber(\"abc\"); if (!res2.success) console.error(res2.error); N\u00edvel 2: Intermedi\u00e1rio Crie uma classe Result com m\u00e9todos est\u00e1ticos ok<T>(value: T) e fail<E>(error: E) para facilitar a cria\u00e7\u00e3o. Refatore o exerc\u00edcio anterior para usar Result.ok(...) e Result.fail(...) . Ver Solu\u00e7\u00e3o --- // Tipos auxiliares class Success<T> { readonly value: T; readonly success = true; constructor(value: T) { this.value = value; } } class Failure<E> { readonly error: E; readonly success = false; constructor(error: E) { this.error = error; } } // A classe Result com m\u00e9todos est\u00e1ticos class Result<T, E> { static ok<T, E>(value: T): Result<T, E> { return new Success(value); } static fail<T, E>(error: E): Result<T, E> { return new Failure(error); } } function parseNumber(s: string): Success<number> | Failure<string> { const num = Number(s); if (isNaN(num)) { return new Failure(`\\'${s}\\' n\u00e3o \u00e9 um n\u00famero v\u00e1lido.`); } return new Success(num); } // Teste const res = parseNumber(\"456\"); if (res.success) { console.log(\"Valor parseado:\", res.value); } N\u00edvel 3: Avan\u00e7ado Crie uma fun\u00e7\u00e3o fetchUserProfile(userId: string): Promise<Result<User, Error>> . Esta fun\u00e7\u00e3o deve simular uma chamada de API. Se o userId for '1' , retorne um Success com um objeto User . Se for qualquer outro valor, retorne um Failure com um new Error(\"Usu\u00e1rio n\u00e3o encontrado\") . Ver Solu\u00e7\u00e3o --- // Reutilizando os tipos do N\u00edvel 1 type Success<T> = { success: true; value: T }; type Failure<E> = { success: false; error: E }; type Result<T, E> = Success<T> | Failure<E>; interface User { id: string; name: string; } async function fetchUserProfile(userId: string): Promise<Result<User, Error>> { console.log(`Buscando perfil para o usu\u00e1rio ${userId}...`); // Simula\u00e7\u00e3o de chamada de API if (userId === '1') { const user: User = { id: '1', name: 'Admin User' }; return { success: true, value: user }; } return { success: false, error: new Error(\"Usu\u00e1rio n\u00e3o encontrado\") }; } // Teste async function testFetch() { const result1 = await fetchUserProfile('1'); if (result1.success) { console.log(\"Bem-vindo,\", result1.value.name); } else { console.error(result1.error.message); } const result2 = await fetchUserProfile('2'); if (result2.success) { console.log(\"Bem-vindo,\", result2.value.name); } else { console.error(result2.error.message); } } testFetch();","title":"Exerc\u00edcios Pr\u00e1ticos (N\u00edveis Crescentes)"},{"location":"Ts/Semana3/#checklist-do-dia_3","text":"[ ] Entendi o Result Pattern e suas vantagens. [ ] Criei um tipo Result usando discriminated unions. [ ] Implementei uma fun\u00e7\u00e3o que retorna Success ou Failure . [ ] Consumi uma fun\u00e7\u00e3o que retorna Result de forma type-safe.","title":"Checklist do Dia"},{"location":"Ts/Semana3/#dia-19-advanced-record-patterns","text":"","title":"Dia 19: Advanced Record Patterns"},{"location":"Ts/Semana3/#foco-do-dia_4","text":"Explorar usos avan\u00e7ados do tipo Record<K, V> , combinando-o com const assertions para imutabilidade e template literal types para criar dicion\u00e1rios mais seguros e expressivos.","title":"Foco do Dia"},{"location":"Ts/Semana3/#leitura-e-teoria-aprofundada_4","text":"Record<Keys, Type> : Cria um tipo de objeto com um conjunto espec\u00edfico de chaves ( Keys ) e um tipo de valor ( Type ). const Assertions ( as const ) : Quando usado em um objeto literal, diz ao TypeScript para tratar o objeto como profundamente readonly . As propriedades se tornam readonly e os literais (strings, n\u00fameros) se tornam tipos literais, n\u00e3o tipos gerais ( 'myString' se torna tipo 'myString' , n\u00e3o string ). Combina\u00e7\u00e3o : Usar Record para definir a estrutura e as const para garantir imutabilidade e tipos literais precisos \u00e9 um padr\u00e3o poderoso para configura\u00e7\u00f5es, dicion\u00e1rios de tradu\u00e7\u00e3o, etc.","title":"Leitura e Teoria (Aprofundada)"},{"location":"Ts/Semana3/#documentacao-essencial_4","text":"Utility Types (Revis\u00e3o) Const Assertions (Handbook)","title":"Documenta\u00e7\u00e3o Essencial"},{"location":"Ts/Semana3/#pratica-guiada-passo-a-passo_4","text":"Exemplo: Dicion\u00e1rio de Configura\u00e7\u00e3o com as const const AppConfig = { API_URL: \"/api\", TIMEOUT: 5000, THEME: \"dark\", } as const; // AppConfig.API_URL = \"/api/v2\"; // Erro: Cannot assign to 'API_URL' because it is a read-only property. // O tipo de THEME \u00e9 'dark', n\u00e3o string! type Theme = typeof AppConfig[\"THEME\"]; // 'dark' Exemplo: Record com Template Literals type IconName = 'user' | 'cart' | 'home'; type IconPath = `/icons/${IconName}.svg`; const iconMap: Record<IconName, IconPath> = { user: '/icons/user.svg', cart: '/icons/cart.svg', home: '/icons/home.svg', };","title":"Pr\u00e1tica Guiada (Passo a Passo)"},{"location":"Ts/Semana3/#exercicios-praticos-niveis-crescentes_4","text":"N\u00edvel 1: B\u00e1sico Crie um objeto HttpStatusCodes que mapeia nomes de status ( OK , NOT_FOUND , SERVER_ERROR ) para seus c\u00f3digos num\u00e9ricos (200, 404, 500). Use as const para garantir que os valores n\u00e3o possam ser alterados. Ver Solu\u00e7\u00e3o --- const HttpStatusCodes = { OK: 200, NOT_FOUND: 404, SERVER_ERROR: 500, } as const; // Teste console.log(HttpStatusCodes.OK); // 200 // HttpStatusCodes.OK = 201; // Erro: Cannot assign to 'OK' because it is a read-only property. // O tipo de HttpStatusCodes.OK \u00e9 200, n\u00e3o number. type OkStatus = typeof HttpStatusCodes.OK; // 200 N\u00edvel 2: Intermedi\u00e1rio Crie um tipo UserAction ( 'create' | 'edit' | 'delete' ). Crie um objeto actionPermissions que mapeia cada UserAction para um n\u00edvel de permiss\u00e3o ( 'admin' | 'editor' | 'guest' ). Use Record para garantir que todas as a\u00e7\u00f5es sejam mapeadas. Ver Solu\u00e7\u00e3o --- type UserAction = 'create' | 'edit' | 'delete'; type PermissionLevel = 'admin' | 'editor' | 'guest'; const actionPermissions: Record<UserAction, PermissionLevel> = { create: 'admin', edit: 'editor', delete: 'admin', }; // Teste function checkPermission(action: UserAction) { console.log(`A\u00e7\u00e3o '${action}' requer n\u00edvel '${actionPermissions[action]}'.`); } checkPermission('edit'); // const p: Record<UserAction, PermissionLevel> = { create: 'admin' }; // Erro: Faltam 'edit' e 'delete' N\u00edvel 3: Avan\u00e7ado Implemente o tooltipContent do plano de estudos. Crie um enum ColumnType . Crie um tipo DictionaryPath usando template literals. Crie o objeto tooltipContent usando Record para o mapeamento e as const para imutabilidade total. Ver Solu\u00e7\u00e3o --- enum ColumnType { YIELD = 'yield', PRICE = 'price', } type DictionaryPath = `min_fare.table.tooltips.${string}`; // O tipo garante que todas as chaves de ColumnType existam e que os valores sigam o padr\u00e3o. const tooltipContent: Record<ColumnType, DictionaryPath> = { [ColumnType.YIELD]: 'min_fare.table.tooltips.yield', [ColumnType.PRICE]: 'min_fare.table.tooltips.price', }; // Adicionando `as const` para imutabilidade e tipos literais precisos const immutableTooltipContent = { [ColumnType.YIELD]: 'min_fare.table.tooltips.yield', [ColumnType.PRICE]: 'min_fare.table.tooltips.price', } as const; // immutableTooltipContent.yield = '...'; // Erro: readonly // O tipo do valor \u00e9 literal, n\u00e3o string type YieldTooltipPath = typeof immutableTooltipContent[ColumnType.YIELD];","title":"Exerc\u00edcios Pr\u00e1ticos (N\u00edveis Crescentes)"},{"location":"Ts/Semana3/#checklist-do-dia_4","text":"[ ] Usei as const para criar um objeto imut\u00e1vel. [ ] Entendi como as const afeta a infer\u00eancia de tipo. [ ] Combinei Record com enum para criar um dicion\u00e1rio seguro. [ ] Combinei Record , template literals e as const .","title":"Checklist do Dia"},{"location":"Ts/Semana3/#dia-20-utility-types-avancados","text":"","title":"Dia 20: Utility Types Avan\u00e7ados"},{"location":"Ts/Semana3/#foco-do-dia_5","text":"Dominar os utility types que operam sobre fun\u00e7\u00f5es: Parameters , ReturnType , ConstructorParameters , e InstanceType .","title":"Foco do Dia"},{"location":"Ts/Semana3/#leitura-e-teoria-aprofundada_5","text":"Estes tipos permitem extrair \"partes\" de tipos de fun\u00e7\u00e3o, o que \u00e9 extremamente \u00fatil para metaprograma\u00e7\u00e3o e para manter a consist\u00eancia de tipos sem repeti\u00e7\u00e3o. Parameters<T> : Extrai os tipos dos par\u00e2metros de uma fun\u00e7\u00e3o T como uma tupla. ReturnType<T> : Extrai o tipo de retorno de uma fun\u00e7\u00e3o T . ConstructorParameters<T> : Extrai os tipos dos par\u00e2metros do construtor de uma classe T como uma tupla. InstanceType<T> : Extrai o tipo da inst\u00e2ncia de uma classe T .","title":"Leitura e Teoria (Aprofundada)"},{"location":"Ts/Semana3/#documentacao-essencial_5","text":"Advanced Utility Types (Handbook)","title":"Documenta\u00e7\u00e3o Essencial"},{"location":"Ts/Semana3/#pratica-guiada-passo-a-passo_5","text":"Exemplo 1: Parameters e ReturnType function greet(name: string, age: number): string { return `Hello ${name}, you are ${age} years old.`; } type GreetParams = Parameters<typeof greet>; // [string, number] type GreetReturn = ReturnType<typeof greet>; // string Exemplo 2: ConstructorParameters e InstanceType class Person { constructor(public name: string, public age: number) {} } type PersonConstructorParams = ConstructorParameters<typeof Person>; // [string, number] type PersonInstance = InstanceType<typeof Person>; // Person","title":"Pr\u00e1tica Guiada (Passo a Passo)"},{"location":"Ts/Semana3/#exercicios-praticos-niveis-crescentes_5","text":"N\u00edvel 1: B\u00e1sico Crie uma fun\u00e7\u00e3o log(message: string, level: 'info' | 'warn' | 'error') . Use Parameters<T> para criar um tipo LogParams que represente os par\u00e2metros da fun\u00e7\u00e3o log . Ver Solu\u00e7\u00e3o --- function log(message: string, level: 'info' | 'warn' | 'error'): void { console.log(`[${level.toUpperCase()}] ${message}`); } type LogParams = Parameters<typeof log>; // [string, 'info' | 'warn' | 'error'] // Teste const params: LogParams = [\"Usu\u00e1rio logado com sucesso\", \"info\"]; log(...params); N\u00edvel 2: Intermedi\u00e1rio Crie uma fun\u00e7\u00e3o fetchData(): Promise<{ data: string[] }> que simula uma chamada de API. Use ReturnType<T> para extrair o tipo de retorno. Em seguida, use Awaited<T> (um tipo nativo) para extrair o tipo resolvido da Promise. Ver Solu\u00e7\u00e3o --- async function fetchData(): Promise<{ data: string[] }> { return { data: ['a', 'b', 'c'] }; } // O tipo de retorno da fun\u00e7\u00e3o em si type FetchDataReturn = ReturnType<typeof fetchData>; // Promise<{ data: string[] }> // O tipo que a Promise resolve type FetchedData = Awaited<FetchDataReturn>; // { data: string[] } // Teste async function processData() { const data: FetchedData = await fetchData(); console.log(data.data.join(', ')); } processData(); N\u00edvel 3: Avan\u00e7ado Implemente o ServiceFactory<T> do plano de estudos. Deve ser um tipo que representa um objeto com um m\u00e9todo create . Este m\u00e9todo create deve aceitar os mesmos par\u00e2metros que o construtor da classe T e retornar uma inst\u00e2ncia de T . Ver Solu\u00e7\u00e3o --- // O tipo gen\u00e9rico da f\u00e1brica type ServiceFactory<T extends new (...args: any[]) => any> = { create(...args: ConstructorParameters<T>): InstanceType<T>; }; // Classe de exemplo class ProductService { constructor(private apiVersion: string) { console.log(`ProductService inicializado com API v${apiVersion}`); } getProducts() { /* ... */ } } // Implementa\u00e7\u00e3o da f\u00e1brica const ProductServiceFactory: ServiceFactory<typeof ProductService> = { create(...args) { return new ProductService(...args); }, }; // Teste const productServiceInstance = ProductServiceFactory.create(\"2.0\"); console.log(productServiceInstance instanceof ProductService); // true","title":"Exerc\u00edcios Pr\u00e1ticos (N\u00edveis Crescentes)"},{"location":"Ts/Semana3/#checklist-do-dia_5","text":"[ ] Usei Parameters para extrair os tipos dos par\u00e2metros de uma fun\u00e7\u00e3o. [ ] Usei ReturnType para extrair o tipo de retorno. [ ] Usei ConstructorParameters e InstanceType em uma classe. [ ] Criei um tipo de f\u00e1brica gen\u00e9rico usando utility types de fun\u00e7\u00e3o.","title":"Checklist do Dia"},{"location":"Ts/Semana3/#dia-21-projeto-mini-3-http-client-type-safe","text":"","title":"Dia 21: Projeto Mini #3 - HTTP Client Type-Safe"},{"location":"Ts/Semana3/#foco-do-dia_6","text":"Consolidar os conceitos da semana (Function Overloading, Mapped Types, Service Layer, Result Pattern) para construir um cliente HTTP type-safe.","title":"Foco do Dia"},{"location":"Ts/Semana3/#leitura-e-teoria-revisao","text":"Function Overloading : Para criar m\u00e9todos como client.get(...) que podem ter assinaturas diferentes. Result Pattern : Para tratar erros de rede (ex: 404, 500) de forma expl\u00edcita. Generics : Para tipar a resposta esperada da API ( TResponse ). Record Patterns : Para configurar headers e par\u00e2metros.","title":"Leitura e Teoria (Revis\u00e3o)"},{"location":"Ts/Semana3/#exercicios-praticos-niveis-crescentes_6","text":"N\u00edvel 1: B\u00e1sico Crie uma classe HttpClient com um \u00fanico m\u00e9todo get<T>(url: string): Promise<T> . Este m\u00e9todo deve simular uma chamada de rede e retornar um objeto T . N\u00e3o se preocupe com erros ainda. Ver Solu\u00e7\u00e3o --- class HttpClient { async get<T>(url: string): Promise<T> { console.log(`Fazendo GET para: ${url}`); // Simula\u00e7\u00e3o const response = { data: { id: 1, name: \"Item Falso\" } }; return response as T; } } // Teste interface UserResponse { data: { id: number; name: string; } } async function testClient() { const client = new HttpClient(); const response = await client.get<UserResponse>(\"/api/users/1\"); console.log(response.data.name); } testClient(); N\u00edvel 2: Intermedi\u00e1rio Melhore o HttpClient do N\u00edvel 1 para usar o Result pattern. O m\u00e9todo get<T>(url: string) deve agora retornar Promise<Result<T, Error>> . Se a URL contiver a palavra 'fail' , simule um erro e retorne um Failure . Caso contr\u00e1rio, retorne um Success . Ver Solu\u00e7\u00e3o --- // Reutilizando o tipo Result type Success<T> = { success: true; value: T }; type Failure<E> = { success: false; error: E }; type Result<T, E> = Success<T> | Failure<E>; class HttpClient { async get<T>(url: string): Promise<Result<T, Error>> { console.log(`Fazendo GET para: ${url}`); // Simula\u00e7\u00e3o de erro if (url.includes('fail')) { return { success: false, error: new Error(\"Erro de Rede 404\") }; } // Simula\u00e7\u00e3o de sucesso const response = { data: { id: 1, name: \"Item Falso\" } }; return { success: true, value: response as T }; } } // Teste interface UserResponse { data: { id: number; name: string; } } async function testClient() { const client = new HttpClient(); const successResult = await client.get<UserResponse>(\"/api/users/1\"); if (successResult.success) { console.log(\"Sucesso:\", successResult.value.data.name); } const errorResult = await client.get<UserResponse>(\"/api/fail/users/1\"); if (!errorResult.success) { console.error(\"Erro:\", errorResult.error.message); } } testClient(); N\u00edvel 3: Avan\u00e7ado Adicione sobrecarga de fun\u00e7\u00e3o ao HttpClient . Crie um m\u00e9todo request com duas sobrecargas: 1. request<T>(method: 'GET', url: string): Promise<Result<T, Error>> 2. request<T>(method: 'POST', url: string, body: any): Promise<Result<T, Error>> Implemente a l\u00f3gica na assinatura de implementa\u00e7\u00e3o para lidar com ambos os casos. Ver Solu\u00e7\u00e3o --- // Reutilizando o tipo Result type Success<T> = { success: true; value: T }; type Failure<E> = { success: false; error: E }; type Result<T, E> = Success<T> | Failure<E>; class HttpClient { // Sobrecarga para GET request<T>(method: 'GET', url: string): Promise<Result<T, Error>>; // Sobrecarga para POST request<T>(method: 'POST', url: string, body: any): Promise<Result<T, Error>>; // Implementa\u00e7\u00e3o async request< T >( method: 'GET' | 'POST', url: string, body?: any ): Promise<Result<T, Error>> { console.log(`Fazendo ${method} para: ${url}`); if (method === 'POST') { console.log(\"Corpo da requisi\u00e7\u00e3o:\", body); } // Simula\u00e7\u00e3o de erro if (url.includes('fail')) { return { success: false, error: new Error(`Erro de Rede ${method === 'GET' ? 404 : 500}`) }; } // Simula\u00e7\u00e3o de sucesso const response = { data: { id: 1, name: \"Item Falso\" } }; return { success: true, value: response as T }; } } // Teste interface UserResponse { data: { id: number; name: string; } } async function testClient() { const client = new HttpClient(); const getResult = await client.request<UserResponse>('GET', \"/api/users/1\"); if (getResult.success) console.log(\"GET Sucesso:\", getResult.value.data.name); const postResult = await client.request<UserResponse>('POST', \"/api/users\", { name: 'Novo Usu\u00e1rio' }); if (postResult.success) console.log(\"POST Sucesso:\", postResult.value.data.name); } testClient();","title":"Exerc\u00edcios Pr\u00e1ticos (N\u00edveis Crescentes)"},{"location":"Ts/Semana3/#checklist-do-dia_6","text":"[ ] Usei sobrecarga de fun\u00e7\u00e3o para um m\u00e9todo de cliente HTTP. [ ] Integrei o Result Pattern no tratamento de erros de rede. [ ] Usei generics para tipar a resposta da API. [ ] Combinei m\u00faltiplos conceitos da semana em um \u00fanico projeto.","title":"Checklist do Dia"},{"location":"Ts/Semana4/","text":"Semana 4: Integra\u00e7\u00e3o e Refinamento Vis\u00e3o Geral da Semana Na \u00faltima semana, nosso foco \u00e9 a aplica\u00e7\u00e3o pr\u00e1tica e a integra\u00e7\u00e3o do TypeScript em ecossistemas do mundo real. Vamos aprender a integrar com bibliotecas externas como o React Hook Form, gerenciar estado de forma segura, organizar nosso c\u00f3digo com m\u00f3dulos e path mapping, e escrever testes que tamb\u00e9m validam nossos tipos. Finalizaremos com uma olhada em otimiza\u00e7\u00e3o de performance e padr\u00f5es de design avan\u00e7ados, culminando em um projeto final que une todo o conhecimento adquirido. Dia 22: Form Integration (React Hook Form) Foco do Dia Integrar TypeScript com bibliotecas externas, usando o React Hook Form como exemplo, e aprender a usar Module Augmentation para estender tipos de bibliotecas de terceiros. Leitura e Teoria (Aprofundada) Integra\u00e7\u00e3o com Bibliotecas : Muitas bibliotecas populares (React, Vue, etc.) s\u00e3o escritas em TypeScript ou fornecem seus pr\u00f3prios arquivos de declara\u00e7\u00e3o de tipo ( .d.ts ). Isso nos permite usar a biblioteca de forma type-safe. Tipos Utilit\u00e1rios de Bibliotecas : Bibliotecas como React Hook Form exportam seus pr\u00f3prios tipos utilit\u00e1rios (ex: Control , FieldErrors , UseFormSetValue ) que s\u00e3o gen\u00e9ricos e devem ser usados com os tipos do nosso formul\u00e1rio. Module Augmentation : Permite que voc\u00ea \"adicione\" declara\u00e7\u00f5es a um m\u00f3dulo existente. \u00c9 \u00fatil para estender interfaces de bibliotecas de terceiros para adicionar propriedades customizadas sem precisar criar um fork da biblioteca. Documenta\u00e7\u00e3o Essencial TypeScript com React (React Docs) TypeScript com React Hook Form (RHF Docs) Module Augmentation (Handbook) Pr\u00e1tica Guiada (Passo a Passo) Exemplo: Tipando um Formul\u00e1rio Simples com React Hook Form import { useForm, Control, FieldErrors, UseFormSetValue } from 'react-hook-form'; // 1. Definir o tipo dos valores do formul\u00e1rio interface MyFormValues { firstName: string; age: number; } // 2. Usar o tipo com o hook `useForm` function MyForm() { const { control, formState: { errors }, setValue } = useForm<MyFormValues>(); // O tipo de `control` \u00e9 Control<MyFormValues> // O tipo de `errors` \u00e9 FieldErrors<MyFormValues> // O tipo de `setValue` \u00e9 UseFormSetValue<MyFormValues> // ... resto do componente JSX } Exemplo: Recriando seu tipo RenderMinFareForm import { Control, FieldErrors, UseFormSetValue, UseFormClearErrors } from 'react-hook-form'; // O tipo que define os valores do seu formul\u00e1rio interface MinFareFormValue { yield: number; price: number; } // O tipo que agrupa todos os props necess\u00e1rios para renderizar o form export type RenderMinFareForm = { control: Control<MinFareFormValue>; errors: FieldErrors<MinFareFormValue>; setValue: UseFormSetValue<MinFareFormValue>; clearErrors: UseFormClearErrors<MinFareFormValue>; }; Exerc\u00edcios Pr\u00e1ticos (N\u00edveis Crescentes) N\u00edvel 1: B\u00e1sico Defina um tipo para um formul\u00e1rio de login, LoginFormValues , que cont\u00e9m email (string) e password (string). Em seguida, crie um tipo LoginProps que represente as propriedades que um componente de formul\u00e1rio de login receberia, incluindo onSubmit que \u00e9 uma fun\u00e7\u00e3o que recebe os LoginFormValues . Ver Solu\u00e7\u00e3o --- interface LoginFormValues { email: string; password: string; } type LoginProps = { onSubmit: (data: LoginFormValues) => void; }; // Exemplo de uso em um componente (simulado) function LoginForm(props: LoginProps) { // const { handleSubmit } = useForm<LoginFormValues>(); // return <form onSubmit={handleSubmit(props.onSubmit)}>...</form> console.log(\"Componente de formul\u00e1rio de login renderizado.\"); } N\u00edvel 2: Intermedi\u00e1rio Crie um tipo ProfileFormValues com name (string) e bio (string, opcional). Crie um tipo ProfileFormProps que agrupa as propriedades control e errors do React Hook Form, devidamente tipadas com ProfileFormValues . Ver Solu\u00e7\u00e3o --- import { Control, FieldErrors } from 'react-hook-form'; interface ProfileFormValues { name: string; bio?: string; } type ProfileFormProps = { control: Control<ProfileFormValues>; errors: FieldErrors<ProfileFormValues>; }; // Simula\u00e7\u00e3o de um componente que recebe esses props function ProfileFormComponent(props: ProfileFormProps) { // <Controller name=\"name\" control={props.control} ... /> // {props.errors.name && <p>Erro no nome</p>} console.log(\"Componente de perfil renderizado.\"); } N\u00edvel 3: Avan\u00e7ado Usando Module Augmentation , estenda a interface DefaultTheme de uma biblioteca de estiliza\u00e7\u00e3o (ex: styled-components ). Adicione uma propriedade customColors que \u00e9 um objeto com chaves primary e secondary . Ver Solu\u00e7\u00e3o --- // Em um arquivo, ex: styled.d.ts // 1. Importe o tipo original da biblioteca import 'styled-components'; // 2. Declare o m\u00f3dulo novamente para estend\u00ea-lo declare module 'styled-components' { // 3. Estenda a interface DefaultTheme export interface DefaultTheme { customColors: { primary: string; secondary: string; background: string; }; } } // Em outro arquivo, ex: theme.ts import { DefaultTheme } from 'styled-components'; const myTheme: DefaultTheme = { // Agora o TS espera a propriedade customColors customColors: { primary: '#007bff', secondary: '#6c757d', background: '#f8f9fa', }, }; Checklist do Dia [ ] Entendi como usar tipos gen\u00e9ricos de bibliotecas externas. [ ] Criei um tipo para os valores de um formul\u00e1rio. [ ] Agrupei os props de um formul\u00e1rio em um \u00fanico tipo. [ ] Usei Module Augmentation para estender uma interface de biblioteca. Dia 23: State Management Type-Safe Foco do Dia Projetar um sistema de gerenciamento de estado (como Redux ou Zustand) de forma totalmente type-safe, com foco em action creators e selectors tipados. Leitura e Teoria (Aprofundada) Store : Um objeto \u00fanico que cont\u00e9m todo o estado da aplica\u00e7\u00e3o. Actions : Objetos que descrevem uma inten\u00e7\u00e3o de mudar o estado. Geralmente t\u00eam uma propriedade type (uma string literal) e um payload opcional. Reducers : Fun\u00e7\u00f5es puras que recebem o estado atual e uma a\u00e7\u00e3o, e retornam o novo estado. (currentState, action) => newState . Action Creators : Fun\u00e7\u00f5es que criam e retornam objetos de a\u00e7\u00e3o. Ajuda a evitar erros de digita\u00e7\u00e3o no type da a\u00e7\u00e3o. Selectors : Fun\u00e7\u00f5es que extraem e computam dados derivados do estado do store. Memoiza\u00e7\u00e3o (como na biblioteca reselect ) \u00e9 frequentemente usada para performance. Documenta\u00e7\u00e3o Essencial Static Typing com Redux (Redux Docs) Pr\u00e1tica Guiada (Passo a Passo) Exemplo: Tipando A\u00e7\u00f5es e Reducer do Redux // 1. Definir o tipo do estado interface CounterState { value: number; } // 2. Definir os tipos das a\u00e7\u00f5es const INCREMENT = 'counter/increment'; const ADD = 'counter/add'; interface IncrementAction { type: typeof INCREMENT; } interface AddAction { type: typeof ADD; payload: number; } type CounterAction = IncrementAction | AddAction; // 3. Criar o reducer const initialState: CounterState = { value: 0 }; function counterReducer(state = initialState, action: CounterAction): CounterState { switch (action.type) { case INCREMENT: return { ...state, value: state.value + 1 }; case ADD: // O TS sabe que `action` tem `payload` aqui return { ...state, value: state.value + action.payload }; default: return state; } } Exerc\u00edcios Pr\u00e1ticos (N\u00edveis Crescentes) N\u00edvel 1: B\u00e1sico Crie os action creators para as a\u00e7\u00f5es IncrementAction e AddAction do exemplo guiado. As fun\u00e7\u00f5es devem retornar os objetos de a\u00e7\u00e3o devidamente tipados. Ver Solu\u00e7\u00e3o --- // Tipos do exemplo anterior... const INCREMENT = 'counter/increment'; const ADD = 'counter/add'; interface IncrementAction { type: typeof INCREMENT; } interface AddAction { type: typeof ADD; payload: number; } // Action Creators function increment(): IncrementAction { return { type: INCREMENT }; } function add(amount: number): AddAction { return { type: ADD, payload: amount }; } // Teste const incrementAction = increment(); // tipo IncrementAction const addAction = add(5); // tipo AddAction console.log(incrementAction); console.log(addAction); N\u00edvel 2: Intermedi\u00e1rio Defina um estado para uma lista de tarefas ( todos ). Crie os tipos de a\u00e7\u00e3o e o reducer para adicionar uma nova tarefa ( ADD_TODO ) e marcar uma tarefa como completa ( TOGGLE_TODO ). Ver Solu\u00e7\u00e3o --- // 1. Tipos de Estado interface Todo { id: number; text: string; completed: boolean; } interface TodosState { todos: Todo[]; } // 2. Tipos de A\u00e7\u00e3o const ADD_TODO = 'todos/add'; const TOGGLE_TODO = 'todos/toggle'; interface AddTodoAction { type: typeof ADD_TODO; payload: { text: string } } interface ToggleTodoAction { type: typeof TOGGLE_TODO; payload: { id: number } } type TodoAction = AddTodoAction | ToggleTodoAction; // 3. Reducer const initialTodosState: TodosState = { todos: [] }; let nextTodoId = 0; function todosReducer(state = initialTodosState, action: TodoAction): TodosState { switch (action.type) { case ADD_TODO: return { ...state, todos: [...state.todos, { id: nextTodoId++, text: action.payload.text, completed: false }] }; case TOGGLE_TODO: return { ...state, todos: state.todos.map(todo => todo.id === action.payload.id ? { ...todo, completed: !todo.completed } : todo ) }; default: return state; } } N\u00edvel 3: Avan\u00e7ado Crie um seletor tipado selectCompletedTodos que recebe o estado completo da aplica\u00e7\u00e3o (que cont\u00e9m todosState ) e retorna apenas a lista de tarefas completas. Ver Solu\u00e7\u00e3o --- // Reutilizando os tipos do N\u00edvel 2 interface Todo { id: number; text: string; completed: boolean; } interface TodosState { todos: Todo[]; } // Estado global da aplica\u00e7\u00e3o interface AppState { todosState: TodosState; // ... outros estados } // O seletor function selectCompletedTodos(state: AppState): Todo[] { return state.todosState.todos.filter(todo => todo.completed); } // Teste const testState: AppState = { todosState: { todos: [ { id: 0, text: 'Aprender TS', completed: true }, { id: 1, text: 'Dominar o mundo', completed: false }, { id: 2, text: 'Tomar caf\u00e9', completed: true }, ] } }; const completed = selectCompletedTodos(testState); console.log(completed); Checklist do Dia [ ] Defini o tipo para uma fatia (slice) do estado. [ ] Criei tipos de a\u00e7\u00e3o usando discriminated unions. [ ] Implementei um reducer type-safe. [ ] Criei action creators e seletores tipados. Dia 24: Module System e Path Mapping Foco do Dia Organizar a arquitetura de c\u00f3digo usando o sistema de m\u00f3dulos do TypeScript, incluindo barrel exports e path mapping para imports mais limpos. Leitura e Teoria (Aprofundada) M\u00f3dulos : Cada arquivo em TypeScript \u00e9 um m\u00f3dulo. export torna vari\u00e1veis, fun\u00e7\u00f5es e classes dispon\u00edveis para outros m\u00f3dulos. import as consome. Barrel Exports : Um arquivo, geralmente chamado index.ts , que re-exporta todos os exports de um diret\u00f3rio. Isso permite que os consumidores importem tudo de um \u00fanico local, em vez de m\u00faltiplos caminhos. import { ServiceA, ServiceB } from './services'; em vez de ... from './services/ServiceA' e ... from './services/ServiceB' . Path Mapping : Uma feature do tsconfig.json que permite criar aliases para caminhos de importa\u00e7\u00e3o. Isso evita imports relativos longos como ../../../../components e os substitui por aliases como @components . Documenta\u00e7\u00e3o Essencial Modules (Handbook) Path mapping (tsconfig Reference) Pr\u00e1tica Guiada (Passo a Passo) Exemplo 1: Barrel Exports // Em src/utils/stringUtils.ts export const capitalize = (s: string) => s.charAt(0).toUpperCase() + s.slice(1); // Em src/utils/numberUtils.ts export const isEven = (n: number) => n % 2 === 0; // Em src/utils/index.ts (o \"barrel\") export * from './stringUtils'; export * from './numberUtils'; // Em outro arquivo import { capitalize, isEven } from '../utils'; // Importa de um \u00fanico lugar Exemplo 2: Configurando Path Mapping No tsconfig.json : { \"compilerOptions\": { \"baseUrl\": \"./src\", // Essencial para o path mapping \"paths\": { \"@components/*\": [\"components/*\"], \"@services/*\": [\"services/*\"], \"@domain/*\": [\"domain/*\"] } } } Uso no c\u00f3digo: // Em vez de: import { User } from '../../domain/models/User'; import { User } from '@domain/models/User'; // Em vez de: import { Button } from '../components/Button'; import { Button } from '@components/Button'; Exerc\u00edcios Pr\u00e1ticos (N\u00edveis Crescentes) N\u00edvel 1: B\u00e1sico Crie uma estrutura de pastas domain/errors . Dentro, crie dois arquivos: UnexpectedError.ts e NotFoundError.ts , cada um exportando uma classe de erro. Crie um arquivo index.ts em domain/errors que exporta ambas as classes. Ver Solu\u00e7\u00e3o --- // Em domain/errors/UnexpectedError.ts export class UnexpectedError extends Error { constructor() { super('Um erro inesperado aconteceu.'); this.name = 'UnexpectedError'; } } // Em domain/errors/NotFoundError.ts export class NotFoundError extends Error { constructor() { super('Recurso n\u00e3o encontrado.'); this.name = 'NotFoundError'; } } // Em domain/errors/index.ts export * from './UnexpectedError'; export * from './NotFoundError'; // Em outro arquivo (ex: app.ts) // import { UnexpectedError, NotFoundError } from './domain/errors'; N\u00edvel 2: Intermedi\u00e1rio Configure o path mapping no seu tsconfig.json para criar um alias @/ que aponte para o diret\u00f3rio src/ . Refatore um import que usa um caminho relativo (ex: ../utils ) para usar o novo alias ( @/utils ). Ver Solu\u00e7\u00e3o --- No `tsconfig.json`: { \"compilerOptions\": { \"baseUrl\": \".\", // ou \"./src\" \"paths\": { \"@/*\": [\"src/*\"] } } } No c\u00f3digo: // Antes: // import { capitalize } from '../../utils/stringUtils'; // Depois: // import { capitalize } from '@/utils/stringUtils'; N\u00edvel 3: Avan\u00e7ado Crie uma estrutura de m\u00f3dulos para a sua camada de dados, como no seu exemplo. Crie data/protocols/http/ com um index.ts e um http-client.ts . O http-client.ts deve exportar um HttpStatusCode (enum) e uma interface HttpClient . O index.ts deve exportar tudo de http-client.ts . Configure um alias @data para a pasta data . Ver Solu\u00e7\u00e3o --- No `tsconfig.json`: { \"compilerOptions\": { \"baseUrl\": \"./src\", \"paths\": { \"@data/*\": [\"data/*\"] } } } Estrutura de arquivos: src/ data/ protocols/ http/ http-client.ts index.ts Em `src/data/protocols/http/http-client.ts`: export enum HttpStatusCode { ok = 200, noContent = 204, badRequest = 400, notFound = 404, serverError = 500, } export interface HttpClient<R = any> { request: (data: HttpRequest) => Promise<HttpResponse<R>>; } export type HttpRequest = { url: string; method: string; body?: any; headers?: any; }; export type HttpResponse<R = any> = { statusCode: HttpStatusCode; body?: R; }; Em `src/data/protocols/http/index.ts`: export * from './http-client'; Em outro arquivo: import { HttpStatusCode, HttpClient } from '@data/protocols/http'; Checklist do Dia [ ] Entendi a diferen\u00e7a entre export e export default . [ ] Criei um barrel export ( index.ts ) para simplificar imports. [ ] Configurei baseUrl e paths no tsconfig.json . [ ] Refatorei imports relativos para usar aliases de caminho. Dia 25: Testing Types Foco do Dia Escrever testes que n\u00e3o apenas validam a l\u00f3gica de execu\u00e7\u00e3o, mas tamb\u00e9m a corre\u00e7\u00e3o dos tipos, usando mocks type-safe e testes de asser\u00e7\u00e3o de tipo. Leitura e Teoria (Aprofundada) Mocks Type-Safe : Ao mockar (simular) m\u00f3dulos ou classes, \u00e9 crucial que o mock tenha o mesmo tipo do original. Ferramentas como jest.Mocked<T> ajudam a garantir isso. Testando Tipos : \u00c0s vezes, queremos testar apenas o tipo, n\u00e3o o valor. Por exemplo, garantir que uma fun\u00e7\u00e3o n\u00e3o pode ser chamada com argumentos errados. Isso geralmente \u00e9 feito em arquivos .test-d.ts (testes de declara\u00e7\u00e3o) com ferramentas como tsd ou expect-type . Mock Factories : Criar fun\u00e7\u00f5es que geram mocks consistentes e tipados para os seus testes. Isso reduz a duplica\u00e7\u00e3o de c\u00f3digo nos testes. Documenta\u00e7\u00e3o Essencial TypeScript com Jest Pr\u00e1tica Guiada (Passo a Passo) Exemplo: Mockando um Servi\u00e7o com Tipagem // Em user.service.ts export class UserService { async getUserName(id: string): Promise<string> { // ... l\u00f3gica real return \"Nome Real\"; } } // Em user.controller.test.ts import { UserService } from './user.service'; import { jest } from '@jest/globals'; // Mocka o m\u00f3dulo inteiro jest.mock('./user.service'); // Cria uma vers\u00e3o tipada da classe mockada const MockedUserService = UserService as jest.MockedClass<typeof UserService>; // Teste it('should return user name', async () => { // O TS sabe que `mock.instances[0].getUserName` existe e \u00e9 um mock MockedUserService.prototype.getUserName.mockResolvedValue(\"Nome Mockado\"); const serviceInstance = new UserService(); const name = await serviceInstance.getUserName('1'); expect(name).toBe(\"Nome Mockado\"); }); Exerc\u00edcios Pr\u00e1ticos (N\u00edveis Crescentes) N\u00edvel 1: B\u00e1sico Crie uma interface INotifier com um m\u00e9todo notify(message: string) . Crie um mock simples para esta interface em um teste, garantindo que o mock satisfa\u00e7a a interface. Ver Solu\u00e7\u00e3o --- // Interface original interface INotifier { notify(message: string): void; } // Teste describe('Notifier Test', () => { it('should be called with the correct message', () => { // O mock \u00e9 tipado como a interface const mockNotifier: INotifier = { notify: jest.fn(), // jest.fn() cria uma fun\u00e7\u00e3o mock }; // Simula o uso do notifier mockNotifier.notify(\"hello\"); expect(mockNotifier.notify).toHaveBeenCalledWith(\"hello\"); }); }); N\u00edvel 2: Intermedi\u00e1rio Crie uma \"mock factory\" para um objeto User . A factory deve ser uma fun\u00e7\u00e3o createMockUser(overrides: Partial<User>): User que cria um usu\u00e1rio padr\u00e3o e permite sobrescrever propriedades espec\u00edficas para cada teste. Ver Solu\u00e7\u00e3o --- interface User { id: string; name: string; email: string; isAdmin: boolean; } function createMockUser(overrides?: Partial<User>): User { const defaultUser: User = { id: 'user-1', name: 'Usu\u00e1rio Padr\u00e3o', email: 'default@test.com', isAdmin: false, }; return { ...defaultUser, ...overrides }; } // Teste describe('Mock User Factory', () => { it('should create a default user', () => { const user = createMockUser(); expect(user.name).toBe('Usu\u00e1rio Padr\u00e3o'); }); it('should override properties', () => { const adminUser = createMockUser({ name: 'Admin', isAdmin: true }); expect(adminUser.name).toBe('Admin'); expect(adminUser.isAdmin).toBe(true); }); }); N\u00edvel 3: Avan\u00e7ado Usando uma ferramenta como expect-type (ou apenas com coment\u00e1rios, se n\u00e3o estiver configurada), escreva um teste de tipo para garantir que uma fun\u00e7\u00e3o add(a: number, b: number) n\u00e3o pode ser chamada com strings. Ver Solu\u00e7\u00e3o --- import { expectTypeOf } from 'expect-type'; function add(a: number, b: number): number { return a + b; } // Teste de tipo test('type tests for add function', () => { // Verifica se a fun\u00e7\u00e3o aceita n\u00fameros expectTypeOf(add).toBeCallableWith(1, 2); // Verifica se a fun\u00e7\u00e3o N\u00c3O aceita strings expectTypeOf(add).not.toBeCallableWith('1', '2'); // Verifica o tipo de retorno expectTypeOf(add).returns.toBeNumber(); }); **Solu\u00e7\u00e3o sem biblioteca (usando coment\u00e1rios de erro esperado):** function add(a: number, b: number): number { return a + b; } // @ts-expect-error - Testando que isso deve dar um erro de tipo add('1', '2'); const result = add(1, 2); // @ts-expect-error - Testando que o resultado n\u00e3o \u00e9 uma string const resultIsString: string = result; Checklist do Dia [ ] Criei um mock tipado para uma interface. [ ] Usei jest.MockedClass para mockar uma classe. [ ] Criei uma factory para gerar mocks consistentes. [ ] Entendi como testar a corre\u00e7\u00e3o de tipos, n\u00e3o apenas de valores. Dia 26: Performance e Optimization Foco do Dia Entender como tipos complexos podem impactar a performance do compilador TypeScript e aprender t\u00e9cnicas para otimiz\u00e1-los. Leitura e Teoria (Aprofundada) Custo da Tipagem : Tipos muito complexos, especialmente os recursivos ou que geram uni\u00f5es muito grandes, podem deixar o tsc (compilador do TypeScript) e o IntelliSense lentos. An\u00e1lise de Performance : O compilador do TypeScript tem flags para ajudar a diagnosticar problemas de performance, como --diagnostics e --generateTrace . T\u00e9cnicas de Otimiza\u00e7\u00e3o : Evitar Recurs\u00e3o Infinita : Cuidado com tipos recursivos que n\u00e3o t\u00eam um caso base claro. Interfaces vs. Types : Interfaces s\u00e3o geralmente melhores para objetos, pois s\u00e3o extens\u00edveis e podem ser ligeiramente mais perform\u00e1ticas em alguns casos devido \u00e0 forma como s\u00e3o cacheadas internamente. Simplificar Tipos Condicionais : Tente quebrar tipos condicionais complexos em tipos auxiliares menores. Adiar Computa\u00e7\u00e3o de Tipos : Em vez de um tipo que calcula tudo de uma vez, use um tipo gen\u00e9rico que \u00e9 resolvido apenas quando usado. Documenta\u00e7\u00e3o Essencial TypeScript Performance Wiki Pr\u00e1tica Guiada (Passo a Passo) Exemplo: Tipo Recursivo que Pode Ser Lento // Este tipo pode ser lento se a profundidade for grande type DeeplyNested<T> = { content: T; next?: DeeplyNested<T> }; // Uma alternativa pode ser limitar a profundidade, se poss\u00edvel type LimitedDepth<T, D extends number> = D extends 0 ? T : { content: T; next?: LimitedDepth<T, any /* D-1 */> }; // (A matem\u00e1tica de tipos para subtrair 1 \u00e9 complexa, mas a ideia \u00e9 limitar a recurs\u00e3o) Exemplo: Simplificando Uni\u00f5es Grandes // Lento: Gera uma uni\u00e3o de 1000 tipos literais type Thousand = 1 | 2 | 3 | ... | 1000; // Mais perform\u00e1tico: Usa um tipo mais geral e valida em tempo de execu\u00e7\u00e3o type SmallNumber = number & { __brand: 'SmallNumber' }; function createSmallNumber(n: number): SmallNumber | null { if (n > 0 && n <= 1000) return n as SmallNumber; return null; } Exerc\u00edcios Pr\u00e1ticos (N\u00edveis Crescentes) N\u00edvel 1: B\u00e1sico Refatore um tipo que usa type para um objeto para usar interface . Explique por que interface pode ser prefer\u00edvel para objetos que podem ser estendidos. Ver Solu\u00e7\u00e3o --- // Antes type UserType = { id: number; name: string; }; // Depois (Refatorado) interface UserInterface { id: number; name: string; } // Interfaces podem ser estendidas por outras interfaces e aumentadas (module augmentation). // Isso as torna mais flex\u00edveis para objetos, especialmente em APIs p\u00fablicas. interface AdminUser extends UserInterface { permissions: string[]; } N\u00edvel 2: Intermedi\u00e1rio Dado um tipo ComplexMappedType que faz v\u00e1rias opera\u00e7\u00f5es, quebre-o em tipos utilit\u00e1rios menores e mais leg\u00edveis. Ver Solu\u00e7\u00e3o --- interface Props { name: string; age: number; onNameChange: (name: string) => void; onAgeChange: (age: number) => void; } // Antes: Um tipo monol\u00edtico type CallbacksOnlyBefore<T> = { [K in keyof T as T[K] extends (...args: any[]) => any ? K : never]: T[K] }; // Depois: Refatorado em tipos menores // 1. Pega as chaves cujos valores s\u00e3o fun\u00e7\u00f5es type FunctionKeys<T> = { [K in keyof T]: T[K] extends (...args: any[]) => any ? K : never }[keyof T]; // 2. Usa Pick para criar o tipo final type CallbacksOnlyAfter<T> = Pick<T, FunctionKeys<T>>; // Teste type PropCallbacks = CallbacksOnlyAfter<Props>; // { onNameChange: (name: string) => void; onAgeChange: (age: number) => void; } N\u00edvel 3: Avan\u00e7ado Crie um tipo Path<T> que gera todas as chaves de um objeto aninhado como uma string com pontos (ex: 'details.address.city' ). Este \u00e9 um tipo inerentemente recursivo e pesado. Pense em como voc\u00ea poderia otimiz\u00e1-lo ou quais seriam seus gargalos de performance. Ver Solu\u00e7\u00e3o --- // Este tipo \u00e9 conhecido por ser pesado e pode causar lentid\u00e3o no compilador // com objetos muito grandes ou profundos. type Path<T, K extends keyof T = keyof T> = K extends string ? T[K] extends Record<string, any> ? `${K}.${Path<T[K]>}` | K : K : never; // Teste interface UserProfile { id: number; details: { name: string; address: { street: string; city: string; } } } type UserProfilePaths = Path<UserProfile>; // \"id\" | \"details\" | \"details.name\" | \"details.address\" | \"details.address.street\" | \"details.address.city\" /* Otimiza\u00e7\u00e3o/Gargalos: 1. Profundidade da Recurs\u00e3o: A principal causa de lentid\u00e3o. Uma otimiza\u00e7\u00e3o seria adicionar um par\u00e2metro de profundidade para limitar a recurs\u00e3o. 2. Largura do Objeto: Muitos campos em cada n\u00edvel aumentam o n\u00famero de uni\u00f5es geradas. 3. Tipos Condicionais: Cada verifica\u00e7\u00e3o `T[K] extends Record<string, any>` adiciona custo computacional. Uma otimiza\u00e7\u00e3o real em um projeto seria talvez n\u00e3o usar este tipo e preferir uma valida\u00e7\u00e3o em tempo de execu\u00e7\u00e3o para caminhos de objetos. */ Checklist do Dia [ ] Entendi que tipos complexos podem impactar a performance. [ ] Sei a diferen\u00e7a entre interface e type e quando usar cada um. [ ] Refatorei um tipo complexo em tipos auxiliares menores. [ ] Analisei um tipo recursivo e identifiquei seus poss\u00edveis gargalos. Dia 27: Advanced Patterns Foco do Dia Implementar padr\u00f5es de design de software cl\u00e1ssicos (Design Patterns) em TypeScript, aproveitando o sistema de tipos para torn\u00e1-los mais seguros e expressivos. Leitura e Teoria (Aprofundada) Builder Pattern : Usado para construir objetos complexos passo a passo. Permite produzir diferentes tipos e representa\u00e7\u00f5es de um objeto usando o mesmo processo de constru\u00e7\u00e3o. Ideal para objetos com muitos par\u00e2metros de configura\u00e7\u00e3o. Factory Pattern : Usado para criar objetos sem expor a l\u00f3gica de cria\u00e7\u00e3o ao cliente. Uma fun\u00e7\u00e3o ou m\u00e9todo \"f\u00e1brica\" decide qual classe concreta instanciar com base em algum par\u00e2metro. Observer Pattern : Usado para criar uma rela\u00e7\u00e3o de um-para-muitos entre objetos. Quando um objeto (o subject ) muda de estado, todos os seus dependentes (os observers ) s\u00e3o notificados e atualizados automaticamente. Documenta\u00e7\u00e3o Essencial Design Patterns (Refactoring Guru) Pr\u00e1tica Guiada (Passo a Passo) Exemplo: Observer Pattern // A interface para os observadores interface Observer<T> { update(data: T): void; } // O sujeito que os observadores observam class Subject<T> { private observers = new Set<Observer<T>>(); subscribe(observer: Observer<T>) { this.observers.add(observer); } unsubscribe(observer: Observer<T>) { this.observers.delete(observer); } notify(data: T) { this.observers.forEach(observer => observer.update(data)); } } // Exemplo de uso const newsFeed = new Subject<string>(); const observerA = { update: (data: string) => console.log(`Observer A: ${data}`) }; const observerB = { update: (data: string) => console.log(`Observer B: ${data}`) }; newsFeed.subscribe(observerA); newsFeed.subscribe(observerB); newsFeed.notify(\"Nova not\u00edcia importante!\"); Exerc\u00edcios Pr\u00e1ticos (N\u00edveis Crescentes) N\u00edvel 1: B\u00e1sico Implemente uma SimpleFactory para criar objetos Logger . A factory deve ter um m\u00e9todo createLogger(type: 'console' | 'file') que retorna uma inst\u00e2ncia de ConsoleLogger ou FileLogger , ambas implementando uma interface ILogger . Ver Solu\u00e7\u00e3o --- interface ILogger { log(message: string): void; } class ConsoleLogger implements ILogger { log(message: string) { console.log(message); } } class FileLogger implements ILogger { log(message: string) { console.log(`File: ${message}`); } } class LoggerFactory { public createLogger(type: 'console' | 'file'): ILogger { if (type === 'file') { return new FileLogger(); } return new ConsoleLogger(); } } // Teste const factory = new LoggerFactory(); const consoleLogger = factory.createLogger('console'); const fileLogger = factory.createLogger('file'); consoleLogger.log(\"Teste console\"); fileLogger.log(\"Teste arquivo\"); N\u00edvel 2: Intermedi\u00e1rio Implemente o Builder Pattern para criar um objeto Pizza . A classe PizzaBuilder deve ter m\u00e9todos como setCheese(cheese: string) , addTopping(topping: string) , e um m\u00e9todo build() que retorna o objeto Pizza final. Ver Solu\u00e7\u00e3o --- class Pizza { public cheese?: string; public toppings: string[] = []; describe(): void { console.log(`Pizza com queijo ${this.cheese} e coberturas: ${this.toppings.join(', ')}`); } } class PizzaBuilder { private pizza: Pizza; constructor() { this.pizza = new Pizza(); } setCheese(cheese: string): this { this.pizza.cheese = cheese; return this; } addTopping(topping: string): this { this.pizza.toppings.push(topping); return this; } build(): Pizza { return this.pizza; } } // Teste const myPizza = new PizzaBuilder() .setCheese('mussarela') .addTopping('calabresa') .addTopping('cebola') .build(); myPizza.describe(); N\u00edvel 3: Avan\u00e7ado Crie um sistema de eventos type-safe usando o Observer Pattern. Crie uma classe EventManager que permite se inscrever ( on ) e emitir ( emit ) eventos. O sistema deve ser tipado de forma que, ao emitir um evento, o payload seja do tipo correto esperado pelos listeners daquele evento. Ver Solu\u00e7\u00e3o --- // Mapeia nomes de eventos para os tipos de seus payloads interface EventMap { 'user:created': { userId: string; name: string; }; 'user:deleted': { userId: string; }; 'product:viewed': { productId: string; }; } type EventKey = keyof EventMap; class EventManager { private listeners: { [K in EventKey]?: ((payload: EventMap[K]) => void)[] } = {}; // Se inscreve em um evento public on<K extends EventKey>(eventName: K, listener: (payload: EventMap[K]) => void): void { if (!this.listeners[eventName]) { this.listeners[eventName] = []; } this.listeners[eventName]?.push(listener); } // Emite um evento public emit<K extends EventKey>(eventName: K, payload: EventMap[K]): void { this.listeners[eventName]?.forEach(listener => listener(payload)); } } // Teste const events = new EventManager(); events.on('user:created', (payload) => { // O tipo de `payload` \u00e9 { userId: string; name: string; } console.log(`Novo usu\u00e1rio criado: ${payload.name} (ID: ${payload.userId})`); }); events.on('user:deleted', (payload) => { // O tipo de `payload` \u00e9 { userId: string; } console.log(`Usu\u00e1rio deletado: ${payload.userId}`); }); events.emit('user:created', { userId: 'u-123', name: 'Lucas' }); events.emit('user:deleted', { userId: 'u-456' }); // events.emit('user:created', { userId: 'u-789' }); // Erro: a propriedade 'name' est\u00e1 faltando. Checklist do Dia [ ] Implementei o Factory Pattern para criar objetos. [ ] Implementei o Builder Pattern para construir um objeto complexo. [ ] Implementei o Observer Pattern para notifica\u00e7\u00e3o de eventos. [ ] Usei os recursos de tipo do TypeScript para tornar os padr\u00f5es mais seguros. Dias 28-30: Projeto Final Foco do Projeto Consolidar todo o conhecimento adquirido ao longo das 4 semanas para planejar, implementar e refinar uma pequena aplica\u00e7\u00e3o ou um componente de sistema complexo. O objetivo \u00e9 aplicar os padr\u00f5es e t\u00e9cnicas aprendidas em um contexto coeso. Ideia do Projeto: Um Mini-Framework de Formul\u00e1rios Type-Safe Vamos construir um pequeno framework para gerenciar o estado de formul\u00e1rios, inspirado em bibliotecas como Formik ou React Hook Form, mas muito mais simples. Ele ir\u00e1 demonstrar o uso de classes, generics, mapped types, e mais. Dia 28: Planejamento e Estrutura Exerc\u00edcio: Defina os tipos e a classe principal. 1. Crie uma classe FormStore<T extends object> que ser\u00e1 o cora\u00e7\u00e3o do nosso framework. 2. No construtor, ela deve receber um initialValues: T . 3. Ela deve ter propriedades para armazenar os valores ( values: T ), os erros ( errors: FormErrors<T> ) e o estado de \"tocado\" ( touched: FormTouched<T> ). 4. Defina os tipos utilit\u00e1rios FormErrors<T> e FormTouched<T> usando Mapped Types. FormErrors deve ter as mesmas chaves de T , mas com valores string | undefined . FormTouched deve ter valores boolean | undefined . Ver Solu\u00e7\u00e3o --- // Tipos utilit\u00e1rios type FormErrors<T> = { [P in keyof T]?: string; }; type FormTouched<T> = { [P in keyof T]?: boolean; }; class FormStore<T extends object> { public values: T; public errors: FormErrors<T> = {}; public touched: FormTouched<T> = {}; constructor(initialValues: T) { this.values = initialValues; } public getState() { return { values: this.values, errors: this.errors, touched: this.touched, }; } } // Teste da estrutura const form = new FormStore({ name: '', email: '' }); console.log(form.getState()); Dia 29: Implementa\u00e7\u00e3o dos M\u00e9todos Exerc\u00edcio: Adicione os m\u00e9todos para interagir com o formul\u00e1rio. 1. Adicione um m\u00e9todo setFieldValue<K extends keyof T>(field: K, value: T[K]): void que atualiza um valor no values . 2. Adicione um m\u00e9todo setFieldTouched<K extends keyof T>(field: K, isTouched: boolean): void . 3. Adicione um m\u00e9todo setErrors(errors: FormErrors<T>): void que substitui o objeto de erros. 4. Adicione um m\u00e9todo de valida\u00e7\u00e3o validate(validationSchema: ValidationSchema<T>): boolean . O validationSchema deve ser um objeto onde cada chave de T tem uma fun\u00e7\u00e3o que recebe o valor do campo e retorna uma string de erro ou undefined . Ver Solu\u00e7\u00e3o --- // Tipos do dia anterior... type FormErrors<T> = { [P in keyof T]?: string; }; type FormTouched<T> = { [P in keyof T]?: boolean; }; // Novo tipo para o esquema de valida\u00e7\u00e3o type ValidationSchema<T> = { [K in keyof T]?: (value: T[K]) => string | undefined; }; class FormStore<T extends object> { public values: T; public errors: FormErrors<T> = {}; public touched: FormTouched<T> = {}; constructor(initialValues: T) { this.values = initialValues; } public setFieldValue<K extends keyof T>(field: K, value: T[K]): void { this.values[field] = value; } public setFieldTouched<K extends keyof T>(field: K, isTouched: boolean = true): void { this.touched[field] = isTouched; } public setErrors(errors: FormErrors<T>): void { this.errors = errors; } public validate(validationSchema: ValidationSchema<T>): boolean { const newErrors: FormErrors<T> = {}; let isValid = true; for (const key in validationSchema) { const validator = validationSchema[key]; if (validator) { const error = validator(this.values[key]); if (error) { newErrors[key] = error; isValid = false; } } } this.setErrors(newErrors); return isValid; } } Dia 30: Refinamento e Uso Exerc\u00edcio: Use o FormStore para gerenciar um formul\u00e1rio de registro de usu\u00e1rio. 1. Defina a interface UserSignupForm com name , email , e password . 2. Crie uma inst\u00e2ncia do FormStore com os valores iniciais. 3. Crie um ValidationSchema para o formul\u00e1rio (ex: nome \u00e9 obrigat\u00f3rio, email deve conter @ , senha deve ter mais de 6 caracteres). 4. Simule a intera\u00e7\u00e3o do usu\u00e1rio: mude valores, toque em campos e chame a valida\u00e7\u00e3o. Imprima o estado ( values , errors , touched ) no console a cada passo. Ver Solu\u00e7\u00e3o --- // Classe e tipos do dia anterior... // 1. Definir a interface do formul\u00e1rio interface UserSignupForm { name: string; email: string; password: string; } // 2. Criar a inst\u00e2ncia do FormStore const signupForm = new FormStore<UserSignupForm>({ name: '', email: '', password: '', }); // 3. Criar o esquema de valida\u00e7\u00e3o const signupValidationSchema: ValidationSchema<UserSignupForm> = { name: (value) => (value ? undefined : 'Nome \u00e9 obrigat\u00f3rio'), email: (value) => (value.includes('@') ? undefined : 'Email inv\u00e1lido'), password: (value) => (value.length > 6 ? undefined : 'Senha muito curta'), }; // 4. Simular a intera\u00e7\u00e3o console.log(\"Estado Inicial:\", signupForm.errors); // Usu\u00e1rio digita o nome signupForm.setFieldValue('name', 'Lucas'); signupForm.setFieldTouched('name'); // Usu\u00e1rio digita um email inv\u00e1lido e sai do campo signupForm.setFieldValue('email', 'lucas.com'); signupForm.setFieldTouched('email'); // Valida o formul\u00e1rio signupForm.validate(signupValidationSchema); console.log(\"Estado ap\u00f3s valida\u00e7\u00e3o 1:\", signupForm.errors); // { email: 'Email inv\u00e1lido', password: 'Senha muito curta' } // Usu\u00e1rio corrige o email e a senha signupForm.setFieldValue('email', 'lucas@ts.com'); signupForm.setFieldValue('password', '1234567'); // Valida novamente signupForm.validate(signupValidationSchema); console.log(\"Estado ap\u00f3s valida\u00e7\u00e3o 2:\", signupForm.errors); // {} Checklist Final [ ] Planejei a estrutura de uma classe complexa com tipos gen\u00e9ricos. [ ] Usei Mapped Types para criar tipos de estado derivados. [ ] Implementei a l\u00f3gica de neg\u00f3cio em m\u00e9todos de classe. [ ] Usei a classe final para resolver um problema pr\u00e1tico. [ ] Sinto-me confiante para arquitetar aplica\u00e7\u00f5es TypeScript intermedi\u00e1rias.","title":"Semana 4"},{"location":"Ts/Semana4/#semana-4-integracao-e-refinamento","text":"","title":"Semana 4: Integra\u00e7\u00e3o e Refinamento"},{"location":"Ts/Semana4/#visao-geral-da-semana","text":"Na \u00faltima semana, nosso foco \u00e9 a aplica\u00e7\u00e3o pr\u00e1tica e a integra\u00e7\u00e3o do TypeScript em ecossistemas do mundo real. Vamos aprender a integrar com bibliotecas externas como o React Hook Form, gerenciar estado de forma segura, organizar nosso c\u00f3digo com m\u00f3dulos e path mapping, e escrever testes que tamb\u00e9m validam nossos tipos. Finalizaremos com uma olhada em otimiza\u00e7\u00e3o de performance e padr\u00f5es de design avan\u00e7ados, culminando em um projeto final que une todo o conhecimento adquirido.","title":"Vis\u00e3o Geral da Semana"},{"location":"Ts/Semana4/#dia-22-form-integration-react-hook-form","text":"","title":"Dia 22: Form Integration (React Hook Form)"},{"location":"Ts/Semana4/#foco-do-dia","text":"Integrar TypeScript com bibliotecas externas, usando o React Hook Form como exemplo, e aprender a usar Module Augmentation para estender tipos de bibliotecas de terceiros.","title":"Foco do Dia"},{"location":"Ts/Semana4/#leitura-e-teoria-aprofundada","text":"Integra\u00e7\u00e3o com Bibliotecas : Muitas bibliotecas populares (React, Vue, etc.) s\u00e3o escritas em TypeScript ou fornecem seus pr\u00f3prios arquivos de declara\u00e7\u00e3o de tipo ( .d.ts ). Isso nos permite usar a biblioteca de forma type-safe. Tipos Utilit\u00e1rios de Bibliotecas : Bibliotecas como React Hook Form exportam seus pr\u00f3prios tipos utilit\u00e1rios (ex: Control , FieldErrors , UseFormSetValue ) que s\u00e3o gen\u00e9ricos e devem ser usados com os tipos do nosso formul\u00e1rio. Module Augmentation : Permite que voc\u00ea \"adicione\" declara\u00e7\u00f5es a um m\u00f3dulo existente. \u00c9 \u00fatil para estender interfaces de bibliotecas de terceiros para adicionar propriedades customizadas sem precisar criar um fork da biblioteca.","title":"Leitura e Teoria (Aprofundada)"},{"location":"Ts/Semana4/#documentacao-essencial","text":"TypeScript com React (React Docs) TypeScript com React Hook Form (RHF Docs) Module Augmentation (Handbook)","title":"Documenta\u00e7\u00e3o Essencial"},{"location":"Ts/Semana4/#pratica-guiada-passo-a-passo","text":"Exemplo: Tipando um Formul\u00e1rio Simples com React Hook Form import { useForm, Control, FieldErrors, UseFormSetValue } from 'react-hook-form'; // 1. Definir o tipo dos valores do formul\u00e1rio interface MyFormValues { firstName: string; age: number; } // 2. Usar o tipo com o hook `useForm` function MyForm() { const { control, formState: { errors }, setValue } = useForm<MyFormValues>(); // O tipo de `control` \u00e9 Control<MyFormValues> // O tipo de `errors` \u00e9 FieldErrors<MyFormValues> // O tipo de `setValue` \u00e9 UseFormSetValue<MyFormValues> // ... resto do componente JSX } Exemplo: Recriando seu tipo RenderMinFareForm import { Control, FieldErrors, UseFormSetValue, UseFormClearErrors } from 'react-hook-form'; // O tipo que define os valores do seu formul\u00e1rio interface MinFareFormValue { yield: number; price: number; } // O tipo que agrupa todos os props necess\u00e1rios para renderizar o form export type RenderMinFareForm = { control: Control<MinFareFormValue>; errors: FieldErrors<MinFareFormValue>; setValue: UseFormSetValue<MinFareFormValue>; clearErrors: UseFormClearErrors<MinFareFormValue>; };","title":"Pr\u00e1tica Guiada (Passo a Passo)"},{"location":"Ts/Semana4/#exercicios-praticos-niveis-crescentes","text":"N\u00edvel 1: B\u00e1sico Defina um tipo para um formul\u00e1rio de login, LoginFormValues , que cont\u00e9m email (string) e password (string). Em seguida, crie um tipo LoginProps que represente as propriedades que um componente de formul\u00e1rio de login receberia, incluindo onSubmit que \u00e9 uma fun\u00e7\u00e3o que recebe os LoginFormValues . Ver Solu\u00e7\u00e3o --- interface LoginFormValues { email: string; password: string; } type LoginProps = { onSubmit: (data: LoginFormValues) => void; }; // Exemplo de uso em um componente (simulado) function LoginForm(props: LoginProps) { // const { handleSubmit } = useForm<LoginFormValues>(); // return <form onSubmit={handleSubmit(props.onSubmit)}>...</form> console.log(\"Componente de formul\u00e1rio de login renderizado.\"); } N\u00edvel 2: Intermedi\u00e1rio Crie um tipo ProfileFormValues com name (string) e bio (string, opcional). Crie um tipo ProfileFormProps que agrupa as propriedades control e errors do React Hook Form, devidamente tipadas com ProfileFormValues . Ver Solu\u00e7\u00e3o --- import { Control, FieldErrors } from 'react-hook-form'; interface ProfileFormValues { name: string; bio?: string; } type ProfileFormProps = { control: Control<ProfileFormValues>; errors: FieldErrors<ProfileFormValues>; }; // Simula\u00e7\u00e3o de um componente que recebe esses props function ProfileFormComponent(props: ProfileFormProps) { // <Controller name=\"name\" control={props.control} ... /> // {props.errors.name && <p>Erro no nome</p>} console.log(\"Componente de perfil renderizado.\"); } N\u00edvel 3: Avan\u00e7ado Usando Module Augmentation , estenda a interface DefaultTheme de uma biblioteca de estiliza\u00e7\u00e3o (ex: styled-components ). Adicione uma propriedade customColors que \u00e9 um objeto com chaves primary e secondary . Ver Solu\u00e7\u00e3o --- // Em um arquivo, ex: styled.d.ts // 1. Importe o tipo original da biblioteca import 'styled-components'; // 2. Declare o m\u00f3dulo novamente para estend\u00ea-lo declare module 'styled-components' { // 3. Estenda a interface DefaultTheme export interface DefaultTheme { customColors: { primary: string; secondary: string; background: string; }; } } // Em outro arquivo, ex: theme.ts import { DefaultTheme } from 'styled-components'; const myTheme: DefaultTheme = { // Agora o TS espera a propriedade customColors customColors: { primary: '#007bff', secondary: '#6c757d', background: '#f8f9fa', }, };","title":"Exerc\u00edcios Pr\u00e1ticos (N\u00edveis Crescentes)"},{"location":"Ts/Semana4/#checklist-do-dia","text":"[ ] Entendi como usar tipos gen\u00e9ricos de bibliotecas externas. [ ] Criei um tipo para os valores de um formul\u00e1rio. [ ] Agrupei os props de um formul\u00e1rio em um \u00fanico tipo. [ ] Usei Module Augmentation para estender uma interface de biblioteca.","title":"Checklist do Dia"},{"location":"Ts/Semana4/#dia-23-state-management-type-safe","text":"","title":"Dia 23: State Management Type-Safe"},{"location":"Ts/Semana4/#foco-do-dia_1","text":"Projetar um sistema de gerenciamento de estado (como Redux ou Zustand) de forma totalmente type-safe, com foco em action creators e selectors tipados.","title":"Foco do Dia"},{"location":"Ts/Semana4/#leitura-e-teoria-aprofundada_1","text":"Store : Um objeto \u00fanico que cont\u00e9m todo o estado da aplica\u00e7\u00e3o. Actions : Objetos que descrevem uma inten\u00e7\u00e3o de mudar o estado. Geralmente t\u00eam uma propriedade type (uma string literal) e um payload opcional. Reducers : Fun\u00e7\u00f5es puras que recebem o estado atual e uma a\u00e7\u00e3o, e retornam o novo estado. (currentState, action) => newState . Action Creators : Fun\u00e7\u00f5es que criam e retornam objetos de a\u00e7\u00e3o. Ajuda a evitar erros de digita\u00e7\u00e3o no type da a\u00e7\u00e3o. Selectors : Fun\u00e7\u00f5es que extraem e computam dados derivados do estado do store. Memoiza\u00e7\u00e3o (como na biblioteca reselect ) \u00e9 frequentemente usada para performance.","title":"Leitura e Teoria (Aprofundada)"},{"location":"Ts/Semana4/#documentacao-essencial_1","text":"Static Typing com Redux (Redux Docs)","title":"Documenta\u00e7\u00e3o Essencial"},{"location":"Ts/Semana4/#pratica-guiada-passo-a-passo_1","text":"Exemplo: Tipando A\u00e7\u00f5es e Reducer do Redux // 1. Definir o tipo do estado interface CounterState { value: number; } // 2. Definir os tipos das a\u00e7\u00f5es const INCREMENT = 'counter/increment'; const ADD = 'counter/add'; interface IncrementAction { type: typeof INCREMENT; } interface AddAction { type: typeof ADD; payload: number; } type CounterAction = IncrementAction | AddAction; // 3. Criar o reducer const initialState: CounterState = { value: 0 }; function counterReducer(state = initialState, action: CounterAction): CounterState { switch (action.type) { case INCREMENT: return { ...state, value: state.value + 1 }; case ADD: // O TS sabe que `action` tem `payload` aqui return { ...state, value: state.value + action.payload }; default: return state; } }","title":"Pr\u00e1tica Guiada (Passo a Passo)"},{"location":"Ts/Semana4/#exercicios-praticos-niveis-crescentes_1","text":"N\u00edvel 1: B\u00e1sico Crie os action creators para as a\u00e7\u00f5es IncrementAction e AddAction do exemplo guiado. As fun\u00e7\u00f5es devem retornar os objetos de a\u00e7\u00e3o devidamente tipados. Ver Solu\u00e7\u00e3o --- // Tipos do exemplo anterior... const INCREMENT = 'counter/increment'; const ADD = 'counter/add'; interface IncrementAction { type: typeof INCREMENT; } interface AddAction { type: typeof ADD; payload: number; } // Action Creators function increment(): IncrementAction { return { type: INCREMENT }; } function add(amount: number): AddAction { return { type: ADD, payload: amount }; } // Teste const incrementAction = increment(); // tipo IncrementAction const addAction = add(5); // tipo AddAction console.log(incrementAction); console.log(addAction); N\u00edvel 2: Intermedi\u00e1rio Defina um estado para uma lista de tarefas ( todos ). Crie os tipos de a\u00e7\u00e3o e o reducer para adicionar uma nova tarefa ( ADD_TODO ) e marcar uma tarefa como completa ( TOGGLE_TODO ). Ver Solu\u00e7\u00e3o --- // 1. Tipos de Estado interface Todo { id: number; text: string; completed: boolean; } interface TodosState { todos: Todo[]; } // 2. Tipos de A\u00e7\u00e3o const ADD_TODO = 'todos/add'; const TOGGLE_TODO = 'todos/toggle'; interface AddTodoAction { type: typeof ADD_TODO; payload: { text: string } } interface ToggleTodoAction { type: typeof TOGGLE_TODO; payload: { id: number } } type TodoAction = AddTodoAction | ToggleTodoAction; // 3. Reducer const initialTodosState: TodosState = { todos: [] }; let nextTodoId = 0; function todosReducer(state = initialTodosState, action: TodoAction): TodosState { switch (action.type) { case ADD_TODO: return { ...state, todos: [...state.todos, { id: nextTodoId++, text: action.payload.text, completed: false }] }; case TOGGLE_TODO: return { ...state, todos: state.todos.map(todo => todo.id === action.payload.id ? { ...todo, completed: !todo.completed } : todo ) }; default: return state; } } N\u00edvel 3: Avan\u00e7ado Crie um seletor tipado selectCompletedTodos que recebe o estado completo da aplica\u00e7\u00e3o (que cont\u00e9m todosState ) e retorna apenas a lista de tarefas completas. Ver Solu\u00e7\u00e3o --- // Reutilizando os tipos do N\u00edvel 2 interface Todo { id: number; text: string; completed: boolean; } interface TodosState { todos: Todo[]; } // Estado global da aplica\u00e7\u00e3o interface AppState { todosState: TodosState; // ... outros estados } // O seletor function selectCompletedTodos(state: AppState): Todo[] { return state.todosState.todos.filter(todo => todo.completed); } // Teste const testState: AppState = { todosState: { todos: [ { id: 0, text: 'Aprender TS', completed: true }, { id: 1, text: 'Dominar o mundo', completed: false }, { id: 2, text: 'Tomar caf\u00e9', completed: true }, ] } }; const completed = selectCompletedTodos(testState); console.log(completed);","title":"Exerc\u00edcios Pr\u00e1ticos (N\u00edveis Crescentes)"},{"location":"Ts/Semana4/#checklist-do-dia_1","text":"[ ] Defini o tipo para uma fatia (slice) do estado. [ ] Criei tipos de a\u00e7\u00e3o usando discriminated unions. [ ] Implementei um reducer type-safe. [ ] Criei action creators e seletores tipados.","title":"Checklist do Dia"},{"location":"Ts/Semana4/#dia-24-module-system-e-path-mapping","text":"","title":"Dia 24: Module System e Path Mapping"},{"location":"Ts/Semana4/#foco-do-dia_2","text":"Organizar a arquitetura de c\u00f3digo usando o sistema de m\u00f3dulos do TypeScript, incluindo barrel exports e path mapping para imports mais limpos.","title":"Foco do Dia"},{"location":"Ts/Semana4/#leitura-e-teoria-aprofundada_2","text":"M\u00f3dulos : Cada arquivo em TypeScript \u00e9 um m\u00f3dulo. export torna vari\u00e1veis, fun\u00e7\u00f5es e classes dispon\u00edveis para outros m\u00f3dulos. import as consome. Barrel Exports : Um arquivo, geralmente chamado index.ts , que re-exporta todos os exports de um diret\u00f3rio. Isso permite que os consumidores importem tudo de um \u00fanico local, em vez de m\u00faltiplos caminhos. import { ServiceA, ServiceB } from './services'; em vez de ... from './services/ServiceA' e ... from './services/ServiceB' . Path Mapping : Uma feature do tsconfig.json que permite criar aliases para caminhos de importa\u00e7\u00e3o. Isso evita imports relativos longos como ../../../../components e os substitui por aliases como @components .","title":"Leitura e Teoria (Aprofundada)"},{"location":"Ts/Semana4/#documentacao-essencial_2","text":"Modules (Handbook) Path mapping (tsconfig Reference)","title":"Documenta\u00e7\u00e3o Essencial"},{"location":"Ts/Semana4/#pratica-guiada-passo-a-passo_2","text":"Exemplo 1: Barrel Exports // Em src/utils/stringUtils.ts export const capitalize = (s: string) => s.charAt(0).toUpperCase() + s.slice(1); // Em src/utils/numberUtils.ts export const isEven = (n: number) => n % 2 === 0; // Em src/utils/index.ts (o \"barrel\") export * from './stringUtils'; export * from './numberUtils'; // Em outro arquivo import { capitalize, isEven } from '../utils'; // Importa de um \u00fanico lugar Exemplo 2: Configurando Path Mapping No tsconfig.json : { \"compilerOptions\": { \"baseUrl\": \"./src\", // Essencial para o path mapping \"paths\": { \"@components/*\": [\"components/*\"], \"@services/*\": [\"services/*\"], \"@domain/*\": [\"domain/*\"] } } } Uso no c\u00f3digo: // Em vez de: import { User } from '../../domain/models/User'; import { User } from '@domain/models/User'; // Em vez de: import { Button } from '../components/Button'; import { Button } from '@components/Button';","title":"Pr\u00e1tica Guiada (Passo a Passo)"},{"location":"Ts/Semana4/#exercicios-praticos-niveis-crescentes_2","text":"N\u00edvel 1: B\u00e1sico Crie uma estrutura de pastas domain/errors . Dentro, crie dois arquivos: UnexpectedError.ts e NotFoundError.ts , cada um exportando uma classe de erro. Crie um arquivo index.ts em domain/errors que exporta ambas as classes. Ver Solu\u00e7\u00e3o --- // Em domain/errors/UnexpectedError.ts export class UnexpectedError extends Error { constructor() { super('Um erro inesperado aconteceu.'); this.name = 'UnexpectedError'; } } // Em domain/errors/NotFoundError.ts export class NotFoundError extends Error { constructor() { super('Recurso n\u00e3o encontrado.'); this.name = 'NotFoundError'; } } // Em domain/errors/index.ts export * from './UnexpectedError'; export * from './NotFoundError'; // Em outro arquivo (ex: app.ts) // import { UnexpectedError, NotFoundError } from './domain/errors'; N\u00edvel 2: Intermedi\u00e1rio Configure o path mapping no seu tsconfig.json para criar um alias @/ que aponte para o diret\u00f3rio src/ . Refatore um import que usa um caminho relativo (ex: ../utils ) para usar o novo alias ( @/utils ). Ver Solu\u00e7\u00e3o --- No `tsconfig.json`: { \"compilerOptions\": { \"baseUrl\": \".\", // ou \"./src\" \"paths\": { \"@/*\": [\"src/*\"] } } } No c\u00f3digo: // Antes: // import { capitalize } from '../../utils/stringUtils'; // Depois: // import { capitalize } from '@/utils/stringUtils'; N\u00edvel 3: Avan\u00e7ado Crie uma estrutura de m\u00f3dulos para a sua camada de dados, como no seu exemplo. Crie data/protocols/http/ com um index.ts e um http-client.ts . O http-client.ts deve exportar um HttpStatusCode (enum) e uma interface HttpClient . O index.ts deve exportar tudo de http-client.ts . Configure um alias @data para a pasta data . Ver Solu\u00e7\u00e3o --- No `tsconfig.json`: { \"compilerOptions\": { \"baseUrl\": \"./src\", \"paths\": { \"@data/*\": [\"data/*\"] } } } Estrutura de arquivos: src/ data/ protocols/ http/ http-client.ts index.ts Em `src/data/protocols/http/http-client.ts`: export enum HttpStatusCode { ok = 200, noContent = 204, badRequest = 400, notFound = 404, serverError = 500, } export interface HttpClient<R = any> { request: (data: HttpRequest) => Promise<HttpResponse<R>>; } export type HttpRequest = { url: string; method: string; body?: any; headers?: any; }; export type HttpResponse<R = any> = { statusCode: HttpStatusCode; body?: R; }; Em `src/data/protocols/http/index.ts`: export * from './http-client'; Em outro arquivo: import { HttpStatusCode, HttpClient } from '@data/protocols/http';","title":"Exerc\u00edcios Pr\u00e1ticos (N\u00edveis Crescentes)"},{"location":"Ts/Semana4/#checklist-do-dia_2","text":"[ ] Entendi a diferen\u00e7a entre export e export default . [ ] Criei um barrel export ( index.ts ) para simplificar imports. [ ] Configurei baseUrl e paths no tsconfig.json . [ ] Refatorei imports relativos para usar aliases de caminho.","title":"Checklist do Dia"},{"location":"Ts/Semana4/#dia-25-testing-types","text":"","title":"Dia 25: Testing Types"},{"location":"Ts/Semana4/#foco-do-dia_3","text":"Escrever testes que n\u00e3o apenas validam a l\u00f3gica de execu\u00e7\u00e3o, mas tamb\u00e9m a corre\u00e7\u00e3o dos tipos, usando mocks type-safe e testes de asser\u00e7\u00e3o de tipo.","title":"Foco do Dia"},{"location":"Ts/Semana4/#leitura-e-teoria-aprofundada_3","text":"Mocks Type-Safe : Ao mockar (simular) m\u00f3dulos ou classes, \u00e9 crucial que o mock tenha o mesmo tipo do original. Ferramentas como jest.Mocked<T> ajudam a garantir isso. Testando Tipos : \u00c0s vezes, queremos testar apenas o tipo, n\u00e3o o valor. Por exemplo, garantir que uma fun\u00e7\u00e3o n\u00e3o pode ser chamada com argumentos errados. Isso geralmente \u00e9 feito em arquivos .test-d.ts (testes de declara\u00e7\u00e3o) com ferramentas como tsd ou expect-type . Mock Factories : Criar fun\u00e7\u00f5es que geram mocks consistentes e tipados para os seus testes. Isso reduz a duplica\u00e7\u00e3o de c\u00f3digo nos testes.","title":"Leitura e Teoria (Aprofundada)"},{"location":"Ts/Semana4/#documentacao-essencial_3","text":"TypeScript com Jest","title":"Documenta\u00e7\u00e3o Essencial"},{"location":"Ts/Semana4/#pratica-guiada-passo-a-passo_3","text":"Exemplo: Mockando um Servi\u00e7o com Tipagem // Em user.service.ts export class UserService { async getUserName(id: string): Promise<string> { // ... l\u00f3gica real return \"Nome Real\"; } } // Em user.controller.test.ts import { UserService } from './user.service'; import { jest } from '@jest/globals'; // Mocka o m\u00f3dulo inteiro jest.mock('./user.service'); // Cria uma vers\u00e3o tipada da classe mockada const MockedUserService = UserService as jest.MockedClass<typeof UserService>; // Teste it('should return user name', async () => { // O TS sabe que `mock.instances[0].getUserName` existe e \u00e9 um mock MockedUserService.prototype.getUserName.mockResolvedValue(\"Nome Mockado\"); const serviceInstance = new UserService(); const name = await serviceInstance.getUserName('1'); expect(name).toBe(\"Nome Mockado\"); });","title":"Pr\u00e1tica Guiada (Passo a Passo)"},{"location":"Ts/Semana4/#exercicios-praticos-niveis-crescentes_3","text":"N\u00edvel 1: B\u00e1sico Crie uma interface INotifier com um m\u00e9todo notify(message: string) . Crie um mock simples para esta interface em um teste, garantindo que o mock satisfa\u00e7a a interface. Ver Solu\u00e7\u00e3o --- // Interface original interface INotifier { notify(message: string): void; } // Teste describe('Notifier Test', () => { it('should be called with the correct message', () => { // O mock \u00e9 tipado como a interface const mockNotifier: INotifier = { notify: jest.fn(), // jest.fn() cria uma fun\u00e7\u00e3o mock }; // Simula o uso do notifier mockNotifier.notify(\"hello\"); expect(mockNotifier.notify).toHaveBeenCalledWith(\"hello\"); }); }); N\u00edvel 2: Intermedi\u00e1rio Crie uma \"mock factory\" para um objeto User . A factory deve ser uma fun\u00e7\u00e3o createMockUser(overrides: Partial<User>): User que cria um usu\u00e1rio padr\u00e3o e permite sobrescrever propriedades espec\u00edficas para cada teste. Ver Solu\u00e7\u00e3o --- interface User { id: string; name: string; email: string; isAdmin: boolean; } function createMockUser(overrides?: Partial<User>): User { const defaultUser: User = { id: 'user-1', name: 'Usu\u00e1rio Padr\u00e3o', email: 'default@test.com', isAdmin: false, }; return { ...defaultUser, ...overrides }; } // Teste describe('Mock User Factory', () => { it('should create a default user', () => { const user = createMockUser(); expect(user.name).toBe('Usu\u00e1rio Padr\u00e3o'); }); it('should override properties', () => { const adminUser = createMockUser({ name: 'Admin', isAdmin: true }); expect(adminUser.name).toBe('Admin'); expect(adminUser.isAdmin).toBe(true); }); }); N\u00edvel 3: Avan\u00e7ado Usando uma ferramenta como expect-type (ou apenas com coment\u00e1rios, se n\u00e3o estiver configurada), escreva um teste de tipo para garantir que uma fun\u00e7\u00e3o add(a: number, b: number) n\u00e3o pode ser chamada com strings. Ver Solu\u00e7\u00e3o --- import { expectTypeOf } from 'expect-type'; function add(a: number, b: number): number { return a + b; } // Teste de tipo test('type tests for add function', () => { // Verifica se a fun\u00e7\u00e3o aceita n\u00fameros expectTypeOf(add).toBeCallableWith(1, 2); // Verifica se a fun\u00e7\u00e3o N\u00c3O aceita strings expectTypeOf(add).not.toBeCallableWith('1', '2'); // Verifica o tipo de retorno expectTypeOf(add).returns.toBeNumber(); }); **Solu\u00e7\u00e3o sem biblioteca (usando coment\u00e1rios de erro esperado):** function add(a: number, b: number): number { return a + b; } // @ts-expect-error - Testando que isso deve dar um erro de tipo add('1', '2'); const result = add(1, 2); // @ts-expect-error - Testando que o resultado n\u00e3o \u00e9 uma string const resultIsString: string = result;","title":"Exerc\u00edcios Pr\u00e1ticos (N\u00edveis Crescentes)"},{"location":"Ts/Semana4/#checklist-do-dia_3","text":"[ ] Criei um mock tipado para uma interface. [ ] Usei jest.MockedClass para mockar uma classe. [ ] Criei uma factory para gerar mocks consistentes. [ ] Entendi como testar a corre\u00e7\u00e3o de tipos, n\u00e3o apenas de valores.","title":"Checklist do Dia"},{"location":"Ts/Semana4/#dia-26-performance-e-optimization","text":"","title":"Dia 26: Performance e Optimization"},{"location":"Ts/Semana4/#foco-do-dia_4","text":"Entender como tipos complexos podem impactar a performance do compilador TypeScript e aprender t\u00e9cnicas para otimiz\u00e1-los.","title":"Foco do Dia"},{"location":"Ts/Semana4/#leitura-e-teoria-aprofundada_4","text":"Custo da Tipagem : Tipos muito complexos, especialmente os recursivos ou que geram uni\u00f5es muito grandes, podem deixar o tsc (compilador do TypeScript) e o IntelliSense lentos. An\u00e1lise de Performance : O compilador do TypeScript tem flags para ajudar a diagnosticar problemas de performance, como --diagnostics e --generateTrace . T\u00e9cnicas de Otimiza\u00e7\u00e3o : Evitar Recurs\u00e3o Infinita : Cuidado com tipos recursivos que n\u00e3o t\u00eam um caso base claro. Interfaces vs. Types : Interfaces s\u00e3o geralmente melhores para objetos, pois s\u00e3o extens\u00edveis e podem ser ligeiramente mais perform\u00e1ticas em alguns casos devido \u00e0 forma como s\u00e3o cacheadas internamente. Simplificar Tipos Condicionais : Tente quebrar tipos condicionais complexos em tipos auxiliares menores. Adiar Computa\u00e7\u00e3o de Tipos : Em vez de um tipo que calcula tudo de uma vez, use um tipo gen\u00e9rico que \u00e9 resolvido apenas quando usado.","title":"Leitura e Teoria (Aprofundada)"},{"location":"Ts/Semana4/#documentacao-essencial_4","text":"TypeScript Performance Wiki","title":"Documenta\u00e7\u00e3o Essencial"},{"location":"Ts/Semana4/#pratica-guiada-passo-a-passo_4","text":"Exemplo: Tipo Recursivo que Pode Ser Lento // Este tipo pode ser lento se a profundidade for grande type DeeplyNested<T> = { content: T; next?: DeeplyNested<T> }; // Uma alternativa pode ser limitar a profundidade, se poss\u00edvel type LimitedDepth<T, D extends number> = D extends 0 ? T : { content: T; next?: LimitedDepth<T, any /* D-1 */> }; // (A matem\u00e1tica de tipos para subtrair 1 \u00e9 complexa, mas a ideia \u00e9 limitar a recurs\u00e3o) Exemplo: Simplificando Uni\u00f5es Grandes // Lento: Gera uma uni\u00e3o de 1000 tipos literais type Thousand = 1 | 2 | 3 | ... | 1000; // Mais perform\u00e1tico: Usa um tipo mais geral e valida em tempo de execu\u00e7\u00e3o type SmallNumber = number & { __brand: 'SmallNumber' }; function createSmallNumber(n: number): SmallNumber | null { if (n > 0 && n <= 1000) return n as SmallNumber; return null; }","title":"Pr\u00e1tica Guiada (Passo a Passo)"},{"location":"Ts/Semana4/#exercicios-praticos-niveis-crescentes_4","text":"N\u00edvel 1: B\u00e1sico Refatore um tipo que usa type para um objeto para usar interface . Explique por que interface pode ser prefer\u00edvel para objetos que podem ser estendidos. Ver Solu\u00e7\u00e3o --- // Antes type UserType = { id: number; name: string; }; // Depois (Refatorado) interface UserInterface { id: number; name: string; } // Interfaces podem ser estendidas por outras interfaces e aumentadas (module augmentation). // Isso as torna mais flex\u00edveis para objetos, especialmente em APIs p\u00fablicas. interface AdminUser extends UserInterface { permissions: string[]; } N\u00edvel 2: Intermedi\u00e1rio Dado um tipo ComplexMappedType que faz v\u00e1rias opera\u00e7\u00f5es, quebre-o em tipos utilit\u00e1rios menores e mais leg\u00edveis. Ver Solu\u00e7\u00e3o --- interface Props { name: string; age: number; onNameChange: (name: string) => void; onAgeChange: (age: number) => void; } // Antes: Um tipo monol\u00edtico type CallbacksOnlyBefore<T> = { [K in keyof T as T[K] extends (...args: any[]) => any ? K : never]: T[K] }; // Depois: Refatorado em tipos menores // 1. Pega as chaves cujos valores s\u00e3o fun\u00e7\u00f5es type FunctionKeys<T> = { [K in keyof T]: T[K] extends (...args: any[]) => any ? K : never }[keyof T]; // 2. Usa Pick para criar o tipo final type CallbacksOnlyAfter<T> = Pick<T, FunctionKeys<T>>; // Teste type PropCallbacks = CallbacksOnlyAfter<Props>; // { onNameChange: (name: string) => void; onAgeChange: (age: number) => void; } N\u00edvel 3: Avan\u00e7ado Crie um tipo Path<T> que gera todas as chaves de um objeto aninhado como uma string com pontos (ex: 'details.address.city' ). Este \u00e9 um tipo inerentemente recursivo e pesado. Pense em como voc\u00ea poderia otimiz\u00e1-lo ou quais seriam seus gargalos de performance. Ver Solu\u00e7\u00e3o --- // Este tipo \u00e9 conhecido por ser pesado e pode causar lentid\u00e3o no compilador // com objetos muito grandes ou profundos. type Path<T, K extends keyof T = keyof T> = K extends string ? T[K] extends Record<string, any> ? `${K}.${Path<T[K]>}` | K : K : never; // Teste interface UserProfile { id: number; details: { name: string; address: { street: string; city: string; } } } type UserProfilePaths = Path<UserProfile>; // \"id\" | \"details\" | \"details.name\" | \"details.address\" | \"details.address.street\" | \"details.address.city\" /* Otimiza\u00e7\u00e3o/Gargalos: 1. Profundidade da Recurs\u00e3o: A principal causa de lentid\u00e3o. Uma otimiza\u00e7\u00e3o seria adicionar um par\u00e2metro de profundidade para limitar a recurs\u00e3o. 2. Largura do Objeto: Muitos campos em cada n\u00edvel aumentam o n\u00famero de uni\u00f5es geradas. 3. Tipos Condicionais: Cada verifica\u00e7\u00e3o `T[K] extends Record<string, any>` adiciona custo computacional. Uma otimiza\u00e7\u00e3o real em um projeto seria talvez n\u00e3o usar este tipo e preferir uma valida\u00e7\u00e3o em tempo de execu\u00e7\u00e3o para caminhos de objetos. */","title":"Exerc\u00edcios Pr\u00e1ticos (N\u00edveis Crescentes)"},{"location":"Ts/Semana4/#checklist-do-dia_4","text":"[ ] Entendi que tipos complexos podem impactar a performance. [ ] Sei a diferen\u00e7a entre interface e type e quando usar cada um. [ ] Refatorei um tipo complexo em tipos auxiliares menores. [ ] Analisei um tipo recursivo e identifiquei seus poss\u00edveis gargalos.","title":"Checklist do Dia"},{"location":"Ts/Semana4/#dia-27-advanced-patterns","text":"","title":"Dia 27: Advanced Patterns"},{"location":"Ts/Semana4/#foco-do-dia_5","text":"Implementar padr\u00f5es de design de software cl\u00e1ssicos (Design Patterns) em TypeScript, aproveitando o sistema de tipos para torn\u00e1-los mais seguros e expressivos.","title":"Foco do Dia"},{"location":"Ts/Semana4/#leitura-e-teoria-aprofundada_5","text":"Builder Pattern : Usado para construir objetos complexos passo a passo. Permite produzir diferentes tipos e representa\u00e7\u00f5es de um objeto usando o mesmo processo de constru\u00e7\u00e3o. Ideal para objetos com muitos par\u00e2metros de configura\u00e7\u00e3o. Factory Pattern : Usado para criar objetos sem expor a l\u00f3gica de cria\u00e7\u00e3o ao cliente. Uma fun\u00e7\u00e3o ou m\u00e9todo \"f\u00e1brica\" decide qual classe concreta instanciar com base em algum par\u00e2metro. Observer Pattern : Usado para criar uma rela\u00e7\u00e3o de um-para-muitos entre objetos. Quando um objeto (o subject ) muda de estado, todos os seus dependentes (os observers ) s\u00e3o notificados e atualizados automaticamente.","title":"Leitura e Teoria (Aprofundada)"},{"location":"Ts/Semana4/#documentacao-essencial_5","text":"Design Patterns (Refactoring Guru)","title":"Documenta\u00e7\u00e3o Essencial"},{"location":"Ts/Semana4/#pratica-guiada-passo-a-passo_5","text":"Exemplo: Observer Pattern // A interface para os observadores interface Observer<T> { update(data: T): void; } // O sujeito que os observadores observam class Subject<T> { private observers = new Set<Observer<T>>(); subscribe(observer: Observer<T>) { this.observers.add(observer); } unsubscribe(observer: Observer<T>) { this.observers.delete(observer); } notify(data: T) { this.observers.forEach(observer => observer.update(data)); } } // Exemplo de uso const newsFeed = new Subject<string>(); const observerA = { update: (data: string) => console.log(`Observer A: ${data}`) }; const observerB = { update: (data: string) => console.log(`Observer B: ${data}`) }; newsFeed.subscribe(observerA); newsFeed.subscribe(observerB); newsFeed.notify(\"Nova not\u00edcia importante!\");","title":"Pr\u00e1tica Guiada (Passo a Passo)"},{"location":"Ts/Semana4/#exercicios-praticos-niveis-crescentes_5","text":"N\u00edvel 1: B\u00e1sico Implemente uma SimpleFactory para criar objetos Logger . A factory deve ter um m\u00e9todo createLogger(type: 'console' | 'file') que retorna uma inst\u00e2ncia de ConsoleLogger ou FileLogger , ambas implementando uma interface ILogger . Ver Solu\u00e7\u00e3o --- interface ILogger { log(message: string): void; } class ConsoleLogger implements ILogger { log(message: string) { console.log(message); } } class FileLogger implements ILogger { log(message: string) { console.log(`File: ${message}`); } } class LoggerFactory { public createLogger(type: 'console' | 'file'): ILogger { if (type === 'file') { return new FileLogger(); } return new ConsoleLogger(); } } // Teste const factory = new LoggerFactory(); const consoleLogger = factory.createLogger('console'); const fileLogger = factory.createLogger('file'); consoleLogger.log(\"Teste console\"); fileLogger.log(\"Teste arquivo\"); N\u00edvel 2: Intermedi\u00e1rio Implemente o Builder Pattern para criar um objeto Pizza . A classe PizzaBuilder deve ter m\u00e9todos como setCheese(cheese: string) , addTopping(topping: string) , e um m\u00e9todo build() que retorna o objeto Pizza final. Ver Solu\u00e7\u00e3o --- class Pizza { public cheese?: string; public toppings: string[] = []; describe(): void { console.log(`Pizza com queijo ${this.cheese} e coberturas: ${this.toppings.join(', ')}`); } } class PizzaBuilder { private pizza: Pizza; constructor() { this.pizza = new Pizza(); } setCheese(cheese: string): this { this.pizza.cheese = cheese; return this; } addTopping(topping: string): this { this.pizza.toppings.push(topping); return this; } build(): Pizza { return this.pizza; } } // Teste const myPizza = new PizzaBuilder() .setCheese('mussarela') .addTopping('calabresa') .addTopping('cebola') .build(); myPizza.describe(); N\u00edvel 3: Avan\u00e7ado Crie um sistema de eventos type-safe usando o Observer Pattern. Crie uma classe EventManager que permite se inscrever ( on ) e emitir ( emit ) eventos. O sistema deve ser tipado de forma que, ao emitir um evento, o payload seja do tipo correto esperado pelos listeners daquele evento. Ver Solu\u00e7\u00e3o --- // Mapeia nomes de eventos para os tipos de seus payloads interface EventMap { 'user:created': { userId: string; name: string; }; 'user:deleted': { userId: string; }; 'product:viewed': { productId: string; }; } type EventKey = keyof EventMap; class EventManager { private listeners: { [K in EventKey]?: ((payload: EventMap[K]) => void)[] } = {}; // Se inscreve em um evento public on<K extends EventKey>(eventName: K, listener: (payload: EventMap[K]) => void): void { if (!this.listeners[eventName]) { this.listeners[eventName] = []; } this.listeners[eventName]?.push(listener); } // Emite um evento public emit<K extends EventKey>(eventName: K, payload: EventMap[K]): void { this.listeners[eventName]?.forEach(listener => listener(payload)); } } // Teste const events = new EventManager(); events.on('user:created', (payload) => { // O tipo de `payload` \u00e9 { userId: string; name: string; } console.log(`Novo usu\u00e1rio criado: ${payload.name} (ID: ${payload.userId})`); }); events.on('user:deleted', (payload) => { // O tipo de `payload` \u00e9 { userId: string; } console.log(`Usu\u00e1rio deletado: ${payload.userId}`); }); events.emit('user:created', { userId: 'u-123', name: 'Lucas' }); events.emit('user:deleted', { userId: 'u-456' }); // events.emit('user:created', { userId: 'u-789' }); // Erro: a propriedade 'name' est\u00e1 faltando.","title":"Exerc\u00edcios Pr\u00e1ticos (N\u00edveis Crescentes)"},{"location":"Ts/Semana4/#checklist-do-dia_5","text":"[ ] Implementei o Factory Pattern para criar objetos. [ ] Implementei o Builder Pattern para construir um objeto complexo. [ ] Implementei o Observer Pattern para notifica\u00e7\u00e3o de eventos. [ ] Usei os recursos de tipo do TypeScript para tornar os padr\u00f5es mais seguros.","title":"Checklist do Dia"},{"location":"Ts/Semana4/#dias-28-30-projeto-final","text":"","title":"Dias 28-30: Projeto Final"},{"location":"Ts/Semana4/#foco-do-projeto","text":"Consolidar todo o conhecimento adquirido ao longo das 4 semanas para planejar, implementar e refinar uma pequena aplica\u00e7\u00e3o ou um componente de sistema complexo. O objetivo \u00e9 aplicar os padr\u00f5es e t\u00e9cnicas aprendidas em um contexto coeso.","title":"Foco do Projeto"},{"location":"Ts/Semana4/#ideia-do-projeto-um-mini-framework-de-formularios-type-safe","text":"Vamos construir um pequeno framework para gerenciar o estado de formul\u00e1rios, inspirado em bibliotecas como Formik ou React Hook Form, mas muito mais simples. Ele ir\u00e1 demonstrar o uso de classes, generics, mapped types, e mais.","title":"Ideia do Projeto: Um Mini-Framework de Formul\u00e1rios Type-Safe"},{"location":"Ts/Semana4/#dia-28-planejamento-e-estrutura","text":"Exerc\u00edcio: Defina os tipos e a classe principal. 1. Crie uma classe FormStore<T extends object> que ser\u00e1 o cora\u00e7\u00e3o do nosso framework. 2. No construtor, ela deve receber um initialValues: T . 3. Ela deve ter propriedades para armazenar os valores ( values: T ), os erros ( errors: FormErrors<T> ) e o estado de \"tocado\" ( touched: FormTouched<T> ). 4. Defina os tipos utilit\u00e1rios FormErrors<T> e FormTouched<T> usando Mapped Types. FormErrors deve ter as mesmas chaves de T , mas com valores string | undefined . FormTouched deve ter valores boolean | undefined . Ver Solu\u00e7\u00e3o --- // Tipos utilit\u00e1rios type FormErrors<T> = { [P in keyof T]?: string; }; type FormTouched<T> = { [P in keyof T]?: boolean; }; class FormStore<T extends object> { public values: T; public errors: FormErrors<T> = {}; public touched: FormTouched<T> = {}; constructor(initialValues: T) { this.values = initialValues; } public getState() { return { values: this.values, errors: this.errors, touched: this.touched, }; } } // Teste da estrutura const form = new FormStore({ name: '', email: '' }); console.log(form.getState());","title":"Dia 28: Planejamento e Estrutura"},{"location":"Ts/Semana4/#dia-29-implementacao-dos-metodos","text":"Exerc\u00edcio: Adicione os m\u00e9todos para interagir com o formul\u00e1rio. 1. Adicione um m\u00e9todo setFieldValue<K extends keyof T>(field: K, value: T[K]): void que atualiza um valor no values . 2. Adicione um m\u00e9todo setFieldTouched<K extends keyof T>(field: K, isTouched: boolean): void . 3. Adicione um m\u00e9todo setErrors(errors: FormErrors<T>): void que substitui o objeto de erros. 4. Adicione um m\u00e9todo de valida\u00e7\u00e3o validate(validationSchema: ValidationSchema<T>): boolean . O validationSchema deve ser um objeto onde cada chave de T tem uma fun\u00e7\u00e3o que recebe o valor do campo e retorna uma string de erro ou undefined . Ver Solu\u00e7\u00e3o --- // Tipos do dia anterior... type FormErrors<T> = { [P in keyof T]?: string; }; type FormTouched<T> = { [P in keyof T]?: boolean; }; // Novo tipo para o esquema de valida\u00e7\u00e3o type ValidationSchema<T> = { [K in keyof T]?: (value: T[K]) => string | undefined; }; class FormStore<T extends object> { public values: T; public errors: FormErrors<T> = {}; public touched: FormTouched<T> = {}; constructor(initialValues: T) { this.values = initialValues; } public setFieldValue<K extends keyof T>(field: K, value: T[K]): void { this.values[field] = value; } public setFieldTouched<K extends keyof T>(field: K, isTouched: boolean = true): void { this.touched[field] = isTouched; } public setErrors(errors: FormErrors<T>): void { this.errors = errors; } public validate(validationSchema: ValidationSchema<T>): boolean { const newErrors: FormErrors<T> = {}; let isValid = true; for (const key in validationSchema) { const validator = validationSchema[key]; if (validator) { const error = validator(this.values[key]); if (error) { newErrors[key] = error; isValid = false; } } } this.setErrors(newErrors); return isValid; } }","title":"Dia 29: Implementa\u00e7\u00e3o dos M\u00e9todos"},{"location":"Ts/Semana4/#dia-30-refinamento-e-uso","text":"Exerc\u00edcio: Use o FormStore para gerenciar um formul\u00e1rio de registro de usu\u00e1rio. 1. Defina a interface UserSignupForm com name , email , e password . 2. Crie uma inst\u00e2ncia do FormStore com os valores iniciais. 3. Crie um ValidationSchema para o formul\u00e1rio (ex: nome \u00e9 obrigat\u00f3rio, email deve conter @ , senha deve ter mais de 6 caracteres). 4. Simule a intera\u00e7\u00e3o do usu\u00e1rio: mude valores, toque em campos e chame a valida\u00e7\u00e3o. Imprima o estado ( values , errors , touched ) no console a cada passo. Ver Solu\u00e7\u00e3o --- // Classe e tipos do dia anterior... // 1. Definir a interface do formul\u00e1rio interface UserSignupForm { name: string; email: string; password: string; } // 2. Criar a inst\u00e2ncia do FormStore const signupForm = new FormStore<UserSignupForm>({ name: '', email: '', password: '', }); // 3. Criar o esquema de valida\u00e7\u00e3o const signupValidationSchema: ValidationSchema<UserSignupForm> = { name: (value) => (value ? undefined : 'Nome \u00e9 obrigat\u00f3rio'), email: (value) => (value.includes('@') ? undefined : 'Email inv\u00e1lido'), password: (value) => (value.length > 6 ? undefined : 'Senha muito curta'), }; // 4. Simular a intera\u00e7\u00e3o console.log(\"Estado Inicial:\", signupForm.errors); // Usu\u00e1rio digita o nome signupForm.setFieldValue('name', 'Lucas'); signupForm.setFieldTouched('name'); // Usu\u00e1rio digita um email inv\u00e1lido e sai do campo signupForm.setFieldValue('email', 'lucas.com'); signupForm.setFieldTouched('email'); // Valida o formul\u00e1rio signupForm.validate(signupValidationSchema); console.log(\"Estado ap\u00f3s valida\u00e7\u00e3o 1:\", signupForm.errors); // { email: 'Email inv\u00e1lido', password: 'Senha muito curta' } // Usu\u00e1rio corrige o email e a senha signupForm.setFieldValue('email', 'lucas@ts.com'); signupForm.setFieldValue('password', '1234567'); // Valida novamente signupForm.validate(signupValidationSchema); console.log(\"Estado ap\u00f3s valida\u00e7\u00e3o 2:\", signupForm.errors); // {}","title":"Dia 30: Refinamento e Uso"},{"location":"Ts/Semana4/#checklist-final","text":"[ ] Planejei a estrutura de uma classe complexa com tipos gen\u00e9ricos. [ ] Usei Mapped Types para criar tipos de estado derivados. [ ] Implementei a l\u00f3gica de neg\u00f3cio em m\u00e9todos de classe. [ ] Usei a classe final para resolver um problema pr\u00e1tico. [ ] Sinto-me confiante para arquitetar aplica\u00e7\u00f5es TypeScript intermedi\u00e1rias.","title":"Checklist Final"},{"location":"Ts/estrutura-plano/","text":"Principais Focos Integrados: Classes e this (Dias 1-2, 8-10, 17) Context binding em cen\u00e1rios reais Method chaining type-safe Abstract classes para arquitetura this parameters para APIs fluentes Elimina\u00e7\u00e3o de any (Dias 3-4, 12, 26) unknown como substituto seguro Type guards customizados Narrowing autom\u00e1tico Branded types para type safety Records e Funcionalidades Nativas (Dias 5, 19-20) Record<K,V> com template literals Utility types avan\u00e7ados ( ReturnType , Parameters , etc.) Const assertions para immutability Dictionary patterns como seu exemplo Progress\u00e3o Natural: Semana 1 : Fundamentos s\u00f3lidos (classes, this , elimina\u00e7\u00e3o de any ) Semana 2 : Conceitos avan\u00e7ados (generics, decorators, conditional types) Semana 3 : Patterns arquiteturais (como seu GetTableDataService ) Semana 4 : Integra\u00e7\u00e3o real (React Hook Form, m\u00f3dulos, projeto final) O plano est\u00e1 estruturado para que ao final dos 30 dias voc\u00ea seja capaz de: Implementar services complexos como o seu GetTableDataService Criar tipagens robustas para forms como RenderMinFareForm Dominar patterns com Record como seu tooltipContent Arquitetar aplica\u00e7\u00f5es sem usar any","title":"Vis\u00e3o Geral"},{"location":"Ts/estrutura-plano/#principais-focos-integrados","text":"","title":"Principais Focos Integrados:"},{"location":"Ts/estrutura-plano/#classes-e-this-dias-1-2-8-10-17","text":"Context binding em cen\u00e1rios reais Method chaining type-safe Abstract classes para arquitetura this parameters para APIs fluentes","title":"Classes e this (Dias 1-2, 8-10, 17)"},{"location":"Ts/estrutura-plano/#eliminacao-de-any-dias-3-4-12-26","text":"unknown como substituto seguro Type guards customizados Narrowing autom\u00e1tico Branded types para type safety","title":"Elimina\u00e7\u00e3o de any (Dias 3-4, 12, 26)"},{"location":"Ts/estrutura-plano/#records-e-funcionalidades-nativas-dias-5-19-20","text":"Record<K,V> com template literals Utility types avan\u00e7ados ( ReturnType , Parameters , etc.) Const assertions para immutability Dictionary patterns como seu exemplo","title":"Records e Funcionalidades Nativas (Dias 5, 19-20)"},{"location":"Ts/estrutura-plano/#progressao-natural","text":"Semana 1 : Fundamentos s\u00f3lidos (classes, this , elimina\u00e7\u00e3o de any ) Semana 2 : Conceitos avan\u00e7ados (generics, decorators, conditional types) Semana 3 : Patterns arquiteturais (como seu GetTableDataService ) Semana 4 : Integra\u00e7\u00e3o real (React Hook Form, m\u00f3dulos, projeto final)","title":"Progress\u00e3o Natural:"},{"location":"Ts/estrutura-plano/#o-plano-esta-estruturado-para-que-ao-final-dos-30-dias-voce-seja-capaz-de","text":"Implementar services complexos como o seu GetTableDataService Criar tipagens robustas para forms como RenderMinFareForm Dominar patterns com Record como seu tooltipContent Arquitetar aplica\u00e7\u00f5es sem usar any","title":"O plano est\u00e1 estruturado para que ao final dos 30 dias voc\u00ea seja capaz de:"},{"location":"Web/Armazenamento/","text":"\ud83d\udcda APOSTILA: ARMAZENAMENTO WEB MODERNO Disciplina: Tecnologias de Armazenamento Client-Side \ud83d\udccb SUM\u00c1RIO localStorage sessionStorage Cookies IndexedDB Cache API (Service Workers) OPFS (Origin Private File System) Projeto Final \ud83c\udfaf OBJETIVOS DE APRENDIZAGEM Ao final desta disciplina, o aluno ser\u00e1 capaz de: Compreender as diferen\u00e7as entre os tipos de storage do navegador Implementar solu\u00e7\u00f5es de armazenamento adequadas para cada cen\u00e1rio Desenvolver aplica\u00e7\u00f5es offline-first Otimizar performance atrav\u00e9s de cache inteligente Trabalhar com grandes volumes de dados no client-side 1. localStorage \ud83d\udcd6 CONCEITOS FUNDAMENTAIS O localStorage \u00e9 uma API de armazenamento web que permite salvar dados no navegador de forma persistente . Os dados permanecem dispon\u00edveis mesmo ap\u00f3s fechar o navegador. Caracter\u00edsticas: Capacidade : ~5-10MB por origem Persist\u00eancia : Permanente (at\u00e9 ser limpo manualmente) Escopo : Por origem (protocolo + dom\u00ednio + porta) Sincronismo : API s\u00edncrona Tipo de dados : Apenas strings Quando usar: Prefer\u00eancias do usu\u00e1rio Configura\u00e7\u00f5es da aplica\u00e7\u00e3o Cache de dados pequenos Estado da aplica\u00e7\u00e3o que deve persistir \ud83d\udd27 IMPLEMENTA\u00c7\u00c3O PR\u00c1TICA Opera\u00e7\u00f5es B\u00e1sicas: // Salvar dados localStorage.setItem('usuario', 'Jo\u00e3o Silva'); localStorage.setItem('configuracoes', JSON.stringify({ tema: 'dark', idioma: 'pt-BR' })); // Recuperar dados const usuario = localStorage.getItem('usuario'); const config = JSON.parse(localStorage.getItem('configuracoes') || '{}'); // Verificar se existe if (localStorage.getItem('token')) { console.log('Usu\u00e1rio logado'); } // Remover item espec\u00edfico localStorage.removeItem('usuario'); // Limpar tudo localStorage.clear(); // Obter n\u00famero de itens console.log(localStorage.length); // Iterar pelos itens for (let i = 0; i < localStorage.length; i++) { const key = localStorage.key(i); const value = localStorage.getItem(key); console.log(key, value); } Service Angular para localStorage: import { Injectable } from '@angular/core'; @Injectable({ providedIn: 'root' }) export class LocalStorageService { setItem(key: string, value: any): void { try { localStorage.setItem(key, JSON.stringify(value)); } catch (error) { console.error('Erro ao salvar no localStorage:', error); } } getItem<T>(key: string): T | null { try { const item = localStorage.getItem(key); return item ? JSON.parse(item) : null; } catch (error) { console.error('Erro ao ler do localStorage:', error); return null; } } removeItem(key: string): void { localStorage.removeItem(key); } clear(): void { localStorage.clear(); } exists(key: string): boolean { return localStorage.getItem(key) !== null; } } \ud83d\udcfa CONTE\u00daDOS PARA ASSISTIR YouTube : \"LocalStorage JavaScript Tutorial\" - Programming with Mosh YouTube : \"Angular LocalStorage Service\" - Academind Curso Online : \"JavaScript Web Storage\" - freeCodeCamp \ud83d\udcda FONTES DE ESTUDO TreinaWeb - LocalStorage vs SessionStorage Angular Training - Storage Guide JSCrambler - Angular Local Storage \ud83d\udcdd EXERC\u00cdCIOS PR\u00c1TICOS Exerc\u00edcio 1 - Sistema de Prefer\u00eancias Crie um sistema que salve as prefer\u00eancias do usu\u00e1rio: Tema (claro/escuro) Idioma preferido Tamanho da fonte Exerc\u00edcio 2 - Carrinho de Compras Implemente um carrinho que persista entre sess\u00f5es: Adicionar/remover produtos Calcular total Manter estado ap\u00f3s fechar o navegador Exerc\u00edcio 3 - Hist\u00f3rico de Pesquisas Desenvolva um sistema que armazene: \u00daltimas 10 pesquisas do usu\u00e1rio Data/hora de cada pesquisa Funcionalidade de limpar hist\u00f3rico 2. sessionStorage \ud83d\udcd6 CONCEITOS FUNDAMENTAIS O sessionStorage funciona de forma similar ao localStorage, mas os dados s\u00e3o tempor\u00e1rios e existem apenas durante a sess\u00e3o da aba do navegador. Caracter\u00edsticas: Capacidade : ~5-10MB por origem Persist\u00eancia : Apenas durante a sess\u00e3o da aba Escopo : Por aba do navegador Sincronismo : API s\u00edncrona Tipo de dados : Apenas strings Quando usar: Dados tempor\u00e1rios de formul\u00e1rios Estado da navega\u00e7\u00e3o Informa\u00e7\u00f5es sens\u00edveis que n\u00e3o devem persistir Dados de sess\u00e3o de usu\u00e1rio \ud83d\udd27 IMPLEMENTA\u00c7\u00c3O PR\u00c1TICA Opera\u00e7\u00f5es B\u00e1sicas: // API id\u00eantica ao localStorage sessionStorage.setItem('sessaoAtual', JSON.stringify({ usuario: 'Jo\u00e3o', inicioSessao: new Date().getTime(), paginaAtual: 'dashboard' })); // Recuperar dados da sess\u00e3o const sessao = JSON.parse(sessionStorage.getItem('sessaoAtual') || '{}'); // Verificar tempo de sess\u00e3o const tempoSessao = Date.now() - sessao.inicioSessao; if (tempoSessao > 30 * 60 * 1000) { // 30 minutos console.log('Sess\u00e3o expirada'); sessionStorage.clear(); } Service Angular para sessionStorage: import { Injectable } from '@angular/core'; @Injectable({ providedIn: 'root' }) export class SessionStorageService { private readonly SESSION_TIMEOUT = 30 * 60 * 1000; // 30 minutos setItem(key: string, value: any): void { try { const data = { value, timestamp: Date.now() }; sessionStorage.setItem(key, JSON.stringify(data)); } catch (error) { console.error('Erro ao salvar no sessionStorage:', error); } } getItem<T>(key: string): T | null { try { const item = sessionStorage.getItem(key); if (!item) return null; const data = JSON.parse(item); // Verificar se n\u00e3o expirou if (Date.now() - data.timestamp > this.SESSION_TIMEOUT) { this.removeItem(key); return null; } return data.value; } catch (error) { console.error('Erro ao ler do sessionStorage:', error); return null; } } removeItem(key: string): void { sessionStorage.removeItem(key); } clear(): void { sessionStorage.clear(); } } \ud83d\udcfa CONTE\u00daDOS PARA ASSISTIR YouTube : \"SessionStorage vs LocalStorage\" - Web Dev Simplified YouTube : \"Angular Session Management\" - Codevolution Tutorial : \"Browser Storage Comparison\" - Traversy Media \ud83d\udcda FONTES DE ESTUDO TechSpawn - Compara\u00e7\u00e3o de Storage NgGirls - Tutorial Pr\u00e1tico \ud83d\udcdd EXERC\u00cdCIOS PR\u00c1TICOS Exerc\u00edcio 1 - Formul\u00e1rio Multipasso Implemente um wizard que salve o progresso: Salvar dados a cada passo Restaurar se usu\u00e1rio voltar \u00e0 p\u00e1gina Limpar ao concluir Exerc\u00edcio 2 - Estado de Navega\u00e7\u00e3o Crie um sistema que mantenha: Filtros aplicados em uma listagem P\u00e1gina atual de pagina\u00e7\u00e3o Ordena\u00e7\u00e3o selecionada 3. Cookies \ud83d\udcd6 CONCEITOS FUNDAMENTAIS Cookies s\u00e3o pequenos arquivos de texto que o navegador armazena e envia automaticamente para o servidor a cada requisi\u00e7\u00e3o HTTP. Caracter\u00edsticas: Capacidade : ~4KB por cookie Persist\u00eancia : Configur\u00e1vel (sess\u00e3o ou data espec\u00edfica) Escopo : Configur\u00e1vel (dom\u00ednio e path) Automatismo : Enviados automaticamente ao servidor Seguran\u00e7a : Op\u00e7\u00f5es HttpOnly, Secure, SameSite Quando usar: Autentica\u00e7\u00e3o e sess\u00f5es Rastreamento de usu\u00e1rio Personaliza\u00e7\u00e3o baseada em servidor Conformidade com LGPD/GDPR \ud83d\udd27 IMPLEMENTA\u00c7\u00c3O PR\u00c1TICA Manipula\u00e7\u00e3o B\u00e1sica: // Criar cookie simples document.cookie = \"usuario=joao\"; // Cookie com expira\u00e7\u00e3o const dataExpiracao = new Date(); dataExpiracao.setTime(dataExpiracao.getTime() + (24 * 60 * 60 * 1000)); // 24 horas document.cookie = `sessao=abc123; expires=${dataExpiracao.toUTCString()}; path=/`; // Cookie seguro document.cookie = \"token=xyz789; Secure; HttpOnly; SameSite=Strict\"; // Fun\u00e7\u00e3o para ler cookie function getCookie(nome) { const nomeEQ = nome + \"=\"; const cookies = document.cookie.split(';'); for(let i = 0; i < cookies.length; i++) { let cookie = cookies[i]; while (cookie.charAt(0) === ' ') { cookie = cookie.substring(1, cookie.length); } if (cookie.indexOf(nomeEQ) === 0) { return cookie.substring(nomeEQ.length, cookie.length); } } return null; } // Fun\u00e7\u00e3o para deletar cookie function deleteCookie(nome) { document.cookie = nome + \"=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;\"; } Service Angular para Cookies: import { Injectable } from '@angular/core'; export interface CookieOptions { expires?: Date; path?: string; domain?: string; secure?: boolean; sameSite?: 'Strict' | 'Lax' | 'None'; } @Injectable({ providedIn: 'root' }) export class CookieService { set(name: string, value: string, options: CookieOptions = {}): void { let cookie = `${encodeURIComponent(name)}=${encodeURIComponent(value)}`; if (options.expires) { cookie += `; expires=${options.expires.toUTCString()}`; } if (options.path) { cookie += `; path=${options.path}`; } if (options.domain) { cookie += `; domain=${options.domain}`; } if (options.secure) { cookie += '; Secure'; } if (options.sameSite) { cookie += `; SameSite=${options.sameSite}`; } document.cookie = cookie; } get(name: string): string | null { const nameEQ = encodeURIComponent(name) + \"=\"; const cookies = document.cookie.split(';'); for (let cookie of cookies) { cookie = cookie.trim(); if (cookie.indexOf(nameEQ) === 0) { return decodeURIComponent(cookie.substring(nameEQ.length)); } } return null; } delete(name: string, path: string = '/'): void { this.set(name, '', { expires: new Date(0), path: path }); } exists(name: string): boolean { return this.get(name) !== null; } getAll(): { [key: string]: string } { const cookies: { [key: string]: string } = {}; if (document.cookie) { document.cookie.split(';').forEach(cookie => { const [name, value] = cookie.trim().split('='); cookies[decodeURIComponent(name)] = decodeURIComponent(value || ''); }); } return cookies; } } \ud83d\udcfa CONTE\u00daDOS PARA ASSISTIR YouTube : \"HTTP Cookies Explained\" - Hussein Nasser YouTube : \"Cookie vs LocalStorage vs SessionStorage\" - Web Dev Simplified Curso : \"Web Security & Cookies\" - OWASP \ud83d\udcda FONTES DE ESTUDO GeeksforGeeks - Diferen\u00e7as entre Storage DigitalOcean - Introdu\u00e7\u00e3o ao Storage \ud83d\udcdd EXERC\u00cdCIOS PR\u00c1TICOS Exerc\u00edcio 1 - Sistema de Login Implemente autentica\u00e7\u00e3o com cookies: Cookie de sess\u00e3o Lembrar usu\u00e1rio (persistent cookie) Logout seguro Exerc\u00edcio 2 - Banner de Cookies (LGPD) Crie um sistema de consentimento: Banner de aceita\u00e7\u00e3o Categoriza\u00e7\u00e3o de cookies Configura\u00e7\u00f5es de privacidade 4. IndexedDB \ud83d\udcd6 CONCEITOS FUNDAMENTAIS IndexedDB \u00e9 um banco de dados NoSQL completo que roda no navegador, permitindo armazenar grandes quantidades de dados estruturados. Caracter\u00edsticas: Capacidade : Limitada pelo espa\u00e7o em disco Persist\u00eancia : Permanente Tipo de dados : Objetos JavaScript complexos Transa\u00e7\u00f5es : Suporte completo ACID \u00cdndices : Consultas r\u00e1pidas Ass\u00edncrono : API baseada em Promises/Events Quando usar: Aplica\u00e7\u00f5es offline-first Cache de dados grandes Sincroniza\u00e7\u00e3o de dados Armazenamento de arquivos/blobs \ud83d\udd27 IMPLEMENTA\u00c7\u00c3O PR\u00c1TICA Configura\u00e7\u00e3o B\u00e1sica: // Abrir banco de dados function abrirBanco() { return new Promise((resolve, reject) => { const request = indexedDB.open('MeuApp', 1); request.onerror = () => reject(request.error); request.onsuccess = () => resolve(request.result); request.onupgradeneeded = (event) => { const db = event.target.result; // Criar object store if (!db.objectStoreNames.contains('usuarios')) { const store = db.createObjectStore('usuarios', { keyPath: 'id', autoIncrement: true }); // Criar \u00edndices store.createIndex('email', 'email', { unique: true }); store.createIndex('nome', 'nome', { unique: false }); } }; }); } // Opera\u00e7\u00f5es CRUD class UsuarioRepository { constructor(db) { this.db = db; } async criar(usuario) { const transaction = this.db.transaction(['usuarios'], 'readwrite'); const store = transaction.objectStore('usuarios'); return store.add(usuario); } async buscarPorId(id) { const transaction = this.db.transaction(['usuarios'], 'readonly'); const store = transaction.objectStore('usuarios'); return store.get(id); } async buscarPorEmail(email) { const transaction = this.db.transaction(['usuarios'], 'readonly'); const store = transaction.objectStore('usuarios'); const index = store.index('email'); return index.get(email); } async listarTodos() { const transaction = this.db.transaction(['usuarios'], 'readonly'); const store = transaction.objectStore('usuarios'); return store.getAll(); } async atualizar(usuario) { const transaction = this.db.transaction(['usuarios'], 'readwrite'); const store = transaction.objectStore('usuarios'); return store.put(usuario); } async deletar(id) { const transaction = this.db.transaction(['usuarios'], 'readwrite'); const store = transaction.objectStore('usuarios'); return store.delete(id); } } Usando Dexie.js (Wrapper Simplificado): import Dexie, { Table } from 'dexie'; export interface Usuario { id?: number; nome: string; email: string; idade: number; criadoEm: Date; } export class AppDatabase extends Dexie { usuarios!: Table<Usuario>; constructor() { super('AppDatabase'); this.version(1).stores({ usuarios: '++id, nome, email, idade, criadoEm' }); } } export const db = new AppDatabase(); // Service Angular com Dexie import { Injectable } from '@angular/core'; @Injectable({ providedIn: 'root' }) export class UsuarioService { async criarUsuario(usuario: Omit<Usuario, 'id'>): Promise<number> { return await db.usuarios.add({ ...usuario, criadoEm: new Date() }); } async buscarUsuarios(): Promise<Usuario[]> { return await db.usuarios.orderBy('nome').toArray(); } async buscarPorEmail(email: string): Promise<Usuario | undefined> { return await db.usuarios.where('email').equals(email).first(); } async atualizarUsuario(id: number, dados: Partial<Usuario>): Promise<number> { return await db.usuarios.update(id, dados); } async deletarUsuario(id: number): Promise<void> { await db.usuarios.delete(id); } async pesquisarPorNome(termo: string): Promise<Usuario[]> { return await db.usuarios .where('nome') .startsWithIgnoreCase(termo) .toArray(); } } \ud83d\udcfa CONTE\u00daDOS PARA ASSISTIR YouTube : \"IndexedDB Crash Course\" - Traversy Media YouTube : \"Dexie.js Tutorial\" - The Net Ninja Curso : \"Offline First Web Apps\" - Google Developers \ud83d\udcda FONTES DE ESTUDO FreeCodeCamp - Guia Completo IndexedDB Telerik - Guia para Iniciantes Dexie.js - Tutorial Angular \ud83d\udcdd EXERC\u00cdCIOS PR\u00c1TICOS Exerc\u00edcio 1 - Sistema de Tarefas Offline Desenvolva um todo app que funcione offline: CRUD completo de tarefas Categorias e tags Busca por texto Sincroniza\u00e7\u00e3o quando online Exerc\u00edcio 2 - Cache de Dados da API Implemente um sistema de cache inteligente: Armazenar respostas da API Refresh autom\u00e1tico Estrat\u00e9gia de invalida\u00e7\u00e3o 5. Cache API (Service Workers) \ud83d\udcd6 CONCEITOS FUNDAMENTAIS A Cache API, junto com Service Workers, permite criar aplica\u00e7\u00f5es web que funcionam offline interceptando requisi\u00e7\u00f5es de rede e servindo conte\u00fado cacheado. Caracter\u00edsticas: Capacidade : Limitada pelo espa\u00e7o em disco Persist\u00eancia : Permanente (at\u00e9 ser limpa) Escopo : Controlado por Service Worker Estrat\u00e9gias : Cache-first, Network-first, etc. Atualiza\u00e7\u00f5es : Controle granular de versioning Quando usar: Progressive Web Apps (PWA) Aplica\u00e7\u00f5es offline-first Cache de recursos est\u00e1ticos Otimiza\u00e7\u00e3o de performance \ud83d\udd27 IMPLEMENTA\u00c7\u00c3O PR\u00c1TICA Service Worker B\u00e1sico: // sw.js const CACHE_NAME = 'meu-app-v1'; const urlsToCache = [ '/', '/styles/main.css', '/scripts/app.js', '/images/logo.png' ]; // Instala\u00e7\u00e3o - cachear recursos self.addEventListener('install', (event) => { event.waitUntil( caches.open(CACHE_NAME) .then((cache) => { console.log('Cache aberto'); return cache.addAll(urlsToCache); }) ); }); // Interceptar requisi\u00e7\u00f5es self.addEventListener('fetch', (event) => { event.respondWith( caches.match(event.request) .then((response) => { // Cache hit - retornar resposta if (response) { return response; } // Cache miss - fazer requisi\u00e7\u00e3o return fetch(event.request) .then((response) => { const responseClone = response.clone(); caches.open(CACHE_NAME) .then((cache) => { cache.put(event.request, responseClone); }); return response; }); }) ); }); // Atualiza\u00e7\u00e3o - limpar caches antigos self.addEventListener('activate', (event) => { event.waitUntil( caches.keys().then((cacheNames) => { return Promise.all( cacheNames.map((cacheName) => { if (cacheName !== CACHE_NAME) { console.log('Deletando cache antigo:', cacheName); return caches.delete(cacheName); } }) ); }) ); }); Estrat\u00e9gias de Cache: // Cache First - para recursos est\u00e1ticos async function cacheFirst(request) { const cachedResponse = await caches.match(request); return cachedResponse || fetch(request); } // Network First - para dados din\u00e2micos async function networkFirst(request) { try { const response = await fetch(request); const cache = await caches.open(CACHE_NAME); cache.put(request, response.clone()); return response; } catch (error) { const cachedResponse = await caches.match(request); return cachedResponse || new Response('Offline', { status: 503 }); } } // Stale While Revalidate - melhor UX async function staleWhileRevalidate(request) { const cachedResponse = await caches.match(request); const fetchPromise = fetch(request).then((response) => { const cache = caches.open(CACHE_NAME); cache.then((c) => c.put(request, response.clone())); return response; }); return cachedResponse || fetchPromise; } Angular Service Worker: // Adicionar ao projeto Angular // ng add @angular/pwa // Configura\u00e7\u00e3o ngsw-config.json /* { \"index\": \"/index.html\", \"assetGroups\": [ { \"name\": \"app\", \"installMode\": \"prefetch\", \"resources\": { \"files\": [ \"/favicon.ico\", \"/index.html\", \"/manifest.webmanifest\", \"/*.css\", \"/*.js\" ] } } ], \"dataGroups\": [ { \"name\": \"api-cache\", \"urls\": [\"/api/**\"], \"cacheConfig\": { \"strategy\": \"freshness\", \"maxSize\": 100, \"maxAge\": \"1d\", \"timeout\": \"5s\" } } ] } */ // Service para interagir com SW import { Injectable } from '@angular/core'; import { SwUpdate } from '@angular/service-worker'; @Injectable({ providedIn: 'root' }) export class PwaService { constructor(private swUpdate: SwUpdate) { if (swUpdate.isEnabled) { swUpdate.available.subscribe(() => { if (confirm('Nova vers\u00e3o dispon\u00edvel. Atualizar?')) { window.location.reload(); } }); } } checkForUpdate(): void { if (this.swUpdate.isEnabled) { this.swUpdate.checkForUpdate(); } } } \ud83d\udcfa CONTE\u00daDOS PARA ASSISTIR YouTube : \"Service Workers Explained\" - Google Chrome Developers YouTube : \"Building PWAs with Angular\" - Angular Curso : \"Progressive Web Apps Training\" - Google Developers \ud83d\udcda FONTES DE ESTUDO Angular University - Service Worker Guide CodeZup - Practical Guide Web.dev - Service Worker Caching \ud83d\udcdd EXERC\u00cdCIOS PR\u00c1TICOS Exerc\u00edcio 1 - PWA Completa Transforme uma aplica\u00e7\u00e3o em PWA: Service Worker customizado Cache de recursos e APIs Funcionalidade offline Installable app Exerc\u00edcio 2 - Cache Inteligente Implemente diferentes estrat\u00e9gias: Cache-first para CSS/JS Network-first para dados Background sync para formul\u00e1rios 6. OPFS (Origin Private File System) \ud83d\udcd6 CONCEITOS FUNDAMENTAIS OPFS \u00e9 uma API moderna que permite aplica\u00e7\u00f5es web criar, ler e manipular arquivos em um sistema de arquivos virtual privado por origem. Caracter\u00edsticas: Capacidade : Limitada pelo espa\u00e7o em disco dispon\u00edvel Performance : Acesso byte-a-byte otimizado Privacidade : N\u00e3o vis\u00edvel ao usu\u00e1rio, privado por origem Seguran\u00e7a : N\u00e3o requer permiss\u00f5es do usu\u00e1rio Streaming : Suporte a manipula\u00e7\u00e3o de arquivos grandes Quando usar: Manipula\u00e7\u00e3o de arquivos grandes Bancos de dados personalizados Cache de alta performance Aplica\u00e7\u00f5es que precisam de I/O intensivo \ud83d\udd27 IMPLEMENTA\u00c7\u00c3O PR\u00c1TICA Opera\u00e7\u00f5es B\u00e1sicas: // Verificar suporte if ('storage' in navigator && 'getDirectory' in navigator.storage) { console.log('OPFS suportado'); } else { console.log('OPFS n\u00e3o suportado'); } // Obter diret\u00f3rio raiz async function obterDiretorioRaiz() { return await navigator.storage.getDirectory(); } // Criar arquivo async function criarArquivo(nome, conteudo) { const root = await navigator.storage.getDirectory(); const fileHandle = await root.getFileHandle(nome, { create: true }); const writable = await fileHandle.createWritable(); await writable.write(conteudo); await writable.close(); return fileHandle; } // Ler arquivo async function lerArquivo(nome) { const root = await navigator.storage.getDirectory(); const fileHandle = await root.getFileHandle(nome); const file = await fileHandle.getFile(); return await file.text(); } // Listar arquivos async function listarArquivos() { const root = await navigator.storage.getDirectory(); const arquivos = []; for await (const [nome, handle] of root.entries()) { arquivos.push({ nome, tipo: handle.kind, handle }); } return arquivos; } // Deletar arquivo async function deletarArquivo(nome) { const root = await navigator.storage.getDirectory(); await root.removeEntry(nome); } Manipula\u00e7\u00e3o Avan\u00e7ada com Streams: // Acesso s\u00edncrono (apenas em Web Workers) async function accessoSincrono() { const root = await navigator.storage.getDirectory(); const fileHandle = await root.getFileHandle('dados.db', { create: true }); // Criar handle de acesso s\u00edncrono const syncHandle = await fileHandle.createSyncAccessHandle(); // Escrever dados const encoder = new TextEncoder(); const data = encoder.encode('Dados importantes'); syncHandle.write(data, { at: 0 }); // Ler dados const buffer = new ArrayBuffer(1024); const bytesRead = syncHandle.read(buffer, { at: 0 }); const decoder = new TextDecoder(); const texto = decoder.decode(buffer.slice(0, bytesRead)); // Obter tamanho do arquivo const tamanho = syncHandle.getSize(); // Truncar arquivo syncHandle.truncate(100); // Fechar handle syncHandle.close(); } // Sistema de arquivos hier\u00e1rquico async function estruturaHierarquica() { const root = await navigator.storage.getDirectory(); // Criar diret\u00f3rio const pastaDados = await root.getDirectoryHandle('dados', { create: true }); const pastaImagens = await root.getDirectoryHandle('imagens', { create: true }); // Criar arquivo em subdiret\u00f3rio const arquivo = await pastaDados.getFileHandle('config.json', { create: true }); const writable = await arquivo.createWritable(); await writable.write(JSON.stringify({ versao: '1.0', configuracoes: { tema: 'dark', idioma: 'pt-BR' } })); await writable.close(); } Service Angular para OPFS: import { Injectable } from '@angular/core'; export interface ArquivoOPFS { nome: string; tamanho: number; tipo: 'file' | 'directory'; ultimaModificacao: Date; } @Injectable({ providedIn: 'root' }) export class OpfsService { private rootDirectoryHandle: FileSystemDirectoryHandle | null = null; async inicializar(): Promise<boolean> { if ('storage' in navigator && 'getDirectory' in navigator.storage) { this.rootDirectoryHandle = await navigator.storage.getDirectory(); return true; } return false; } async salvarArquivo(caminho: string, conteudo: string | ArrayBuffer): Promise<void> { if (!this.rootDirectoryHandle) { throw new Error('OPFS n\u00e3o inicializado'); } const fileHandle = await this.rootDirectoryHandle.getFileHandle(caminho, { create: true }); const writable = await fileHandle.createWritable(); await writable.write(conteudo); await writable.close(); } async lerArquivo(caminho: string): Promise<string> { if (!this.rootDirectoryHandle) { throw new Error('OPFS n\u00e3o inicializado'); } const fileHandle = await this.rootDirectoryHandle.getFileHandle(caminho); const file = await fileHandle.getFile(); return await file.text(); } async lerArquivoBinario(caminho: string): Promise<ArrayBuffer> { if (!this.rootDirectoryHandle) { throw new Error('OPFS n\u00e3o inicializado'); } const fileHandle = await this.rootDirectoryHandle.getFileHandle(caminho); const file = await fileHandle.getFile(); return await file.arrayBuffer(); } async listarArquivos(diretorio: string = ''): Promise<ArquivoOPFS[]> { if (!this.rootDirectoryHandle) { throw new Error('OPFS n\u00e3o inicializado'); } let currentDir = this.rootDirectoryHandle; if (diretorio) { currentDir = await this.rootDirectoryHandle.getDirectoryHandle(diretorio); } const arquivos: ArquivoOPFS[] = []; for await (const [nome, handle] of currentDir.entries()) { if (handle.kind === 'file') { const file = await (handle as FileSystemFileHandle).getFile(); arquivos.push({ nome, tamanho: file.size, tipo: 'file', ultimaModificacao: new Date(file.lastModified) }); } else { arquivos.push({ nome, tamanho: 0, tipo: 'directory', ultimaModificacao: new Date() }); } } return arquivos; } async criarDiretorio(nome: string): Promise<void> { if (!this.rootDirectoryHandle) { throw new Error('OPFS n\u00e3o inicializado'); } await this.rootDirectoryHandle.getDirectoryHandle(nome, { create: true }); } async deletarArquivo(caminho: string): Promise<void> { if (!this.rootDirectoryHandle) { throw new Error('OPFS n\u00e3o inicializado'); } await this.rootDirectoryHandle.removeEntry(caminho); } async obterTamanhoArquivo(caminho: string): Promise<number> { if (!this.rootDirectoryHandle) { throw new Error('OPFS n\u00e3o inicializado'); } const fileHandle = await this.rootDirectoryHandle.getFileHandle(caminho); const file = await fileHandle.getFile(); return file.size; } async arquivoExiste(caminho: string): Promise<boolean> { if (!this.rootDirectoryHandle) { return false; } try { await this.rootDirectoryHandle.getFileHandle(caminho); return true; } catch { return false; } } } Exemplo Pr\u00e1tico - Editor de Arquivos: import { Component, OnInit } from '@angular/core'; import { OpfsService } from './opfs.service'; @Component({ selector: 'app-editor-arquivos', template: ` <div class=\"editor-container\"> <div class=\"sidebar\"> <h3>Arquivos</h3> <button (click)=\"criarNovoArquivo()\">Novo Arquivo</button> <ul> <li *ngFor=\"let arquivo of arquivos\" (click)=\"abrirArquivo(arquivo.nome)\" [class.selected]=\"arquivoAtual === arquivo.nome\"> {{ arquivo.nome }} ({{ arquivo.tamanho }} bytes) </li> </ul> </div> <div class=\"editor\"> <div class=\"toolbar\"> <input [(ngModel)]=\"nomeArquivo\" placeholder=\"Nome do arquivo\"> <button (click)=\"salvarArquivo()\" [disabled]=\"!arquivoAtual\">Salvar</button> <button (click)=\"deletarArquivo()\" [disabled]=\"!arquivoAtual\">Deletar</button> </div> <textarea [(ngModel)]=\"conteudoArquivo\" placeholder=\"Digite seu conte\u00fado aqui...\" rows=\"20\" cols=\"80\"> </textarea> </div> </div> ` }) export class EditorArquivosComponent implements OnInit { arquivos: any[] = []; arquivoAtual: string = ''; nomeArquivo: string = ''; conteudoArquivo: string = ''; constructor(private opfsService: OpfsService) {} async ngOnInit() { const suportado = await this.opfsService.inicializar(); if (suportado) { await this.carregarListaArquivos(); } else { alert('OPFS n\u00e3o \u00e9 suportado neste navegador'); } } async carregarListaArquivos() { this.arquivos = await this.opfsService.listarArquivos(); } async abrirArquivo(nome: string) { try { this.conteudoArquivo = await this.opfsService.lerArquivo(nome); this.arquivoAtual = nome; this.nomeArquivo = nome; } catch (error) { console.error('Erro ao abrir arquivo:', error); } } async salvarArquivo() { if (!this.nomeArquivo || !this.conteudoArquivo) return; try { await this.opfsService.salvarArquivo(this.nomeArquivo, this.conteudoArquivo); this.arquivoAtual = this.nomeArquivo; await this.carregarListaArquivos(); } catch (error) { console.error('Erro ao salvar arquivo:', error); } } async deletarArquivo() { if (!this.arquivoAtual) return; if (confirm(`Deletar arquivo ${this.arquivoAtual}?`)) { try { await this.opfsService.deletarArquivo(this.arquivoAtual); this.arquivoAtual = ''; this.nomeArquivo = ''; this.conteudoArquivo = ''; await this.carregarListaArquivos(); } catch (error) { console.error('Erro ao deletar arquivo:', error); } } } criarNovoArquivo() { this.arquivoAtual = ''; this.nomeArquivo = 'novo-arquivo.txt'; this.conteudoArquivo = ''; } } \ud83d\udcfa CONTE\u00daDOS PARA ASSISTIR YouTube : \"Origin Private File System API\" - Chrome for Developers YouTube : \"File System Access API vs OPFS\" - Web Platform News Talk : \"The Future of File Storage on the Web\" - Google I/O \ud83d\udcda FONTES DE ESTUDO Web.dev - Origin Private File System MDN - File System API Chrome Platform Status - OPFS \ud83d\udcdd EXERC\u00cdCIOS PR\u00c1TICOS Exerc\u00edcio 1 - Sistema de Backup Local Implemente um sistema que: Fa\u00e7a backup autom\u00e1tico de dados da aplica\u00e7\u00e3o Mantenha m\u00faltiplas vers\u00f5es Permita restaura\u00e7\u00e3o seletiva Exerc\u00edcio 2 - Editor de Imagens Offline Crie um editor que: Carregue e salve imagens localmente Mantenha hist\u00f3rico de edi\u00e7\u00f5es Exporte em diferentes formatos 7. PROJETO FINAL \ud83c\udfaf ESPECIFICA\u00c7\u00d5ES DO PROJETO Tema: Sistema de Gest\u00e3o de Conte\u00fado Offline-First Desenvolva uma aplica\u00e7\u00e3o Angular que demonstre o uso integrado de todas as tecnologias de storage estudadas: Funcionalidades Obrigat\u00f3rias: Sistema de Usu\u00e1rios (Cookies + localStorage) Login/logout com cookies seguros Prefer\u00eancias salvas em localStorage Sess\u00e3o com timeout Gest\u00e3o de Conte\u00fado (IndexedDB + sessionStorage) CRUD completo de artigos/posts Rascunhos salvos automaticamente Cache de dados da API Funcionalidade Offline (Service Workers + Cache API) Aplica\u00e7\u00e3o funciona sem internet Sincroniza\u00e7\u00e3o quando voltar online Updates autom\u00e1ticos da aplica\u00e7\u00e3o Sistema de Arquivos (OPFS) Upload e gest\u00e3o de imagens Export de dados Backup local autom\u00e1tico Arquitetura Sugerida: src/ \u251c\u2500\u2500 app/ \u2502 \u251c\u2500\u2500 core/ \u2502 \u2502 \u251c\u2500\u2500 services/ \u2502 \u2502 \u2502 \u251c\u2500\u2500 storage/ \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 local-storage.service.ts \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 session-storage.service.ts \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 cookie.service.ts \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 indexeddb.service.ts \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 opfs.service.ts \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 cache.service.ts \u2502 \u2502 \u2502 \u251c\u2500\u2500 auth.service.ts \u2502 \u2502 \u2502 \u2514\u2500\u2500 sync.service.ts \u2502 \u2502 \u2514\u2500\u2500 models/ \u2502 \u251c\u2500\u2500 features/ \u2502 \u2502 \u251c\u2500\u2500 auth/ \u2502 \u2502 \u251c\u2500\u2500 content/ \u2502 \u2502 \u251c\u2500\u2500 files/ \u2502 \u2502 \u2514\u2500\u2500 settings/ \u2502 \u2514\u2500\u2500 shared/ \u2514\u2500\u2500 sw.js Crit\u00e9rios de Avalia\u00e7\u00e3o: Implementa\u00e7\u00e3o T\u00e9cnica (40%) Uso correto de cada tecnologia de storage Tratamento de erros Performance Arquitetura (30%) Organiza\u00e7\u00e3o do c\u00f3digo Separa\u00e7\u00e3o de responsabilidades Reutiliza\u00e7\u00e3o UX/UI (20%) Interface intuitiva Feedback ao usu\u00e1rio Responsividade Documenta\u00e7\u00e3o (10%) README completo Coment\u00e1rios no c\u00f3digo Guia de instala\u00e7\u00e3o \ud83d\udccb ENTREG\u00c1VEIS C\u00f3digo fonte no GitHub Demo online (GitHub Pages/Netlify) Documenta\u00e7\u00e3o t\u00e9cnica Apresenta\u00e7\u00e3o (10 minutos) \u23f0 Cronograma Semana 1-2 : Configura\u00e7\u00e3o inicial e autentica\u00e7\u00e3o Semana 3-4 : Gest\u00e3o de conte\u00fado e IndexedDB Semana 5-6 : Service Workers e funcionalidade offline Semana 7-8 : OPFS e refinamentos finais \ud83d\udcda RECURSOS ADICIONAIS Trilha de Conte\u00fado Complementar: N\u00edvel Iniciante: NgGirls - Tutorial LocalStorage TreinaWeb - Storage Comparison Angular Training - Storage Guide N\u00edvel Intermedi\u00e1rio: FreeCodeCamp - IndexedDB Guide Dexie.js - Angular Tutorial Telerik - IndexedDB for Beginners N\u00edvel Avan\u00e7ado: RxDB - Angular IndexedDB Akita - State Management Auth0 - Akita Integration Service Workers & PWA: Angular University - SW Guide CodeZup - Practical SW Guide Web.dev - SW Caching OPFS & Modern APIs: Web.dev - OPFS Chrome Platform Status - OPFS Canais YouTube Recomendados: Academind - Angular tutorials Programming with Mosh - Web fundamentals Traversy Media - Full-stack development Google Chrome Developers - Web APIs Angular - Official channel Comunidades e F\u00f3runs: Stack Overflow - D\u00favidas t\u00e9cnicas Angular Discord - Comunidade ativa Reddit r/Angular2 - Discuss\u00f5es Dev.to - Artigos da comunidade \ud83c\udfc6 CONCLUS\u00c3O Esta apostila oferece uma base s\u00f3lida para compreender e implementar todas as principais tecnologias de armazenamento web modernas. O dom\u00ednio desses conceitos \u00e9 essencial para desenvolver aplica\u00e7\u00f5es web robustas, perform\u00e1ticas e com excelente experi\u00eancia do usu\u00e1rio. Lembre-se: a escolha da tecnologia de storage adequada depende sempre do contexto espec\u00edfico do seu projeto. Use esta apostila como refer\u00eancia e pratique bastante com os exerc\u00edcios propostos. Boa sorte nos estudos! \ud83d\ude80","title":"Armazenamento Web"},{"location":"Web/Armazenamento/#1-localstorage","text":"\ud83d\udcd6 CONCEITOS FUNDAMENTAIS O localStorage \u00e9 uma API de armazenamento web que permite salvar dados no navegador de forma persistente . Os dados permanecem dispon\u00edveis mesmo ap\u00f3s fechar o navegador. Caracter\u00edsticas: Capacidade : ~5-10MB por origem Persist\u00eancia : Permanente (at\u00e9 ser limpo manualmente) Escopo : Por origem (protocolo + dom\u00ednio + porta) Sincronismo : API s\u00edncrona Tipo de dados : Apenas strings Quando usar: Prefer\u00eancias do usu\u00e1rio Configura\u00e7\u00f5es da aplica\u00e7\u00e3o Cache de dados pequenos Estado da aplica\u00e7\u00e3o que deve persistir \ud83d\udd27 IMPLEMENTA\u00c7\u00c3O PR\u00c1TICA Opera\u00e7\u00f5es B\u00e1sicas: // Salvar dados localStorage.setItem('usuario', 'Jo\u00e3o Silva'); localStorage.setItem('configuracoes', JSON.stringify({ tema: 'dark', idioma: 'pt-BR' })); // Recuperar dados const usuario = localStorage.getItem('usuario'); const config = JSON.parse(localStorage.getItem('configuracoes') || '{}'); // Verificar se existe if (localStorage.getItem('token')) { console.log('Usu\u00e1rio logado'); } // Remover item espec\u00edfico localStorage.removeItem('usuario'); // Limpar tudo localStorage.clear(); // Obter n\u00famero de itens console.log(localStorage.length); // Iterar pelos itens for (let i = 0; i < localStorage.length; i++) { const key = localStorage.key(i); const value = localStorage.getItem(key); console.log(key, value); } Service Angular para localStorage: import { Injectable } from '@angular/core'; @Injectable({ providedIn: 'root' }) export class LocalStorageService { setItem(key: string, value: any): void { try { localStorage.setItem(key, JSON.stringify(value)); } catch (error) { console.error('Erro ao salvar no localStorage:', error); } } getItem<T>(key: string): T | null { try { const item = localStorage.getItem(key); return item ? JSON.parse(item) : null; } catch (error) { console.error('Erro ao ler do localStorage:', error); return null; } } removeItem(key: string): void { localStorage.removeItem(key); } clear(): void { localStorage.clear(); } exists(key: string): boolean { return localStorage.getItem(key) !== null; } } \ud83d\udcfa CONTE\u00daDOS PARA ASSISTIR YouTube : \"LocalStorage JavaScript Tutorial\" - Programming with Mosh YouTube : \"Angular LocalStorage Service\" - Academind Curso Online : \"JavaScript Web Storage\" - freeCodeCamp \ud83d\udcda FONTES DE ESTUDO TreinaWeb - LocalStorage vs SessionStorage Angular Training - Storage Guide JSCrambler - Angular Local Storage \ud83d\udcdd EXERC\u00cdCIOS PR\u00c1TICOS Exerc\u00edcio 1 - Sistema de Prefer\u00eancias Crie um sistema que salve as prefer\u00eancias do usu\u00e1rio: Tema (claro/escuro) Idioma preferido Tamanho da fonte Exerc\u00edcio 2 - Carrinho de Compras Implemente um carrinho que persista entre sess\u00f5es: Adicionar/remover produtos Calcular total Manter estado ap\u00f3s fechar o navegador Exerc\u00edcio 3 - Hist\u00f3rico de Pesquisas Desenvolva um sistema que armazene: \u00daltimas 10 pesquisas do usu\u00e1rio Data/hora de cada pesquisa Funcionalidade de limpar hist\u00f3rico","title":"1. localStorage"},{"location":"Web/Armazenamento/#2-sessionstorage","text":"\ud83d\udcd6 CONCEITOS FUNDAMENTAIS O sessionStorage funciona de forma similar ao localStorage, mas os dados s\u00e3o tempor\u00e1rios e existem apenas durante a sess\u00e3o da aba do navegador. Caracter\u00edsticas: Capacidade : ~5-10MB por origem Persist\u00eancia : Apenas durante a sess\u00e3o da aba Escopo : Por aba do navegador Sincronismo : API s\u00edncrona Tipo de dados : Apenas strings Quando usar: Dados tempor\u00e1rios de formul\u00e1rios Estado da navega\u00e7\u00e3o Informa\u00e7\u00f5es sens\u00edveis que n\u00e3o devem persistir Dados de sess\u00e3o de usu\u00e1rio \ud83d\udd27 IMPLEMENTA\u00c7\u00c3O PR\u00c1TICA Opera\u00e7\u00f5es B\u00e1sicas: // API id\u00eantica ao localStorage sessionStorage.setItem('sessaoAtual', JSON.stringify({ usuario: 'Jo\u00e3o', inicioSessao: new Date().getTime(), paginaAtual: 'dashboard' })); // Recuperar dados da sess\u00e3o const sessao = JSON.parse(sessionStorage.getItem('sessaoAtual') || '{}'); // Verificar tempo de sess\u00e3o const tempoSessao = Date.now() - sessao.inicioSessao; if (tempoSessao > 30 * 60 * 1000) { // 30 minutos console.log('Sess\u00e3o expirada'); sessionStorage.clear(); } Service Angular para sessionStorage: import { Injectable } from '@angular/core'; @Injectable({ providedIn: 'root' }) export class SessionStorageService { private readonly SESSION_TIMEOUT = 30 * 60 * 1000; // 30 minutos setItem(key: string, value: any): void { try { const data = { value, timestamp: Date.now() }; sessionStorage.setItem(key, JSON.stringify(data)); } catch (error) { console.error('Erro ao salvar no sessionStorage:', error); } } getItem<T>(key: string): T | null { try { const item = sessionStorage.getItem(key); if (!item) return null; const data = JSON.parse(item); // Verificar se n\u00e3o expirou if (Date.now() - data.timestamp > this.SESSION_TIMEOUT) { this.removeItem(key); return null; } return data.value; } catch (error) { console.error('Erro ao ler do sessionStorage:', error); return null; } } removeItem(key: string): void { sessionStorage.removeItem(key); } clear(): void { sessionStorage.clear(); } } \ud83d\udcfa CONTE\u00daDOS PARA ASSISTIR YouTube : \"SessionStorage vs LocalStorage\" - Web Dev Simplified YouTube : \"Angular Session Management\" - Codevolution Tutorial : \"Browser Storage Comparison\" - Traversy Media \ud83d\udcda FONTES DE ESTUDO TechSpawn - Compara\u00e7\u00e3o de Storage NgGirls - Tutorial Pr\u00e1tico \ud83d\udcdd EXERC\u00cdCIOS PR\u00c1TICOS Exerc\u00edcio 1 - Formul\u00e1rio Multipasso Implemente um wizard que salve o progresso: Salvar dados a cada passo Restaurar se usu\u00e1rio voltar \u00e0 p\u00e1gina Limpar ao concluir Exerc\u00edcio 2 - Estado de Navega\u00e7\u00e3o Crie um sistema que mantenha: Filtros aplicados em uma listagem P\u00e1gina atual de pagina\u00e7\u00e3o Ordena\u00e7\u00e3o selecionada","title":"2. sessionStorage"},{"location":"Web/Armazenamento/#3-cookies","text":"\ud83d\udcd6 CONCEITOS FUNDAMENTAIS Cookies s\u00e3o pequenos arquivos de texto que o navegador armazena e envia automaticamente para o servidor a cada requisi\u00e7\u00e3o HTTP. Caracter\u00edsticas: Capacidade : ~4KB por cookie Persist\u00eancia : Configur\u00e1vel (sess\u00e3o ou data espec\u00edfica) Escopo : Configur\u00e1vel (dom\u00ednio e path) Automatismo : Enviados automaticamente ao servidor Seguran\u00e7a : Op\u00e7\u00f5es HttpOnly, Secure, SameSite Quando usar: Autentica\u00e7\u00e3o e sess\u00f5es Rastreamento de usu\u00e1rio Personaliza\u00e7\u00e3o baseada em servidor Conformidade com LGPD/GDPR \ud83d\udd27 IMPLEMENTA\u00c7\u00c3O PR\u00c1TICA Manipula\u00e7\u00e3o B\u00e1sica: // Criar cookie simples document.cookie = \"usuario=joao\"; // Cookie com expira\u00e7\u00e3o const dataExpiracao = new Date(); dataExpiracao.setTime(dataExpiracao.getTime() + (24 * 60 * 60 * 1000)); // 24 horas document.cookie = `sessao=abc123; expires=${dataExpiracao.toUTCString()}; path=/`; // Cookie seguro document.cookie = \"token=xyz789; Secure; HttpOnly; SameSite=Strict\"; // Fun\u00e7\u00e3o para ler cookie function getCookie(nome) { const nomeEQ = nome + \"=\"; const cookies = document.cookie.split(';'); for(let i = 0; i < cookies.length; i++) { let cookie = cookies[i]; while (cookie.charAt(0) === ' ') { cookie = cookie.substring(1, cookie.length); } if (cookie.indexOf(nomeEQ) === 0) { return cookie.substring(nomeEQ.length, cookie.length); } } return null; } // Fun\u00e7\u00e3o para deletar cookie function deleteCookie(nome) { document.cookie = nome + \"=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;\"; } Service Angular para Cookies: import { Injectable } from '@angular/core'; export interface CookieOptions { expires?: Date; path?: string; domain?: string; secure?: boolean; sameSite?: 'Strict' | 'Lax' | 'None'; } @Injectable({ providedIn: 'root' }) export class CookieService { set(name: string, value: string, options: CookieOptions = {}): void { let cookie = `${encodeURIComponent(name)}=${encodeURIComponent(value)}`; if (options.expires) { cookie += `; expires=${options.expires.toUTCString()}`; } if (options.path) { cookie += `; path=${options.path}`; } if (options.domain) { cookie += `; domain=${options.domain}`; } if (options.secure) { cookie += '; Secure'; } if (options.sameSite) { cookie += `; SameSite=${options.sameSite}`; } document.cookie = cookie; } get(name: string): string | null { const nameEQ = encodeURIComponent(name) + \"=\"; const cookies = document.cookie.split(';'); for (let cookie of cookies) { cookie = cookie.trim(); if (cookie.indexOf(nameEQ) === 0) { return decodeURIComponent(cookie.substring(nameEQ.length)); } } return null; } delete(name: string, path: string = '/'): void { this.set(name, '', { expires: new Date(0), path: path }); } exists(name: string): boolean { return this.get(name) !== null; } getAll(): { [key: string]: string } { const cookies: { [key: string]: string } = {}; if (document.cookie) { document.cookie.split(';').forEach(cookie => { const [name, value] = cookie.trim().split('='); cookies[decodeURIComponent(name)] = decodeURIComponent(value || ''); }); } return cookies; } } \ud83d\udcfa CONTE\u00daDOS PARA ASSISTIR YouTube : \"HTTP Cookies Explained\" - Hussein Nasser YouTube : \"Cookie vs LocalStorage vs SessionStorage\" - Web Dev Simplified Curso : \"Web Security & Cookies\" - OWASP \ud83d\udcda FONTES DE ESTUDO GeeksforGeeks - Diferen\u00e7as entre Storage DigitalOcean - Introdu\u00e7\u00e3o ao Storage \ud83d\udcdd EXERC\u00cdCIOS PR\u00c1TICOS Exerc\u00edcio 1 - Sistema de Login Implemente autentica\u00e7\u00e3o com cookies: Cookie de sess\u00e3o Lembrar usu\u00e1rio (persistent cookie) Logout seguro Exerc\u00edcio 2 - Banner de Cookies (LGPD) Crie um sistema de consentimento: Banner de aceita\u00e7\u00e3o Categoriza\u00e7\u00e3o de cookies Configura\u00e7\u00f5es de privacidade","title":"3. Cookies"},{"location":"Web/Armazenamento/#4-indexeddb","text":"\ud83d\udcd6 CONCEITOS FUNDAMENTAIS IndexedDB \u00e9 um banco de dados NoSQL completo que roda no navegador, permitindo armazenar grandes quantidades de dados estruturados. Caracter\u00edsticas: Capacidade : Limitada pelo espa\u00e7o em disco Persist\u00eancia : Permanente Tipo de dados : Objetos JavaScript complexos Transa\u00e7\u00f5es : Suporte completo ACID \u00cdndices : Consultas r\u00e1pidas Ass\u00edncrono : API baseada em Promises/Events Quando usar: Aplica\u00e7\u00f5es offline-first Cache de dados grandes Sincroniza\u00e7\u00e3o de dados Armazenamento de arquivos/blobs \ud83d\udd27 IMPLEMENTA\u00c7\u00c3O PR\u00c1TICA Configura\u00e7\u00e3o B\u00e1sica: // Abrir banco de dados function abrirBanco() { return new Promise((resolve, reject) => { const request = indexedDB.open('MeuApp', 1); request.onerror = () => reject(request.error); request.onsuccess = () => resolve(request.result); request.onupgradeneeded = (event) => { const db = event.target.result; // Criar object store if (!db.objectStoreNames.contains('usuarios')) { const store = db.createObjectStore('usuarios', { keyPath: 'id', autoIncrement: true }); // Criar \u00edndices store.createIndex('email', 'email', { unique: true }); store.createIndex('nome', 'nome', { unique: false }); } }; }); } // Opera\u00e7\u00f5es CRUD class UsuarioRepository { constructor(db) { this.db = db; } async criar(usuario) { const transaction = this.db.transaction(['usuarios'], 'readwrite'); const store = transaction.objectStore('usuarios'); return store.add(usuario); } async buscarPorId(id) { const transaction = this.db.transaction(['usuarios'], 'readonly'); const store = transaction.objectStore('usuarios'); return store.get(id); } async buscarPorEmail(email) { const transaction = this.db.transaction(['usuarios'], 'readonly'); const store = transaction.objectStore('usuarios'); const index = store.index('email'); return index.get(email); } async listarTodos() { const transaction = this.db.transaction(['usuarios'], 'readonly'); const store = transaction.objectStore('usuarios'); return store.getAll(); } async atualizar(usuario) { const transaction = this.db.transaction(['usuarios'], 'readwrite'); const store = transaction.objectStore('usuarios'); return store.put(usuario); } async deletar(id) { const transaction = this.db.transaction(['usuarios'], 'readwrite'); const store = transaction.objectStore('usuarios'); return store.delete(id); } } Usando Dexie.js (Wrapper Simplificado): import Dexie, { Table } from 'dexie'; export interface Usuario { id?: number; nome: string; email: string; idade: number; criadoEm: Date; } export class AppDatabase extends Dexie { usuarios!: Table<Usuario>; constructor() { super('AppDatabase'); this.version(1).stores({ usuarios: '++id, nome, email, idade, criadoEm' }); } } export const db = new AppDatabase(); // Service Angular com Dexie import { Injectable } from '@angular/core'; @Injectable({ providedIn: 'root' }) export class UsuarioService { async criarUsuario(usuario: Omit<Usuario, 'id'>): Promise<number> { return await db.usuarios.add({ ...usuario, criadoEm: new Date() }); } async buscarUsuarios(): Promise<Usuario[]> { return await db.usuarios.orderBy('nome').toArray(); } async buscarPorEmail(email: string): Promise<Usuario | undefined> { return await db.usuarios.where('email').equals(email).first(); } async atualizarUsuario(id: number, dados: Partial<Usuario>): Promise<number> { return await db.usuarios.update(id, dados); } async deletarUsuario(id: number): Promise<void> { await db.usuarios.delete(id); } async pesquisarPorNome(termo: string): Promise<Usuario[]> { return await db.usuarios .where('nome') .startsWithIgnoreCase(termo) .toArray(); } } \ud83d\udcfa CONTE\u00daDOS PARA ASSISTIR YouTube : \"IndexedDB Crash Course\" - Traversy Media YouTube : \"Dexie.js Tutorial\" - The Net Ninja Curso : \"Offline First Web Apps\" - Google Developers \ud83d\udcda FONTES DE ESTUDO FreeCodeCamp - Guia Completo IndexedDB Telerik - Guia para Iniciantes Dexie.js - Tutorial Angular \ud83d\udcdd EXERC\u00cdCIOS PR\u00c1TICOS Exerc\u00edcio 1 - Sistema de Tarefas Offline Desenvolva um todo app que funcione offline: CRUD completo de tarefas Categorias e tags Busca por texto Sincroniza\u00e7\u00e3o quando online Exerc\u00edcio 2 - Cache de Dados da API Implemente um sistema de cache inteligente: Armazenar respostas da API Refresh autom\u00e1tico Estrat\u00e9gia de invalida\u00e7\u00e3o","title":"4. IndexedDB"},{"location":"Web/Armazenamento/#5-cache-api-service-workers","text":"\ud83d\udcd6 CONCEITOS FUNDAMENTAIS A Cache API, junto com Service Workers, permite criar aplica\u00e7\u00f5es web que funcionam offline interceptando requisi\u00e7\u00f5es de rede e servindo conte\u00fado cacheado. Caracter\u00edsticas: Capacidade : Limitada pelo espa\u00e7o em disco Persist\u00eancia : Permanente (at\u00e9 ser limpa) Escopo : Controlado por Service Worker Estrat\u00e9gias : Cache-first, Network-first, etc. Atualiza\u00e7\u00f5es : Controle granular de versioning Quando usar: Progressive Web Apps (PWA) Aplica\u00e7\u00f5es offline-first Cache de recursos est\u00e1ticos Otimiza\u00e7\u00e3o de performance \ud83d\udd27 IMPLEMENTA\u00c7\u00c3O PR\u00c1TICA Service Worker B\u00e1sico: // sw.js const CACHE_NAME = 'meu-app-v1'; const urlsToCache = [ '/', '/styles/main.css', '/scripts/app.js', '/images/logo.png' ]; // Instala\u00e7\u00e3o - cachear recursos self.addEventListener('install', (event) => { event.waitUntil( caches.open(CACHE_NAME) .then((cache) => { console.log('Cache aberto'); return cache.addAll(urlsToCache); }) ); }); // Interceptar requisi\u00e7\u00f5es self.addEventListener('fetch', (event) => { event.respondWith( caches.match(event.request) .then((response) => { // Cache hit - retornar resposta if (response) { return response; } // Cache miss - fazer requisi\u00e7\u00e3o return fetch(event.request) .then((response) => { const responseClone = response.clone(); caches.open(CACHE_NAME) .then((cache) => { cache.put(event.request, responseClone); }); return response; }); }) ); }); // Atualiza\u00e7\u00e3o - limpar caches antigos self.addEventListener('activate', (event) => { event.waitUntil( caches.keys().then((cacheNames) => { return Promise.all( cacheNames.map((cacheName) => { if (cacheName !== CACHE_NAME) { console.log('Deletando cache antigo:', cacheName); return caches.delete(cacheName); } }) ); }) ); }); Estrat\u00e9gias de Cache: // Cache First - para recursos est\u00e1ticos async function cacheFirst(request) { const cachedResponse = await caches.match(request); return cachedResponse || fetch(request); } // Network First - para dados din\u00e2micos async function networkFirst(request) { try { const response = await fetch(request); const cache = await caches.open(CACHE_NAME); cache.put(request, response.clone()); return response; } catch (error) { const cachedResponse = await caches.match(request); return cachedResponse || new Response('Offline', { status: 503 }); } } // Stale While Revalidate - melhor UX async function staleWhileRevalidate(request) { const cachedResponse = await caches.match(request); const fetchPromise = fetch(request).then((response) => { const cache = caches.open(CACHE_NAME); cache.then((c) => c.put(request, response.clone())); return response; }); return cachedResponse || fetchPromise; } Angular Service Worker: // Adicionar ao projeto Angular // ng add @angular/pwa // Configura\u00e7\u00e3o ngsw-config.json /* { \"index\": \"/index.html\", \"assetGroups\": [ { \"name\": \"app\", \"installMode\": \"prefetch\", \"resources\": { \"files\": [ \"/favicon.ico\", \"/index.html\", \"/manifest.webmanifest\", \"/*.css\", \"/*.js\" ] } } ], \"dataGroups\": [ { \"name\": \"api-cache\", \"urls\": [\"/api/**\"], \"cacheConfig\": { \"strategy\": \"freshness\", \"maxSize\": 100, \"maxAge\": \"1d\", \"timeout\": \"5s\" } } ] } */ // Service para interagir com SW import { Injectable } from '@angular/core'; import { SwUpdate } from '@angular/service-worker'; @Injectable({ providedIn: 'root' }) export class PwaService { constructor(private swUpdate: SwUpdate) { if (swUpdate.isEnabled) { swUpdate.available.subscribe(() => { if (confirm('Nova vers\u00e3o dispon\u00edvel. Atualizar?')) { window.location.reload(); } }); } } checkForUpdate(): void { if (this.swUpdate.isEnabled) { this.swUpdate.checkForUpdate(); } } } \ud83d\udcfa CONTE\u00daDOS PARA ASSISTIR YouTube : \"Service Workers Explained\" - Google Chrome Developers YouTube : \"Building PWAs with Angular\" - Angular Curso : \"Progressive Web Apps Training\" - Google Developers \ud83d\udcda FONTES DE ESTUDO Angular University - Service Worker Guide CodeZup - Practical Guide Web.dev - Service Worker Caching \ud83d\udcdd EXERC\u00cdCIOS PR\u00c1TICOS Exerc\u00edcio 1 - PWA Completa Transforme uma aplica\u00e7\u00e3o em PWA: Service Worker customizado Cache de recursos e APIs Funcionalidade offline Installable app Exerc\u00edcio 2 - Cache Inteligente Implemente diferentes estrat\u00e9gias: Cache-first para CSS/JS Network-first para dados Background sync para formul\u00e1rios","title":"5. Cache API (Service Workers)"},{"location":"Web/Armazenamento/#6-opfs-origin-private-file-system","text":"\ud83d\udcd6 CONCEITOS FUNDAMENTAIS OPFS \u00e9 uma API moderna que permite aplica\u00e7\u00f5es web criar, ler e manipular arquivos em um sistema de arquivos virtual privado por origem. Caracter\u00edsticas: Capacidade : Limitada pelo espa\u00e7o em disco dispon\u00edvel Performance : Acesso byte-a-byte otimizado Privacidade : N\u00e3o vis\u00edvel ao usu\u00e1rio, privado por origem Seguran\u00e7a : N\u00e3o requer permiss\u00f5es do usu\u00e1rio Streaming : Suporte a manipula\u00e7\u00e3o de arquivos grandes Quando usar: Manipula\u00e7\u00e3o de arquivos grandes Bancos de dados personalizados Cache de alta performance Aplica\u00e7\u00f5es que precisam de I/O intensivo \ud83d\udd27 IMPLEMENTA\u00c7\u00c3O PR\u00c1TICA Opera\u00e7\u00f5es B\u00e1sicas: // Verificar suporte if ('storage' in navigator && 'getDirectory' in navigator.storage) { console.log('OPFS suportado'); } else { console.log('OPFS n\u00e3o suportado'); } // Obter diret\u00f3rio raiz async function obterDiretorioRaiz() { return await navigator.storage.getDirectory(); } // Criar arquivo async function criarArquivo(nome, conteudo) { const root = await navigator.storage.getDirectory(); const fileHandle = await root.getFileHandle(nome, { create: true }); const writable = await fileHandle.createWritable(); await writable.write(conteudo); await writable.close(); return fileHandle; } // Ler arquivo async function lerArquivo(nome) { const root = await navigator.storage.getDirectory(); const fileHandle = await root.getFileHandle(nome); const file = await fileHandle.getFile(); return await file.text(); } // Listar arquivos async function listarArquivos() { const root = await navigator.storage.getDirectory(); const arquivos = []; for await (const [nome, handle] of root.entries()) { arquivos.push({ nome, tipo: handle.kind, handle }); } return arquivos; } // Deletar arquivo async function deletarArquivo(nome) { const root = await navigator.storage.getDirectory(); await root.removeEntry(nome); } Manipula\u00e7\u00e3o Avan\u00e7ada com Streams: // Acesso s\u00edncrono (apenas em Web Workers) async function accessoSincrono() { const root = await navigator.storage.getDirectory(); const fileHandle = await root.getFileHandle('dados.db', { create: true }); // Criar handle de acesso s\u00edncrono const syncHandle = await fileHandle.createSyncAccessHandle(); // Escrever dados const encoder = new TextEncoder(); const data = encoder.encode('Dados importantes'); syncHandle.write(data, { at: 0 }); // Ler dados const buffer = new ArrayBuffer(1024); const bytesRead = syncHandle.read(buffer, { at: 0 }); const decoder = new TextDecoder(); const texto = decoder.decode(buffer.slice(0, bytesRead)); // Obter tamanho do arquivo const tamanho = syncHandle.getSize(); // Truncar arquivo syncHandle.truncate(100); // Fechar handle syncHandle.close(); } // Sistema de arquivos hier\u00e1rquico async function estruturaHierarquica() { const root = await navigator.storage.getDirectory(); // Criar diret\u00f3rio const pastaDados = await root.getDirectoryHandle('dados', { create: true }); const pastaImagens = await root.getDirectoryHandle('imagens', { create: true }); // Criar arquivo em subdiret\u00f3rio const arquivo = await pastaDados.getFileHandle('config.json', { create: true }); const writable = await arquivo.createWritable(); await writable.write(JSON.stringify({ versao: '1.0', configuracoes: { tema: 'dark', idioma: 'pt-BR' } })); await writable.close(); } Service Angular para OPFS: import { Injectable } from '@angular/core'; export interface ArquivoOPFS { nome: string; tamanho: number; tipo: 'file' | 'directory'; ultimaModificacao: Date; } @Injectable({ providedIn: 'root' }) export class OpfsService { private rootDirectoryHandle: FileSystemDirectoryHandle | null = null; async inicializar(): Promise<boolean> { if ('storage' in navigator && 'getDirectory' in navigator.storage) { this.rootDirectoryHandle = await navigator.storage.getDirectory(); return true; } return false; } async salvarArquivo(caminho: string, conteudo: string | ArrayBuffer): Promise<void> { if (!this.rootDirectoryHandle) { throw new Error('OPFS n\u00e3o inicializado'); } const fileHandle = await this.rootDirectoryHandle.getFileHandle(caminho, { create: true }); const writable = await fileHandle.createWritable(); await writable.write(conteudo); await writable.close(); } async lerArquivo(caminho: string): Promise<string> { if (!this.rootDirectoryHandle) { throw new Error('OPFS n\u00e3o inicializado'); } const fileHandle = await this.rootDirectoryHandle.getFileHandle(caminho); const file = await fileHandle.getFile(); return await file.text(); } async lerArquivoBinario(caminho: string): Promise<ArrayBuffer> { if (!this.rootDirectoryHandle) { throw new Error('OPFS n\u00e3o inicializado'); } const fileHandle = await this.rootDirectoryHandle.getFileHandle(caminho); const file = await fileHandle.getFile(); return await file.arrayBuffer(); } async listarArquivos(diretorio: string = ''): Promise<ArquivoOPFS[]> { if (!this.rootDirectoryHandle) { throw new Error('OPFS n\u00e3o inicializado'); } let currentDir = this.rootDirectoryHandle; if (diretorio) { currentDir = await this.rootDirectoryHandle.getDirectoryHandle(diretorio); } const arquivos: ArquivoOPFS[] = []; for await (const [nome, handle] of currentDir.entries()) { if (handle.kind === 'file') { const file = await (handle as FileSystemFileHandle).getFile(); arquivos.push({ nome, tamanho: file.size, tipo: 'file', ultimaModificacao: new Date(file.lastModified) }); } else { arquivos.push({ nome, tamanho: 0, tipo: 'directory', ultimaModificacao: new Date() }); } } return arquivos; } async criarDiretorio(nome: string): Promise<void> { if (!this.rootDirectoryHandle) { throw new Error('OPFS n\u00e3o inicializado'); } await this.rootDirectoryHandle.getDirectoryHandle(nome, { create: true }); } async deletarArquivo(caminho: string): Promise<void> { if (!this.rootDirectoryHandle) { throw new Error('OPFS n\u00e3o inicializado'); } await this.rootDirectoryHandle.removeEntry(caminho); } async obterTamanhoArquivo(caminho: string): Promise<number> { if (!this.rootDirectoryHandle) { throw new Error('OPFS n\u00e3o inicializado'); } const fileHandle = await this.rootDirectoryHandle.getFileHandle(caminho); const file = await fileHandle.getFile(); return file.size; } async arquivoExiste(caminho: string): Promise<boolean> { if (!this.rootDirectoryHandle) { return false; } try { await this.rootDirectoryHandle.getFileHandle(caminho); return true; } catch { return false; } } } Exemplo Pr\u00e1tico - Editor de Arquivos: import { Component, OnInit } from '@angular/core'; import { OpfsService } from './opfs.service'; @Component({ selector: 'app-editor-arquivos', template: ` <div class=\"editor-container\"> <div class=\"sidebar\"> <h3>Arquivos</h3> <button (click)=\"criarNovoArquivo()\">Novo Arquivo</button> <ul> <li *ngFor=\"let arquivo of arquivos\" (click)=\"abrirArquivo(arquivo.nome)\" [class.selected]=\"arquivoAtual === arquivo.nome\"> {{ arquivo.nome }} ({{ arquivo.tamanho }} bytes) </li> </ul> </div> <div class=\"editor\"> <div class=\"toolbar\"> <input [(ngModel)]=\"nomeArquivo\" placeholder=\"Nome do arquivo\"> <button (click)=\"salvarArquivo()\" [disabled]=\"!arquivoAtual\">Salvar</button> <button (click)=\"deletarArquivo()\" [disabled]=\"!arquivoAtual\">Deletar</button> </div> <textarea [(ngModel)]=\"conteudoArquivo\" placeholder=\"Digite seu conte\u00fado aqui...\" rows=\"20\" cols=\"80\"> </textarea> </div> </div> ` }) export class EditorArquivosComponent implements OnInit { arquivos: any[] = []; arquivoAtual: string = ''; nomeArquivo: string = ''; conteudoArquivo: string = ''; constructor(private opfsService: OpfsService) {} async ngOnInit() { const suportado = await this.opfsService.inicializar(); if (suportado) { await this.carregarListaArquivos(); } else { alert('OPFS n\u00e3o \u00e9 suportado neste navegador'); } } async carregarListaArquivos() { this.arquivos = await this.opfsService.listarArquivos(); } async abrirArquivo(nome: string) { try { this.conteudoArquivo = await this.opfsService.lerArquivo(nome); this.arquivoAtual = nome; this.nomeArquivo = nome; } catch (error) { console.error('Erro ao abrir arquivo:', error); } } async salvarArquivo() { if (!this.nomeArquivo || !this.conteudoArquivo) return; try { await this.opfsService.salvarArquivo(this.nomeArquivo, this.conteudoArquivo); this.arquivoAtual = this.nomeArquivo; await this.carregarListaArquivos(); } catch (error) { console.error('Erro ao salvar arquivo:', error); } } async deletarArquivo() { if (!this.arquivoAtual) return; if (confirm(`Deletar arquivo ${this.arquivoAtual}?`)) { try { await this.opfsService.deletarArquivo(this.arquivoAtual); this.arquivoAtual = ''; this.nomeArquivo = ''; this.conteudoArquivo = ''; await this.carregarListaArquivos(); } catch (error) { console.error('Erro ao deletar arquivo:', error); } } } criarNovoArquivo() { this.arquivoAtual = ''; this.nomeArquivo = 'novo-arquivo.txt'; this.conteudoArquivo = ''; } } \ud83d\udcfa CONTE\u00daDOS PARA ASSISTIR YouTube : \"Origin Private File System API\" - Chrome for Developers YouTube : \"File System Access API vs OPFS\" - Web Platform News Talk : \"The Future of File Storage on the Web\" - Google I/O \ud83d\udcda FONTES DE ESTUDO Web.dev - Origin Private File System MDN - File System API Chrome Platform Status - OPFS \ud83d\udcdd EXERC\u00cdCIOS PR\u00c1TICOS Exerc\u00edcio 1 - Sistema de Backup Local Implemente um sistema que: Fa\u00e7a backup autom\u00e1tico de dados da aplica\u00e7\u00e3o Mantenha m\u00faltiplas vers\u00f5es Permita restaura\u00e7\u00e3o seletiva Exerc\u00edcio 2 - Editor de Imagens Offline Crie um editor que: Carregue e salve imagens localmente Mantenha hist\u00f3rico de edi\u00e7\u00f5es Exporte em diferentes formatos","title":"6. OPFS (Origin Private File System)"},{"location":"Web/Armazenamento/#7-projeto-final","text":"\ud83c\udfaf ESPECIFICA\u00c7\u00d5ES DO PROJETO Tema: Sistema de Gest\u00e3o de Conte\u00fado Offline-First Desenvolva uma aplica\u00e7\u00e3o Angular que demonstre o uso integrado de todas as tecnologias de storage estudadas: Funcionalidades Obrigat\u00f3rias: Sistema de Usu\u00e1rios (Cookies + localStorage) Login/logout com cookies seguros Prefer\u00eancias salvas em localStorage Sess\u00e3o com timeout Gest\u00e3o de Conte\u00fado (IndexedDB + sessionStorage) CRUD completo de artigos/posts Rascunhos salvos automaticamente Cache de dados da API Funcionalidade Offline (Service Workers + Cache API) Aplica\u00e7\u00e3o funciona sem internet Sincroniza\u00e7\u00e3o quando voltar online Updates autom\u00e1ticos da aplica\u00e7\u00e3o Sistema de Arquivos (OPFS) Upload e gest\u00e3o de imagens Export de dados Backup local autom\u00e1tico Arquitetura Sugerida: src/ \u251c\u2500\u2500 app/ \u2502 \u251c\u2500\u2500 core/ \u2502 \u2502 \u251c\u2500\u2500 services/ \u2502 \u2502 \u2502 \u251c\u2500\u2500 storage/ \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 local-storage.service.ts \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 session-storage.service.ts \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 cookie.service.ts \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 indexeddb.service.ts \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 opfs.service.ts \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 cache.service.ts \u2502 \u2502 \u2502 \u251c\u2500\u2500 auth.service.ts \u2502 \u2502 \u2502 \u2514\u2500\u2500 sync.service.ts \u2502 \u2502 \u2514\u2500\u2500 models/ \u2502 \u251c\u2500\u2500 features/ \u2502 \u2502 \u251c\u2500\u2500 auth/ \u2502 \u2502 \u251c\u2500\u2500 content/ \u2502 \u2502 \u251c\u2500\u2500 files/ \u2502 \u2502 \u2514\u2500\u2500 settings/ \u2502 \u2514\u2500\u2500 shared/ \u2514\u2500\u2500 sw.js Crit\u00e9rios de Avalia\u00e7\u00e3o: Implementa\u00e7\u00e3o T\u00e9cnica (40%) Uso correto de cada tecnologia de storage Tratamento de erros Performance Arquitetura (30%) Organiza\u00e7\u00e3o do c\u00f3digo Separa\u00e7\u00e3o de responsabilidades Reutiliza\u00e7\u00e3o UX/UI (20%) Interface intuitiva Feedback ao usu\u00e1rio Responsividade Documenta\u00e7\u00e3o (10%) README completo Coment\u00e1rios no c\u00f3digo Guia de instala\u00e7\u00e3o \ud83d\udccb ENTREG\u00c1VEIS C\u00f3digo fonte no GitHub Demo online (GitHub Pages/Netlify) Documenta\u00e7\u00e3o t\u00e9cnica Apresenta\u00e7\u00e3o (10 minutos) \u23f0 Cronograma Semana 1-2 : Configura\u00e7\u00e3o inicial e autentica\u00e7\u00e3o Semana 3-4 : Gest\u00e3o de conte\u00fado e IndexedDB Semana 5-6 : Service Workers e funcionalidade offline Semana 7-8 : OPFS e refinamentos finais \ud83d\udcda RECURSOS ADICIONAIS Trilha de Conte\u00fado Complementar: N\u00edvel Iniciante: NgGirls - Tutorial LocalStorage TreinaWeb - Storage Comparison Angular Training - Storage Guide N\u00edvel Intermedi\u00e1rio: FreeCodeCamp - IndexedDB Guide Dexie.js - Angular Tutorial Telerik - IndexedDB for Beginners N\u00edvel Avan\u00e7ado: RxDB - Angular IndexedDB Akita - State Management Auth0 - Akita Integration Service Workers & PWA: Angular University - SW Guide CodeZup - Practical SW Guide Web.dev - SW Caching OPFS & Modern APIs: Web.dev - OPFS Chrome Platform Status - OPFS Canais YouTube Recomendados: Academind - Angular tutorials Programming with Mosh - Web fundamentals Traversy Media - Full-stack development Google Chrome Developers - Web APIs Angular - Official channel Comunidades e F\u00f3runs: Stack Overflow - D\u00favidas t\u00e9cnicas Angular Discord - Comunidade ativa Reddit r/Angular2 - Discuss\u00f5es Dev.to - Artigos da comunidade \ud83c\udfc6 CONCLUS\u00c3O Esta apostila oferece uma base s\u00f3lida para compreender e implementar todas as principais tecnologias de armazenamento web modernas. O dom\u00ednio desses conceitos \u00e9 essencial para desenvolver aplica\u00e7\u00f5es web robustas, perform\u00e1ticas e com excelente experi\u00eancia do usu\u00e1rio. Lembre-se: a escolha da tecnologia de storage adequada depende sempre do contexto espec\u00edfico do seu projeto. Use esta apostila como refer\u00eancia e pratique bastante com os exerc\u00edcios propostos. Boa sorte nos estudos! \ud83d\ude80","title":"7. PROJETO FINAL"}]}